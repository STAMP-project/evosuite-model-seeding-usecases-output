<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="org.junit.Assert.assertFalse(boolean)" proba="0.14285714285714285"/><transition target="s4" action="org.junit.Assert.assertNotEquals(long,long)" proba="0.2857142857142857"/><transition target="sX" action="epsilon" proba="0.2857142857142857"/><transition target="s2" action="org.junit.Assert.assertEquals(long,long)" proba="0.2857142857142857"/></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s5"><transition target="s5" action="org.junit.Assert.assertEquals(java.lang.Object,java.lang.Object)" proba="0.16666666666666666"/><transition target="s10" action="org.junit.Assert.fail()" proba="0.05555555555555555"/><transition target="sX" action="epsilon" proba="0.7222222222222222"/><transition target="s2" action="org.junit.Assert.assertEquals(long,long)" proba="0.05555555555555555"/></state><state id="s10"><transition target="s5" action="org.junit.Assert.assertEquals(java.lang.Object,java.lang.Object)" proba="0.5"/><transition target="sX" action="epsilon" proba="0.5"/></state><state id="s6"><transition target="s2" action="org.junit.Assert.assertEquals(long,long)" proba="1.0"/></state><state id="s7"><transition target="s7" action="org.junit.Assert.assertThat(java.lang.Object,org.hamcrest.Matcher)" proba="0.5"/><transition target="sX" action="epsilon" proba="0.5"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="org.junit.Assert.assertFalse(boolean)" proba="0.14814814814814814"/><transition target="s5" action="org.junit.Assert.assertEquals(java.lang.Object,java.lang.Object)" proba="0.4444444444444444"/><transition target="s6" action="org.junit.Assert.assertNull(java.lang.Object)" proba="0.07407407407407407"/><transition target="s10" action="org.junit.Assert.fail()" proba="0.037037037037037035"/><transition target="s7" action="org.junit.Assert.assertThat(java.lang.Object,org.hamcrest.Matcher)" proba="0.07407407407407407"/><transition target="s8" action="org.junit.Assert.assertTrue(java.lang.String,boolean)" proba="0.037037037037037035"/><transition target="s9" action="org.junit.Assert.assertNotNull(java.lang.Object)" proba="0.037037037037037035"/><transition target="s1" action="org.junit.Assert.assertTrue(boolean)" proba="0.1111111111111111"/><transition target="s2" action="org.junit.Assert.assertEquals(long,long)" proba="0.037037037037037035"/></state><state id="s1"><transition target="s2" action="org.junit.Assert.assertEquals(long,long)" proba="1.0"/></state><state id="s2"><transition target="s3" action="org.junit.Assert.assertFalse(boolean)" proba="0.10526315789473684"/><transition target="s5" action="org.junit.Assert.assertEquals(java.lang.Object,java.lang.Object)" proba="0.10526315789473684"/><transition target="sX" action="epsilon" proba="0.2631578947368421"/><transition target="s1" action="org.junit.Assert.assertTrue(boolean)" proba="0.05263157894736842"/><transition target="s2" action="org.junit.Assert.assertEquals(long,long)" proba="0.47368421052631576"/></state></states></ts>