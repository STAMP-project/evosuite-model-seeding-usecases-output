/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 21 07:39:55 GMT 2019
 */

package no.tellu.findit.services.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.Instant;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UUID;
import no.tellu.findit.services.cassandra.ActivityLogItem;
import no.tellu.findit.services.cassandra.ActivityLogItemType;
import no.tellu.findit.services.cassandra.HierarchyLevel;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockUUID;

public class ActivityLogItem_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      activityLogItem0.getHierarchyLevel();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      String string0 = activityLogItem0.getSourceType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      activityLogItem0.setData("");
      assertEquals("", activityLogItem0.getData());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = new Long(0L);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.WARNING;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.PROVIDER;
      ActivityLogItem activityLogItem0 = new ActivityLogItem("", (Long) null, long0, (Date) null, activityLogItemType0, hierarchyLevel0, (Long) null, "", long0, "I+_?*5M)CMtcU", "", "", (List<String>) null);
      Long long1 = activityLogItem0.getProviderId();
      assertEquals("", activityLogItem0.getAdditionalData());
      assertEquals("", activityLogItem0.getData());
      assertNotNull(long1);
      assertEquals("I+_?*5M)CMtcU", activityLogItem0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      activityLogItem0.getLogType();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      UUID uUID0 = MockUUID.randomUUID();
      activityLogItem0.setUuid(uUID0);
      UUID uUID1 = activityLogItem0.getUuid();
      assertSame(uUID1, uUID0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      String string0 = activityLogItem0.getData();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      String string0 = activityLogItem0.getAdditionalData();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      Long long0 = new Long((-223));
      activityLogItem0.setCustomerId(long0);
      assertNull(activityLogItem0.getSourceType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.UNKNOWN;
      activityLogItem0.setHierarchyLevel(hierarchyLevel0);
      assertNull(activityLogItem0.getLogType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      String string0 = activityLogItem0.getMessageKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      UUID uUID0 = activityLogItem0.getUuid();
      assertNull(uUID0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      Date date0 = activityLogItem0.getTimestamp();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      MockDate mockDate0 = new MockDate();
      activityLogItem0.setTimestamp(mockDate0);
      assertNull(activityLogItem0.getSourceId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      activityLogItem0.setSourceType("");
      String string0 = activityLogItem0.getSourceType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      activityLogItem0.setHierarchyLevel("dhyEY}eo7zc+6FBNs0Y");
      assertNull(activityLogItem0.getAdditionalData());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      activityLogItem0.setLogType(activityLogItemType0);
      assertEquals(ActivityLogItemType.INFO, activityLogItem0.getLogType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      Long long0 = new Long(0L);
      activityLogItem0.setObjectId(long0);
      assertNull(activityLogItem0.getMessageKey());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      Long long0 = new Long(0L);
      activityLogItem0.setProviderId(long0);
      assertNull(activityLogItem0.getAdditionalData());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      activityLogItem0.setArgs(list0);
      assertNull(activityLogItem0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      String string0 = activityLogItem0.getObjectType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      Long long0 = activityLogItem0.getCustomerId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      Long long0 = activityLogItem0.getSourceId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate(162, 162, (-1), (-1), 162, (-1));
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.PROVIDER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("0", long0, (Long) null, mockDate0, activityLogItemType0, hierarchyLevel0, long0, "0", (Long) null, "", "", "", list0);
      List<String> list1 = activityLogItem0.getArgs();
      assertEquals("", activityLogItem0.getAdditionalData());
      assertEquals("", activityLogItem0.getData());
      assertEquals("", activityLogItem0.getObjectType());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      activityLogItem0.setAdditionalData("");
      String string0 = activityLogItem0.getAdditionalData();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Long long0 = new Long((-1L));
      MockDate mockDate0 = new MockDate((-4545L));
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.WARNING;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ActivityLogItem activityLogItem0 = new ActivityLogItem((String) null, long0, long0, mockDate0, activityLogItemType0, (HierarchyLevel) null, (Long) null, "", long0, (String) null, "BUx+XWSG", "9$ij{J(", linkedList0);
      String string0 = activityLogItem0.getAdditionalData();
      assertEquals("9$ij{J(", string0);
      assertNotNull(string0);
      assertEquals("BUx+XWSG", activityLogItem0.getData());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate(999, 999, (-1045), 999, 0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.UNKNOWN;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Di<o;3:n6J??L(_R~i");
      ActivityLogItem activityLogItem0 = new ActivityLogItem("Di<o;3:n6J??L(_R~i", long0, long0, mockDate0, activityLogItemType0, hierarchyLevel0, long0, "Di<o;3:n6J??L(_R~i", long0, "", "", (String) null, linkedList0);
      List<String> list0 = activityLogItem0.getArgs();
      assertNotNull(list0);
      assertEquals("", activityLogItem0.getObjectType());
      assertEquals("", activityLogItem0.getData());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Long long0 = new Long((-1828L));
      MockDate mockDate0 = new MockDate(0, 0, 0, 2979, (-1129), (-1381));
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.WARNING;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.UNKNOWN;
      ActivityLogItem activityLogItem0 = new ActivityLogItem("/lD]][u", long0, (Long) null, mockDate0, activityLogItemType0, hierarchyLevel0, long0, "/lD]][u", (Long) null, "/lD]][u", "/lD]][u", "/lD]][u", (List<String>) null);
      Long long1 = activityLogItem0.getCustomerId();
      assertEquals((-1828L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Long long0 = new Long((-1828L));
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      Long long1 = new Long(1223L);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.WARNING;
      ActivityLogItem activityLogItem0 = new ActivityLogItem("", long1, long0, date0, activityLogItemType0, hierarchyLevel0, long1, "Bj@%Ap<bI`'", long0, (String) null, (String) null, (String) null, (List<String>) null);
      Long long2 = activityLogItem0.getCustomerId();
      assertEquals((-1828L), (long)activityLogItem0.getProviderId());
      assertEquals(1223L, (long)activityLogItem0.getSourceId());
      assertNotNull(long2);
      assertEquals("Bj@%Ap<bI`'", activityLogItem0.getSourceType());
      assertEquals(1223L, (long)long2);
      assertEquals((-1828L), (long)activityLogItem0.getObjectId());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate(162, 162, (-1), (-1), 162, (-1));
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.PROVIDER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("0", long0, (Long) null, mockDate0, activityLogItemType0, hierarchyLevel0, long0, "0", (Long) null, "", "", "", list0);
      String string0 = activityLogItem0.getData();
      assertEquals("", activityLogItem0.getAdditionalData());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", activityLogItem0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Long long0 = new Long(0L);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      ActivityLogItem activityLogItem0 = new ActivityLogItem("<Ny/K", long0, long0, date0, activityLogItemType0, hierarchyLevel0, long0, "", long0, "<Ny/K", "<Ny/K", (String) null, (List<String>) null);
      String string0 = activityLogItem0.getData();
      assertNotNull(string0);
      assertEquals("<Ny/K", string0);
      assertEquals("", activityLogItem0.getSourceType());
      assertEquals("<Ny/K", activityLogItem0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate(162, 162, (-1), (-1), 162, (-1));
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.PROVIDER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("0", long0, (Long) null, mockDate0, activityLogItemType0, hierarchyLevel0, long0, "0", (Long) null, "", "", "", list0);
      activityLogItem0.getHierarchyLevel();
      assertEquals("", activityLogItem0.getObjectType());
      assertEquals("", activityLogItem0.getData());
      assertEquals("", activityLogItem0.getAdditionalData());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Long long0 = new Long(0L);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.WARNING;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.CUSTOMER;
      ActivityLogItem activityLogItem0 = new ActivityLogItem("", long0, long0, (Date) null, activityLogItemType0, hierarchyLevel0, long0, "", long0, "", "", (String) null, (List<String>) null);
      ActivityLogItemType activityLogItemType1 = activityLogItem0.getLogType();
      assertSame(activityLogItemType1, activityLogItemType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Long long0 = new Long(0L);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("", long0, long0, date0, activityLogItemType0, hierarchyLevel0, long0, (String) null, long0, "H", "<Ny/K", "", list0);
      String string0 = activityLogItem0.getMessageKey();
      assertEquals("H", activityLogItem0.getObjectType());
      assertEquals("<Ny/K", activityLogItem0.getData());
      assertEquals("", activityLogItem0.getAdditionalData());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate(459, (-2658), (-2658));
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.WARNING;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.UNKNOWN;
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      List<String> list0 = activityLogItem0.getArgs();
      ActivityLogItem activityLogItem1 = new ActivityLogItem("m1DSl5", long0, long0, mockDate0, activityLogItemType0, hierarchyLevel0, long0, "|UMK3-$DsVuxP", long0, "", "tHDCZbDh4>@DliY 4", "org.apache.tomcat.loader.SimpleFileFilter", list0);
      String string0 = activityLogItem1.getMessageKey();
      assertEquals("m1DSl5", string0);
      assertEquals("", activityLogItem1.getObjectType());
      assertEquals("|UMK3-$DsVuxP", activityLogItem1.getSourceType());
      assertEquals("org.apache.tomcat.loader.SimpleFileFilter", activityLogItem1.getAdditionalData());
      assertEquals("tHDCZbDh4>@DliY 4", activityLogItem1.getData());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long((-243L));
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("E[e_R7f=C", long1, long0, date0, activityLogItemType0, hierarchyLevel0, long1, "UH/.}fmh+2GY", long1, (String) null, "UH/.}fmh+2GY", "E[e_R7f=C", list0);
      Long long2 = activityLogItem0.getObjectId();
      assertEquals((-243L), (long)long2);
      assertEquals((-243L), (long)activityLogItem0.getSourceId());
      assertNotNull(long2);
      assertEquals("E[e_R7f=C", activityLogItem0.getAdditionalData());
      assertEquals(0L, (long)activityLogItem0.getProviderId());
      assertEquals("UH/.}fmh+2GY", activityLogItem0.getSourceType());
      assertEquals("UH/.}fmh+2GY", activityLogItem0.getData());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Long long0 = new Long(2108L);
      MockDate mockDate0 = new MockDate(0, 0, 0, 632, 0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ActivityLogItem activityLogItem0 = new ActivityLogItem("org.hsqldb.lib.FileUtil", long0, long0, mockDate0, activityLogItemType0, hierarchyLevel0, long0, "org.hsqldb.lib.FileUtil", long0, "org.hsqldb.lib.FileUtil", "io.netty.handler.ssl.Java9SslEngine$AlpnSelector", "org.apache.oro.io.GlobFilenameFilter", linkedList0);
      Long long1 = activityLogItem0.getObjectId();
      assertEquals("io.netty.handler.ssl.Java9SslEngine$AlpnSelector", activityLogItem0.getData());
      assertNotNull(long1);
      assertEquals("org.apache.oro.io.GlobFilenameFilter", activityLogItem0.getAdditionalData());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Long long0 = new Long(0L);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("", long0, long0, date0, activityLogItemType0, hierarchyLevel0, long0, (String) null, long0, "H", "<Ny/K", "", list0);
      assertEquals("H", activityLogItem0.getObjectType());
      
      activityLogItem0.setObjectType("");
      String string0 = activityLogItem0.getObjectType();
      assertNotNull(string0);
      assertEquals("", activityLogItem0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Long long0 = new Long(0L);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("E[e_R7f=C", long0, long0, date0, activityLogItemType0, hierarchyLevel0, long0, "UH/.}fmh+2GY", long0, (String) null, "UH/.}fmh+2GY", "E[e_R7f=C", list0);
      activityLogItem0.setObjectType("UH/.}fmh+2GY");
      String string0 = activityLogItem0.getObjectType();
      assertEquals("UH/.}fmh+2GY", activityLogItem0.getData());
      assertEquals("UH/.}fmh+2GY", activityLogItem0.getObjectType());
      assertEquals("UH/.}fmh+2GY", activityLogItem0.getSourceType());
      assertEquals("E[e_R7f=C", activityLogItem0.getAdditionalData());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long((-243L));
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      ActivityLogItem activityLogItem0 = new ActivityLogItem("<Ny/K", long0, long1, date0, activityLogItemType0, hierarchyLevel0, long1, "", long0, "<Ny/K", "<Ny/K", (String) null, (List<String>) null);
      Long long2 = activityLogItem0.getProviderId();
      assertEquals("<Ny/K", activityLogItem0.getData());
      assertEquals("", activityLogItem0.getSourceType());
      assertEquals("<Ny/K", activityLogItem0.getObjectType());
      assertEquals(0L, (long)activityLogItem0.getObjectId());
      assertEquals((-243L), (long)long2);
      assertEquals((-243L), (long)activityLogItem0.getSourceId());
      assertNotNull(long2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      Long long0 = activityLogItem0.getProviderId();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Long long0 = new Long((-8L));
      Long long1 = new Long(1L);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      ActivityLogItem activityLogItem0 = new ActivityLogItem("<Ny/K", long0, long1, date0, activityLogItemType0, hierarchyLevel0, long1, "", long0, "<Ny/K", "<Ny/K", (String) null, (List<String>) null);
      Long long2 = activityLogItem0.getProviderId();
      assertEquals(1L, (long)long2);
      assertEquals("<Ny/K", activityLogItem0.getData());
      assertEquals((-8L), (long)activityLogItem0.getObjectId());
      assertEquals(1L, (long)activityLogItem0.getSourceId());
      assertNotNull(long2);
      assertEquals("", activityLogItem0.getSourceType());
      assertEquals("<Ny/K", activityLogItem0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long((-243L));
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("E[e_R7f=C", long1, long0, date0, activityLogItemType0, hierarchyLevel0, long1, "UH/.}fmh+2GY", long1, (String) null, "UH/.}fmh+2GY", "E[e_R7f=C", list0);
      Long long2 = activityLogItem0.getSourceId();
      assertNotNull(long2);
      assertEquals("UH/.}fmh+2GY", activityLogItem0.getData());
      assertEquals(0L, (long)activityLogItem0.getProviderId());
      assertEquals("UH/.}fmh+2GY", activityLogItem0.getSourceType());
      assertEquals("E[e_R7f=C", activityLogItem0.getAdditionalData());
      assertEquals((-243L), (long)activityLogItem0.getObjectId());
      assertEquals((-243L), (long)long2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      Long long0 = new Long(1300L);
      activityLogItem0.setSourceId(long0);
      Long long1 = activityLogItem0.getSourceId();
      assertEquals(1300L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Long long0 = new Long(0L);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.WARNING;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.CUSTOMER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("", long0, long0, (Date) null, activityLogItemType0, hierarchyLevel0, long0, "owner", long0, "Z", "", "", list0);
      Long long1 = activityLogItem0.getSourceId();
      assertEquals("owner", activityLogItem0.getSourceType());
      assertNotNull(long1);
      assertEquals("", activityLogItem0.getData());
      assertEquals("Z", activityLogItem0.getObjectType());
      assertEquals("", activityLogItem0.getAdditionalData());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate(162, 162, (-1), (-1), 162, (-1));
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.PROVIDER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("0", long0, (Long) null, mockDate0, activityLogItemType0, hierarchyLevel0, long0, "0", (Long) null, "", "", "", list0);
      String string0 = activityLogItem0.getSourceType();
      assertEquals("", activityLogItem0.getData());
      assertEquals("", activityLogItem0.getObjectType());
      assertNotNull(string0);
      assertEquals("0", string0);
      assertEquals("", activityLogItem0.getAdditionalData());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Long long0 = new Long(0L);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      ActivityLogItem activityLogItem0 = new ActivityLogItem("<Ny/K", long0, long0, date0, activityLogItemType0, hierarchyLevel0, long0, "", long0, "<Ny/K", "<Ny/K", (String) null, (List<String>) null);
      Date date1 = activityLogItem0.getTimestamp();
      assertEquals("<Ny/K", activityLogItem0.getData());
      assertNotNull(date1);
      assertEquals("", activityLogItem0.getSourceType());
      assertEquals("<Ny/K", activityLogItem0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Random.setNextRandom((-223));
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      UUID uUID0 = MockUUID.randomUUID();
      activityLogItem0.setUuid(uUID0);
      UUID uUID1 = activityLogItem0.getUuid();
      assertEquals("df000000-e000-4000-a100-0000e2000000", uUID1.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate(162, 162, (-1), (-1), 162, (-1));
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.PROVIDER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("0", long0, (Long) null, mockDate0, activityLogItemType0, hierarchyLevel0, long0, "0", (Long) null, "", "", "", list0);
      activityLogItem0.setMessageKey((String) null);
      assertEquals("", activityLogItem0.getObjectType());
      assertEquals("", activityLogItem0.getData());
      assertEquals("", activityLogItem0.getAdditionalData());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate(0, 0, 0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.WARNING;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.PROVIDER;
      Long long1 = new Long(0L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ActivityLogItem activityLogItem0 = new ActivityLogItem("`O&uNu@X3[}zXT9*", long0, long0, mockDate0, activityLogItemType0, hierarchyLevel0, long1, "Py+1cL<u\"", long0, "Py+1cL<u\"", "", "`O&uNu@X3[}zXT9*", linkedList0);
      Long long2 = activityLogItem0.getCustomerId();
      assertEquals("Py+1cL<u\"", activityLogItem0.getObjectType());
      assertEquals("", activityLogItem0.getData());
      assertNotNull(long2);
      assertEquals("Py+1cL<u\"", activityLogItem0.getSourceType());
      assertEquals("`O&uNu@X3[}zXT9*", activityLogItem0.getAdditionalData());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      activityLogItem0.setLogType("");
      assertEquals(ActivityLogItemType.INFO, activityLogItem0.getLogType());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ActivityLogItem activityLogItem0 = new ActivityLogItem();
      Long long0 = new Long(1300L);
      activityLogItem0.setSourceId(long0);
      Long long1 = activityLogItem0.getObjectId();
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long((-243L));
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      ActivityLogItemType activityLogItemType0 = ActivityLogItemType.INFO;
      HierarchyLevel hierarchyLevel0 = HierarchyLevel.OWNER;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      ActivityLogItem activityLogItem0 = new ActivityLogItem("", long1, long0, date0, activityLogItemType0, hierarchyLevel0, long1, (String) null, long0, "H", "<Ny/K", "", list0);
      Long long2 = activityLogItem0.getObjectId();
      assertEquals("", activityLogItem0.getAdditionalData());
      assertEquals(0L, (long)activityLogItem0.getProviderId());
      assertEquals("H", activityLogItem0.getObjectType());
      assertEquals("<Ny/K", activityLogItem0.getData());
      assertNotNull(long2);
      assertEquals((-243L), (long)activityLogItem0.getSourceId());
      assertEquals(0L, (long)long2);
  }
}
