/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 25 10:05:31 GMT 2019
 */

package no.tellu.findit.util;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.gson.JsonObject;
import java.util.LinkedHashSet;
import no.tellu.findit.domain.AssetGroupImpl;
import no.tellu.findit.domain.AssetImpl;
import no.tellu.findit.domain.AssetPropertyImpl;
import no.tellu.findit.domain.AssetTypeImpl;
import no.tellu.findit.domain.AssetTypeProperty;
import no.tellu.findit.domain.AssetTypePropertyImpl;
import no.tellu.findit.domain.CustomerImpl;
import no.tellu.findit.domain.FinditUserImpl;
import no.tellu.findit.domain.IndoorLocationImpl;
import no.tellu.findit.domain.LocationImpl;
import no.tellu.findit.domain.PositionImpl;
import no.tellu.findit.domain.RuleImpl;
import no.tellu.findit.domain.SensorDeviceImpl;
import no.tellu.findit.domain.TagImpl;
import no.tellu.findit.util.ConvertToJson;
import no.tellu.findit.util.ObservationDataValue;
import no.tellu.findit.util.TinyDomainObject;
import no.tellu.security.jpa.BaseUser;
import org.evosuite.runtime.mock.java.util.MockDate;

public class ConvertToJson_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConvertToJson convertToJson0 = new ConvertToJson();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonObject jsonObject0 = ConvertToJson.convertToJson((Object) null, (String) null);
      assertNull(jsonObject0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = new Long(3L);
      AssetImpl assetImpl0 = new AssetImpl(long0);
      try { 
        ConvertToJson.convertToJson(assetImpl0, "*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Failed to find labels
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Long long0 = new Long(5L);
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, long0, "extended", "extended");
      JsonObject jsonObject0 = ConvertToJson.convertToJson(tinyDomainObject0, "extended");
      assertFalse(jsonObject0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<AssetImpl> class0 = AssetImpl.class;
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, (Long) null, (String) null, (String) null);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(tinyDomainObject0, ". Expected: ");
      assertTrue(jsonObject0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AssetPropertyImpl assetPropertyImpl0 = new AssetPropertyImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(assetPropertyImpl0, "m:o@f@3xwCK^YcJ");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AssetGroupImpl assetGroupImpl0 = new AssetGroupImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(assetGroupImpl0, "extended");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AssetGroupImpl assetGroupImpl0 = new AssetGroupImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(assetGroupImpl0, "&");
      assertFalse(jsonObject0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AssetGroupImpl assetGroupImpl0 = new AssetGroupImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(assetGroupImpl0, ",");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      CustomerImpl customerImpl0 = new CustomerImpl((Long) null, "t2LkslTVb", mockDate0, mockDate0);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(customerImpl0, "Expected null but was ");
      assertFalse(jsonObject0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AssetImpl assetImpl0 = new AssetImpl();
      // Undeclared exception!
      try { 
        ConvertToJson.convertToJson(assetImpl0, "extended");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AssetImpl assetImpl0 = new AssetImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(assetImpl0, "properties");
      assertTrue(jsonObject0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AssetImpl assetImpl0 = new AssetImpl();
      AssetTypeImpl assetTypeImpl0 = new AssetTypeImpl();
      LinkedHashSet<AssetTypeProperty> linkedHashSet0 = new LinkedHashSet<AssetTypeProperty>();
      AssetTypePropertyImpl assetTypePropertyImpl0 = new AssetTypePropertyImpl();
      linkedHashSet0.add(assetTypePropertyImpl0);
      assetTypeImpl0.setTypeProperties(linkedHashSet0);
      assetImpl0.setType(assetTypeImpl0);
      // Undeclared exception!
      try { 
        ConvertToJson.convertToJson(assetImpl0, "@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PositionImpl positionImpl0 = new PositionImpl((-1L), false);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(positionImpl0, "@");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PositionImpl positionImpl0 = new PositionImpl();
      IndoorLocationImpl indoorLocationImpl0 = new IndoorLocationImpl();
      positionImpl0.setIndoorLocation(indoorLocationImpl0);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(positionImpl0, "@");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PositionImpl positionImpl0 = new PositionImpl();
      SensorDeviceImpl sensorDeviceImpl0 = new SensorDeviceImpl();
      positionImpl0.setSensorDevice(sensorDeviceImpl0);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(positionImpl0, "@");
      assertFalse(jsonObject0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PositionImpl positionImpl0 = new PositionImpl();
      SensorDeviceImpl sensorDeviceImpl0 = new SensorDeviceImpl();
      positionImpl0.setSensorDevice(sensorDeviceImpl0);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(positionImpl0, "device");
      assertFalse(jsonObject0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PositionImpl positionImpl0 = new PositionImpl();
      SensorDeviceImpl sensorDeviceImpl0 = new SensorDeviceImpl();
      positionImpl0.setSensorDevice(sensorDeviceImpl0);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(positionImpl0, (String) null);
      assertFalse(jsonObject0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PositionImpl positionImpl0 = new PositionImpl();
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[3];
      positionImpl0.setSource("no.tellu.findit.cmd.CountBillingLogCmd", long0, "W`YcZf", "no.tellu.findit.cmd.CountBillingLogCmd", stringArray0);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(positionImpl0, "&");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PositionImpl positionImpl0 = new PositionImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(positionImpl0, "address");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PositionImpl positionImpl0 = new PositionImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(positionImpl0, "observation");
      assertFalse(jsonObject0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PositionImpl positionImpl0 = new PositionImpl();
      MockDate mockDate0 = new MockDate();
      positionImpl0.setReceptionTimeStamp(mockDate0);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(positionImpl0, "@");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PositionImpl positionImpl0 = new PositionImpl();
      MockDate mockDate0 = new MockDate();
      positionImpl0.setTimeStamp(mockDate0);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(positionImpl0, "@");
      assertTrue(jsonObject0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocationImpl locationImpl0 = new LocationImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(locationImpl0, (String) null);
      assertFalse(jsonObject0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AssetTypeImpl assetTypeImpl0 = new AssetTypeImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(assetTypeImpl0, "0");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SensorDeviceImpl sensorDeviceImpl0 = new SensorDeviceImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(sensorDeviceImpl0, ",");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TagImpl tagImpl0 = new TagImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(tagImpl0, "circumference");
      assertFalse(jsonObject0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FinditUserImpl finditUserImpl0 = new FinditUserImpl();
      // Undeclared exception!
      try { 
        ConvertToJson.convertToJson(finditUserImpl0, "@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RuleImpl ruleImpl0 = new RuleImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(ruleImpl0, ",");
      assertFalse(jsonObject0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IndoorLocationImpl indoorLocationImpl0 = new IndoorLocationImpl();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(indoorLocationImpl0, "&E@@Jmvh'WUN1e$");
      assertTrue(jsonObject0.isJsonObject());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObservationDataValue observationDataValue0 = new ObservationDataValue();
      JsonObject jsonObject0 = ConvertToJson.convertToJson(observationDataValue0, ",");
      assertFalse(jsonObject0.isJsonPrimitive());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObservationDataValue observationDataValue0 = new ObservationDataValue();
      observationDataValue0.setTextValue(",");
      JsonObject jsonObject0 = ConvertToJson.convertToJson(observationDataValue0, ",");
      assertFalse(jsonObject0.isJsonNull());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FinditUserImpl finditUserImpl0 = new FinditUserImpl();
      BaseUser baseUser0 = new BaseUser();
      finditUserImpl0.setBaseUser(baseUser0);
      JsonObject jsonObject0 = ConvertToJson.convertToJson(finditUserImpl0, "@");
      assertFalse(jsonObject0.isJsonArray());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ConvertToJson.convertToJson(object0, "-,bMV]4%P;l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // UNKNOWN OBJECT TO SERIALIZE TO JSON: class java.lang.Object
         //
      }
  }
}
