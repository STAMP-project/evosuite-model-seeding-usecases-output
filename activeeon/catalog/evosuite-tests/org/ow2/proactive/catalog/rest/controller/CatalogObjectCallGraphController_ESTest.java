/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 13:09:09 GMT 2019
 */

package org.ow2.proactive.catalog.rest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.ow2.proactive.catalog.repository.BucketRepository;
import org.ow2.proactive.catalog.rest.controller.CatalogObjectCallGraphController;
import org.ow2.proactive.catalog.service.BucketService;
import org.ow2.proactive.catalog.service.OwnerGroupStringHelper;
import org.ow2.proactive.catalog.util.name.validator.BucketNameValidator;

public class CatalogObjectCallGraphController_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CatalogObjectCallGraphController catalogObjectCallGraphController0 = new CatalogObjectCallGraphController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = mock(BucketNameValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(bucketRepository0).findByOwnerIn(anyList());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = mock(OwnerGroupStringHelper.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Injector.inject(catalogObjectCallGraphController0, (Class<?>) CatalogObjectCallGraphController.class, "bucketService", (Object) bucketService0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Optional<String> optional0 = Optional.empty();
      // Undeclared exception!
      try { 
        catalogObjectCallGraphController0.getCallGraph(httpServletResponseWrapper0, "P=D>*sqg*[}^yjEY.C", "P=D>*sqg*[}^yjEY.C", optional0, optional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CatalogObjectCallGraphController catalogObjectCallGraphController0 = new CatalogObjectCallGraphController();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      Optional<String> optional0 = Optional.ofNullable((String) null);
      Optional<List<String>> optional1 = Optional.empty();
      // Undeclared exception!
      try { 
        catalogObjectCallGraphController0.getCallGraphForSelectedObjects(httpServletResponseWrapper0, "UTF-k", "setNOlb(int, Reader)", "setNOlb(int, Reader)", optional0, optional0, optional1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CatalogObjectCallGraphController catalogObjectCallGraphController0 = new CatalogObjectCallGraphController();
      Optional<String> optional0 = Optional.empty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Optional<List<String>> optional1 = Optional.of((List<String>) linkedList0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      // Undeclared exception!
      try { 
        catalogObjectCallGraphController0.getCallGraphForSelectedObjects(httpServletResponseWrapper0, (String) null, "0.", (String) null, optional0, optional0, optional1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
