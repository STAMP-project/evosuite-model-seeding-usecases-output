/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 13:40:33 GMT 2019
 */

package org.ow2.proactive.catalog.callgraph;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Set;
import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.graph.DefaultEdge;
import org.ow2.proactive.catalog.callgraph.CallGraphHolder;
import org.ow2.proactive.catalog.callgraph.GraphNode;

public class CallGraphHolder_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      // Undeclared exception!
      try { 
        callGraphHolder0.removeNode((String) null, (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bucketName
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      String string0 = callGraphHolder0.toString();
      assertEquals("Dependency Graph=([], [])", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      Set<GraphNode> set0 = callGraphHolder0.nodeSet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      Set<DefaultEdge> set0 = callGraphHolder0.dependencySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      int int0 = callGraphHolder0.order();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      // Undeclared exception!
      try { 
        callGraphHolder0.addDependsOnEdge((GraphNode) null, (GraphNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      DefaultDirectedGraph<GraphNode, DefaultEdge> defaultDirectedGraph0 = callGraphHolder0.getDependencyGraph();
      assertNotNull(defaultDirectedGraph0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      DefaultEdge defaultEdge0 = callGraphHolder0.removeDependsOnEdge((GraphNode) null, (GraphNode) null);
      assertNull(defaultEdge0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      int int0 = callGraphHolder0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      GraphNode graphNode0 = new GraphNode("~6z^.K\"{#nb$e+", "~6z^.K\"{#nb$e+", "~6z^.K\"{#nb$e+", true);
      // Undeclared exception!
      try { 
        callGraphHolder0.addDependsOnEdge(graphNode0, graphNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no such vertex in graph: org.ow2.proactive.catalog.callgraph.GraphNode@0000000009
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      // Undeclared exception!
      try { 
        callGraphHolder0.addNode((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // bucketName
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      GraphNode graphNode0 = callGraphHolder0.addNode("C.=>1xwZru:G8aBN.@W", "TO=w", "", false);
      callGraphHolder0.addDependsOnEdge(graphNode0, graphNode0);
      callGraphHolder0.addDependsOnEdge(graphNode0, graphNode0);
      assertFalse(graphNode0.isInCatalog());
      assertEquals("TO=w", graphNode0.getObjectName());
      assertEquals("", graphNode0.getObjectKind());
      assertEquals("C.=>1xwZru:G8aBN.@W", graphNode0.getBucketName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      callGraphHolder0.addNode("C.=>1xwZru:G8aBN.@W", "TO=w", "", false);
      int int0 = callGraphHolder0.order();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      GraphNode graphNode0 = new GraphNode("", "", "", true);
      GraphNode graphNode1 = callGraphHolder0.addNode("", "", "", true);
      callGraphHolder0.addDependsOnEdge(graphNode1, graphNode1);
      callGraphHolder0.removeDependsOnEdge(graphNode0, graphNode1);
      assertTrue(graphNode1.isInCatalog());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      boolean boolean0 = callGraphHolder0.removeNode("C.=>1xwZru:G8aBN.@W", "flzwB$$-f1%A@Qn1/`", "TO=w", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      callGraphHolder0.addNode("", "", "", true);
      boolean boolean0 = callGraphHolder0.removeNode("", "", "", false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      GraphNode graphNode0 = callGraphHolder0.addNode("?tDZ&+qh1Hv4$G&", "8+zYOq`ks@O", "?tDZ&+qh1Hv4$G&", true);
      callGraphHolder0.addDependsOnEdge(graphNode0, graphNode0);
      int int0 = callGraphHolder0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CallGraphHolder callGraphHolder0 = new CallGraphHolder();
      GraphNode graphNode0 = callGraphHolder0.addNode("U;F", "uz", "uz", true);
      GraphNode graphNode1 = callGraphHolder0.addNode("SL\",~", "'5VMK", "Dependency Graph=([org.ow2.proactive.catalog.callgraph.GraphNode@279be6], [(org.ow2.proactive.catalog.callgraph.GraphNode@279be6,org.ow2.proactive.catalog.callgraph.GraphNode@279be6)])", true);
      callGraphHolder0.addDependsOnEdge(graphNode0, graphNode1);
      assertEquals("'5VMK", graphNode1.getObjectName());
      assertTrue(graphNode1.isInCatalog());
      assertEquals("uz", graphNode0.getObjectKind());
      assertEquals("U;F", graphNode0.getBucketName());
  }
}
