/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 13:04:09 GMT 2019
 */

package org.ow2.proactive.catalog.rest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.ArrayList;
import java.util.Optional;
import javax.servlet.http.HttpServletResponse;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.ow2.proactive.catalog.repository.BucketRepository;
import org.ow2.proactive.catalog.repository.entity.BucketEntity;
import org.ow2.proactive.catalog.rest.controller.CatalogObjectReportController;
import org.ow2.proactive.catalog.service.BucketService;
import org.ow2.proactive.catalog.service.OwnerGroupStringHelper;
import org.ow2.proactive.catalog.util.name.validator.BucketNameValidator;

public class CatalogObjectReportController_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CatalogObjectReportController catalogObjectReportController0 = new CatalogObjectReportController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      ArrayList<BucketEntity> arrayList0 = new ArrayList<BucketEntity>();
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(bucketRepository0).findByOwnerIsInContainingKindAndContentType(anyList() , anyString() , anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Optional<String> optional0 = Optional.ofNullable("GROUP:public-objects");
      Injector.inject(catalogObjectReportController0, (Class<?>) CatalogObjectReportController.class, "bucketService", (Object) bucketService0);
      // Undeclared exception!
      try { 
        catalogObjectReportController0.getReport((HttpServletResponse) null, "GROUP:", "GROUP:public-objects", optional0, optional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
