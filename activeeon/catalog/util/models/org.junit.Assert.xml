<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="s4" action="org.junit.Assert.assertEquals(java.lang.Object,java.lang.Object)" proba="0.5"/><transition target="sX" action="epsilon" proba="0.5"/></state><state id="s4"><transition target="s4" action="org.junit.Assert.assertEquals(java.lang.Object,java.lang.Object)" proba="0.4"/><transition target="s7" action="org.junit.Assert.fail()" proba="0.2"/><transition target="sX" action="epsilon" proba="0.4"/></state><state id="s5"><transition target="s3" action="org.junit.Assert.assertEquals(long,long)" proba="1.0"/></state><state id="s6"><transition target="s6" action="org.junit.Assert.assertThat(java.lang.Object,org.hamcrest.Matcher)" proba="0.5"/><transition target="sX" action="epsilon" proba="0.5"/></state><state id="s7"><transition target="s4" action="org.junit.Assert.assertEquals(java.lang.Object,java.lang.Object)" proba="0.5"/><transition target="sX" action="epsilon" proba="0.5"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s5" action="org.junit.Assert.assertTrue(boolean)" proba="0.2222222222222222"/><transition target="s6" action="org.junit.Assert.assertThat(java.lang.Object,org.hamcrest.Matcher)" proba="0.2222222222222222"/><transition target="s7" action="org.junit.Assert.fail()" proba="0.1111111111111111"/><transition target="s1" action="org.junit.Assert.assertFalse(boolean)" proba="0.2222222222222222"/><transition target="s2" action="org.junit.Assert.assertNull(java.lang.Object)" proba="0.2222222222222222"/></state><state id="s1"><transition target="sX" action="epsilon" proba="0.6666666666666666"/><transition target="s1" action="org.junit.Assert.assertFalse(boolean)" proba="0.3333333333333333"/></state><state id="s2"><transition target="s3" action="org.junit.Assert.assertEquals(long,long)" proba="1.0"/></state></states></ts>