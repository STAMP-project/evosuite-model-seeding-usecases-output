/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 14:31:31 GMT 2019
 */

package org.ow2.proactive.catalog.util.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.ow2.proactive.catalog.repository.entity.KeyValueLabelMetadataEntity;
import org.ow2.proactive.catalog.util.parser.NodeSourceParser;
import org.ow2.proactive.catalog.util.parser.PCWRuleParser;
import org.ow2.proactive.catalog.util.parser.WorkflowParser;

public class AbstractCatalogObjectParser_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NodeSourceParser nodeSourceParser0 = new NodeSourceParser();
      // Undeclared exception!
      try { 
        nodeSourceParser0.isMyKind((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PCWRuleParser pCWRuleParser0 = new PCWRuleParser();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      List<KeyValueLabelMetadataEntity> list0 = pCWRuleParser0.parse(mockFileInputStream0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      WorkflowParser workflowParser0 = new WorkflowParser();
      ArrayList<KeyValueLabelMetadataEntity> arrayList0 = new ArrayList<KeyValueLabelMetadataEntity>();
      KeyValueLabelMetadataEntity keyValueLabelMetadataEntity0 = new KeyValueLabelMetadataEntity();
      arrayList0.add(keyValueLabelMetadataEntity0);
      // Undeclared exception!
      try { 
        workflowParser0.getIconPath(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      WorkflowParser workflowParser0 = new WorkflowParser();
      // Undeclared exception!
      try { 
        workflowParser0.parse((InputStream) null);
        fail("Expecting exception: VerifyError");
      
      } catch(VerifyError e) {
         //
         // Bad type on operand stack
         // Exception Details:
         //   Location:
         //     org/ow2/proactive/scheduler/common/job/factories/ValidationUtil.validate(Ljava/io/InputStream;Ljava/io/InputStream;)V @25: invokevirtual
         //   Reason:
         //     Type 'com/sun/msv/verifier/jarv/TheFactoryImpl' (current frame, stack[0]) is not assignable to 'org/iso_relax/verifier/VerifierFactory'
         //   Current Frame:
         //     bci: @25
         //     flags: { }
         //     locals: { 'java/io/InputStream', 'java/io/InputStream', 'org/xml/sax/XMLReader', 'com/sun/msv/verifier/jarv/TheFactoryImpl' }
         //     stack: { 'com/sun/msv/verifier/jarv/TheFactoryImpl', 'java/io/InputStream' }
         //   Bytecode:
         //     0x0000000: b800 2812 2ab8 0030 4db8 0028 bb00 3259
         //     0x0000010: b700 334e b800 282d 2bb6 0039 3a04 b800
         //     0x0000020: 2819 04b9 003f 0100 3a05 b800 2819 05b9
         //     0x0000030: 0045 0100 3a06 b800 28bb 0009 5919 06b7
         //     0x0000040: 0048 3a07 b800 282c 1907 b900 4d02 00b8
         //     0x0000050: 0028 bb00 0c59 1907 b700 503a 08b8 0028
         //     0x0000060: 1905 1908 b900 5402 00b8 0028 2cbb 0056
         //     0x0000070: 592a b700 59b9 005d 0200 b800 28b8 0063
         //     0x0000080: 1264 b600 68a7 0087 b800 284d b800 282c
         //     0x0000090: b600 6c4e b800 282d b800 6312 6db6 0068
         //     0x00000a0: c600 222d c100 21b8 0063 126e b600 6899
         //     0x00000b0: 0013 b800 282d c000 2159 126f 1270 b800
         //     0x00000c0: 74bf b800 282c 5912 6f12 70b8 0074 bfb8
         //     0x00000d0: 0028 4db8 0028 bb00 7659 2cb8 007c b800
         //     0x00000e0: 6312 7db6 0068 9900 1a3a 0958 bb00 7f59
         //     0x00000f0: 1909 b700 82b8 0063 1283 b600 68a7 0006
         //     0x0000100: b700 8459 126f 1270 b800 74bf b800 28b1
         //     0x0000110:                                        
         //   Exception Handler Table:
         //     bci [0, 122] => handler: 136
         //     bci [0, 122] => handler: 207
         //   Stackmap Table:
         //     same_locals_1_stack_item_extended(@136,Object[#29])
         //     append_frame(@194,Object[#29],Object[#157])
         //     full_frame(@207,{Object[#159],Object[#159]},{Object[#35]})
         //     full_frame(@256,{Object[#159],Object[#159],Object[#35]},{Uninitialized[#214],Uninitialized[#214],Object[#35]})
         //     same_locals_1_stack_item_frame(@259,Object[#118])
         //     full_frame(@268,{Object[#159],Object[#159],Object[#74],Object[#50],Object[#59],Object[#65],Object[#161],Object[#9],Object[#12]},{})
         //
      }
  }
}
