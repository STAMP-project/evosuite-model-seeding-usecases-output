/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 15:24:53 GMT 2019
 */

package org.ow2.proactive.catalog;

import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.classmate.TypeResolver;
import javax.servlet.ServletContext;
import org.apache.tomcat.jdbc.pool.DataSource;
import org.evosuite.runtime.javaee.injection.Injector;
import org.ow2.proactive.catalog.Application;
import org.springframework.web.multipart.MultipartResolver;
import org.springframework.web.servlet.config.annotation.ContentNegotiationConfigurer;
import springfox.documentation.spring.web.plugins.Docket;

public class Application_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Application application0 = new Application();
      TypeResolver typeResolver0 = new TypeResolver();
      Injector.inject(application0, (Class<?>) Application.class, "typeResolver", (Object) typeResolver0);
      Injector.validateBean(application0, (Class<?>) Application.class);
      Docket docket0 = application0.workflowCatalogApi();
      assertEquals("CatalogObjectEntity Catalog", docket0.getGroupName());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Application application0 = new Application();
      DataSource dataSource0 = (DataSource)application0.testDataSource();
      assertEquals("Password not available as DataSource/JMX operation.", dataSource0.getPassword());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Application.main((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Args must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Application application0 = new Application();
      ContentNegotiationConfigurer contentNegotiationConfigurer0 = new ContentNegotiationConfigurer((ServletContext) null);
      application0.configureContentNegotiation(contentNegotiationConfigurer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Application application0 = new Application();
      MultipartResolver multipartResolver0 = application0.multipartResolver();
      assertNotNull(multipartResolver0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Application application0 = new Application();
      // Undeclared exception!
      try { 
        application0.configureContentNegotiation((ContentNegotiationConfigurer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Application application0 = new Application();
      // Undeclared exception!
      try { 
        application0.defaultDataSource();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        Application.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      Application.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Application application0 = new Application();
      // Undeclared exception!
      try { 
        application0.workflowCatalogApi();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
