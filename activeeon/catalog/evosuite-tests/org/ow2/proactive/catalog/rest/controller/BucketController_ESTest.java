/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 13:02:49 GMT 2019
 */

package org.ow2.proactive.catalog.rest.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.google.common.collect.ImmutableList;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.collection.internal.PersistentSet;
import org.hibernate.collection.internal.PersistentSortedSet;
import org.ow2.proactive.catalog.dto.BucketMetadata;
import org.ow2.proactive.catalog.repository.BucketRepository;
import org.ow2.proactive.catalog.repository.entity.BucketEntity;
import org.ow2.proactive.catalog.rest.controller.BucketController;
import org.ow2.proactive.catalog.service.AuthorizationService;
import org.ow2.proactive.catalog.service.BucketService;
import org.ow2.proactive.catalog.service.OwnerGroupStringHelper;
import org.ow2.proactive.catalog.service.RestApiAccessService;
import org.ow2.proactive.catalog.service.SchedulerRestClientCreator;
import org.ow2.proactive.catalog.service.SchedulerUserAuthenticationService;
import org.ow2.proactive.catalog.util.name.validator.BucketNameValidator;

public class BucketController_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketEntity bucketEntity0 = new BucketEntity();
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0).when(bucketRepository0).findBucketForUpdate(anyString());
      doReturn(bucketEntity0).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "bucketService", (Object) bucketService0);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = mock(SchedulerUserAuthenticationService.class, new ViolatedAssumptionAnswer());
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "restApiAccessService", (Object) restApiAccessService0);
      Injector.validateBean(bucketController0, (Class<?>) BucketController.class);
      BucketMetadata bucketMetadata0 = bucketController0.delete("reconnectAtTxEnd", "GROUP:");
      assertNull(bucketMetadata0.getOwner());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      // Undeclared exception!
      try { 
        bucketController0.cleanEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      // Undeclared exception!
      try { 
        bucketController0.getMetadata("Fol", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      // Undeclared exception!
      try { 
        bucketController0.create("GROUP:public-objects", "GROUP:public-objects", "GROUP:public-objects");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = mock(BucketNameValidator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(bucketNameValidator0).isValid(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn("GROUP:public-objects").when(bucketRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = mock(OwnerGroupStringHelper.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "bucketService", (Object) bucketService0);
      OwnerGroupStringHelper ownerGroupStringHelper1 = new OwnerGroupStringHelper();
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper1);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, (SchedulerUserAuthenticationService) null);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "restApiAccessService", (Object) restApiAccessService0);
      Injector.validateBean(bucketController0, (Class<?>) BucketController.class);
      // Undeclared exception!
      try { 
        bucketController0.create("GROUP:public-objects", "GROUP:", "FmoL8P13M7O");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.ow2.proactive.catalog.repository.entity.BucketEntity
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "bucketService", (Object) bucketService0);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = mock(SchedulerUserAuthenticationService.class, new ViolatedAssumptionAnswer());
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "restApiAccessService", (Object) restApiAccessService0);
      Injector.validateBean(bucketController0, (Class<?>) BucketController.class);
      // Undeclared exception!
      try { 
        bucketController0.create("$?.^u,\"S^\u0007K_-Tx-;", "GROUP:", "GROUP:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The bucket name: 'GROUP:' is not valid, please check the specification of bucket naming
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      // Undeclared exception!
      try { 
        bucketController0.delete("5ZB|mG'KMy7iJi<Dc", "5ZB|mG'KMy7iJi<Dc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      Long long0 = Long.valueOf(0L);
      PersistentSet persistentSet0 = new PersistentSet();
      BucketEntity bucketEntity0 = new BucketEntity(long0, "GROUP:public-objects", "GROUP:public-objects", persistentSet0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0).when(bucketRepository0).findBucketForUpdate(anyString());
      doReturn(bucketEntity0).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "bucketService", (Object) bucketService0);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = mock(SchedulerUserAuthenticationService.class, new ViolatedAssumptionAnswer());
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "restApiAccessService", (Object) restApiAccessService0);
      Injector.validateBean(bucketController0, (Class<?>) BucketController.class);
      // Undeclared exception!
      try { 
        bucketController0.delete("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // failed to lazily initialize a collection, could not initialize proxy - no Session
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn((BucketEntity) null).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "bucketService", (Object) bucketService0);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = mock(SchedulerUserAuthenticationService.class, new ViolatedAssumptionAnswer());
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "restApiAccessService", (Object) restApiAccessService0);
      Injector.validateBean(bucketController0, (Class<?>) BucketController.class);
      // Undeclared exception!
      try { 
        bucketController0.delete("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find bucket with bucketName : 
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      Long.valueOf(0L);
      Long.valueOf(0L);
      Long long0 = Long.valueOf((-1L));
      PersistentSortedSet persistentSortedSet0 = new PersistentSortedSet();
      BucketEntity bucketEntity0 = new BucketEntity(long0, "GROUP:public-objects", "GROUP:public-objects", persistentSortedSet0);
      persistentSortedSet0.stream();
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0, (BucketEntity) null).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "bucketService", (Object) bucketService0);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "restApiAccessService", (Object) restApiAccessService0);
      // Undeclared exception!
      try { 
        bucketController0.getMetadata("GROUP:public-objects", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find bucket with bucketName : 
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketEntity bucketEntity0 = new BucketEntity((String) null, "");
      ImmutableList.of(bucketEntity0, bucketEntity0, bucketEntity0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(bucketRepository0).findByOwnerIn(anyList());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "bucketService", (Object) bucketService0);
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService((SchedulerRestClientCreator) null);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, (AuthorizationService) null, schedulerUserAuthenticationService0);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "restApiAccessService", (Object) restApiAccessService0);
      Injector.validateBean(bucketController0, (Class<?>) BucketController.class);
      Optional<String> optional0 = Optional.empty();
      List<BucketMetadata> list0 = bucketController0.list("GROUP:public-objects", "GROUP:public-objects", optional0, optional0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = mock(BucketNameValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(bucketRepository0).findByOwnerIn(anyList());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = mock(OwnerGroupStringHelper.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "bucketService", (Object) bucketService0);
      Optional<String> optional0 = Optional.empty();
      // Undeclared exception!
      try { 
        bucketController0.list("i%7KPQdJ[voKgd", "GROUP:", optional0, optional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(bucketRepository0).findEmptyBucketsForUpdate();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "bucketService", (Object) bucketService0);
      AuthorizationService authorizationService0 = mock(AuthorizationService.class, new ViolatedAssumptionAnswer());
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, (SchedulerUserAuthenticationService) null);
      Injector.inject(bucketController0, (Class<?>) BucketController.class, "restApiAccessService", (Object) restApiAccessService0);
      Injector.validateBean(bucketController0, (Class<?>) BucketController.class);
      bucketController0.cleanEmpty();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BucketController bucketController0 = new BucketController();
      Optional<String> optional0 = Optional.empty();
      Optional<String> optional1 = Optional.of("GROUP:public-objects");
      // Undeclared exception!
      try { 
        bucketController0.list("GROUP:", "", optional0, optional1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
