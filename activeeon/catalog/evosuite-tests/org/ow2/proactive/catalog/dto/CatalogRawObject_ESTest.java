/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 12:57:36 GMT 2019
 */

package org.ow2.proactive.catalog.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.ow2.proactive.catalog.dto.CatalogRawObject;
import org.ow2.proactive.catalog.dto.Metadata;
import org.ow2.proactive.catalog.repository.entity.BucketEntity;
import org.ow2.proactive.catalog.repository.entity.CatalogObjectEntity;
import org.ow2.proactive.catalog.repository.entity.CatalogObjectRevisionEntity;
import org.ow2.proactive.catalog.repository.entity.KeyValueLabelMetadataEntity;

public class CatalogRawObject_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Metadata> linkedList0 = new LinkedList<Metadata>();
      byte[] byteArray0 = new byte[1];
      CatalogRawObject catalogRawObject0 = new CatalogRawObject("", "", "", "", (-2342L), "", "", linkedList0, byteArray0, "");
      CatalogRawObject catalogRawObject1 = new CatalogRawObject("", "", "", "", (-2342L), "", "", linkedList0, (byte[]) null, "");
      boolean boolean0 = catalogRawObject1.equals(catalogRawObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Long long0 = new Long((-202L));
      CatalogObjectEntity.CatalogObjectEntityKey catalogObjectEntity_CatalogObjectEntityKey0 = new CatalogObjectEntity.CatalogObjectEntityKey();
      BucketEntity bucketEntity0 = new BucketEntity();
      TreeSet<CatalogObjectRevisionEntity> treeSet0 = new TreeSet<CatalogObjectRevisionEntity>();
      CatalogObjectEntity catalogObjectEntity0 = new CatalogObjectEntity(catalogObjectEntity_CatalogObjectEntityKey0, bucketEntity0, "combinableTypes", "", "IGNORE_TYPE_VARIABLE_OR_WILDCARD", treeSet0, (-2353L));
      ArrayList<KeyValueLabelMetadataEntity> arrayList0 = new ArrayList<KeyValueLabelMetadataEntity>();
      CatalogObjectRevisionEntity catalogObjectRevisionEntity0 = new CatalogObjectRevisionEntity(long0, "org.springframework.web.util.UriTemplate", "org.springframework.web.util.UriTemplate", (-860L), catalogObjectEntity0, arrayList0, byteArray0);
      CatalogRawObject catalogRawObject0 = new CatalogRawObject(catalogObjectRevisionEntity0);
      assertEquals("", catalogRawObject0.getProjectName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      CatalogRawObject catalogRawObject0 = new CatalogRawObject((String) null, "", "", "?@2w)k 4,K8A0h.EdUZ", 0L, (String) null, "The wildcard must not be null", (List<Metadata>) null, byteArray0, "");
      catalogRawObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Metadata> linkedList0 = new LinkedList<Metadata>();
      byte[] byteArray0 = new byte[3];
      CatalogRawObject catalogRawObject0 = new CatalogRawObject("%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", (-2353L), "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", linkedList0, byteArray0, "%x!Mz/QEq#L-5|y`");
      boolean boolean0 = catalogRawObject0.equals(catalogRawObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Metadata> linkedList0 = new LinkedList<Metadata>();
      byte[] byteArray0 = new byte[10];
      CatalogRawObject catalogRawObject0 = new CatalogRawObject("]", "]", "]", "]", (-2353L), "]", "]", linkedList0, byteArray0, "]");
      boolean boolean0 = catalogRawObject0.equals("IGNORE_TYPE_VARIABLE_OR_WILDCARD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Metadata> linkedList0 = new LinkedList<Metadata>();
      byte[] byteArray0 = new byte[2];
      CatalogRawObject catalogRawObject0 = new CatalogRawObject("%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", (-2378L), "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", linkedList0, byteArray0, "%x!Mz/QEq#L-5|y`");
      CatalogRawObject catalogRawObject1 = new CatalogRawObject("%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", 9L, "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", linkedList0, byteArray0, "%x!Mz/QEq#L-5|y`");
      boolean boolean0 = catalogRawObject0.equals(catalogRawObject1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Metadata> linkedList0 = new LinkedList<Metadata>();
      byte[] byteArray0 = new byte[3];
      CatalogRawObject catalogRawObject0 = new CatalogRawObject("%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", (-2353L), "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", linkedList0, byteArray0, "%x!Mz/QEq#L-5|y`");
      CatalogRawObject catalogRawObject1 = new CatalogRawObject("%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", (-2353L), "%x!Mz/QEq#L-5|y`", "%x!Mz/QEq#L-5|y`", linkedList0, byteArray0, "%x!Mz/QEq#L-5|y`");
      boolean boolean0 = catalogRawObject1.equals(catalogRawObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CatalogObjectEntity catalogObjectEntity0 = new CatalogObjectEntity();
      BucketEntity bucketEntity0 = mock(BucketEntity.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(bucketEntity0).getBucketName();
      catalogObjectEntity0.setBucket(bucketEntity0);
      CatalogObjectEntity.CatalogObjectEntityKey catalogObjectEntity_CatalogObjectEntityKey0 = mock(CatalogObjectEntity.CatalogObjectEntityKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(catalogObjectEntity_CatalogObjectEntityKey0).getName();
      catalogObjectEntity0.setId(catalogObjectEntity_CatalogObjectEntityKey0);
      catalogObjectEntity0.getBucket();
      catalogObjectEntity0.getKind();
      CatalogObjectRevisionEntity catalogObjectRevisionEntity0 = mock(CatalogObjectRevisionEntity.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(catalogObjectRevisionEntity0).compareTo(any());
      doReturn((String) null).when(catalogObjectRevisionEntity0).getCommitMessage();
      doReturn(0L, 0L).when(catalogObjectRevisionEntity0).getCommitTime();
      doReturn((List) null).when(catalogObjectRevisionEntity0).getKeyValueMetadataList();
      doReturn((String) null).when(catalogObjectRevisionEntity0).getUsername();
      catalogObjectEntity0.addRevision(catalogObjectRevisionEntity0);
      CatalogRawObject catalogRawObject0 = null;
      try {
        catalogRawObject0 = new CatalogRawObject(catalogObjectEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      CatalogRawObject catalogRawObject0 = new CatalogRawObject((String) null, "", "", "?@2w)k 4,K8A0h.EdUZ", 0L, (String) null, "The wildcard must not be null", (List<Metadata>) null, byteArray0, "");
      byte[] byteArray1 = catalogRawObject0.getRawObject();
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Metadata> linkedList0 = new LinkedList<Metadata>();
      byte[] byteArray0 = new byte[3];
      linkedList0.add((Metadata) null);
      CatalogRawObject catalogRawObject0 = null;
      try {
        catalogRawObject0 = new CatalogRawObject("%x!M/uEq#L-5|y`", "%x!M/uEq#L-5|y`", "%x!M/uEq#L-5|y`", "%x!M/uEq#L-5|y`", (-2356L), "%x!M/uEq#L-5|y`", "%x!M/uEq#L-5|y`", linkedList0, byteArray0, "%x!M/uEq#L-5|y`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CatalogObjectEntity.CatalogObjectEntityKey catalogObjectEntity_CatalogObjectEntityKey0 = new CatalogObjectEntity.CatalogObjectEntityKey();
      BucketEntity bucketEntity0 = new BucketEntity("", "");
      TreeSet<CatalogObjectRevisionEntity> treeSet0 = new TreeSet<CatalogObjectRevisionEntity>();
      CatalogObjectEntity catalogObjectEntity0 = new CatalogObjectEntity(catalogObjectEntity_CatalogObjectEntityKey0, bucketEntity0, "", "", "", treeSet0, (-567L));
      CatalogRawObject catalogRawObject0 = null;
      try {
        catalogRawObject0 = new CatalogRawObject(catalogObjectEntity0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CatalogRawObject catalogRawObject0 = null;
      try {
        catalogRawObject0 = new CatalogRawObject((CatalogObjectRevisionEntity) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Metadata> vector0 = new Vector<Metadata>();
      CatalogRawObject catalogRawObject0 = new CatalogRawObject("", "foB\t$,kJ4J=", "", "", (-1696L), "", "", vector0, (byte[]) null, "");
      boolean boolean0 = catalogRawObject0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      CatalogRawObject catalogRawObject0 = new CatalogRawObject((String) null, "", "", "?@2w)k 4,K8A0h.EdUZ", 0L, (String) null, "The wildcard must not be null", (List<Metadata>) null, byteArray0, "");
      boolean boolean0 = catalogRawObject0.canEqual(catalogRawObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack<Metadata> stack0 = new Stack<Metadata>();
      byte[] byteArray0 = new byte[0];
      CatalogRawObject catalogRawObject0 = new CatalogRawObject("~N!Q][%Z:T{Cy[GAoCB", "org.ow2.proactive.catalog.dto.CatalogRawObject", "4PZh+ahf->=D>", "~N!Q][%Z:T{Cy[GAoCB", (-717L), "~N!Q][%Z:T{Cy[GAoCB", "~N!Q][%Z:T{Cy[GAoCB", stack0, byteArray0, "4PZh+ahf->=D>");
      byte[] byteArray1 = catalogRawObject0.getRawObject();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Metadata> vector0 = new Vector<Metadata>();
      CatalogRawObject catalogRawObject0 = new CatalogRawObject("", "foB\t$,kJ4J=", "", "", (-1696L), "", "", vector0, (byte[]) null, "");
      byte[] byteArray0 = catalogRawObject0.getRawObject();
      assertNull(byteArray0);
  }
}
