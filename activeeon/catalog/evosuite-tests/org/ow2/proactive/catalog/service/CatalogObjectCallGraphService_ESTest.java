/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 14:53:26 GMT 2019
 */

package org.ow2.proactive.catalog.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.ow2.proactive.catalog.callgraph.CatalogObjectCallGraphPDFGenerator;
import org.ow2.proactive.catalog.callgraph.TableCallGraphsBuilder;
import org.ow2.proactive.catalog.report.HeadersBuilder;
import org.ow2.proactive.catalog.service.CatalogObjectCallGraphService;
import org.ow2.proactive.catalog.service.CatalogObjectService;
import org.ow2.proactive.catalog.util.SeparatorUtility;

public class CatalogObjectCallGraphService_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CatalogObjectCallGraphService catalogObjectCallGraphService0 = new CatalogObjectCallGraphService();
      SeparatorUtility separatorUtility0 = new SeparatorUtility();
      List<String> list0 = separatorUtility0.getSplitBySeparator("org.ow2.proactive.catalog.service.CatalogObjectCallGraphService");
      Optional<String> optional0 = Optional.empty();
      // Undeclared exception!
      try { 
        catalogObjectCallGraphService0.generateBytesCallGraph(list0, optional0, optional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CatalogObjectCallGraphService catalogObjectCallGraphService0 = new CatalogObjectCallGraphService();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Optional<String> optional0 = Optional.empty();
      // Undeclared exception!
      try { 
        catalogObjectCallGraphService0.generateBytesCallGraph(arrayList0, optional0, (Optional<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CatalogObjectCallGraphService catalogObjectCallGraphService0 = new CatalogObjectCallGraphService();
      SeparatorUtility separatorUtility0 = new SeparatorUtility();
      List<String> list0 = separatorUtility0.getSplitBySeparator("F)|1a&n(L8l");
      Optional<String> optional0 = Optional.ofNullable("NChannel");
      // Undeclared exception!
      try { 
        catalogObjectCallGraphService0.generateBytesCallGraphForSelectedObjects("&*[*O=g~?_c", list0, optional0, optional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CatalogObjectCallGraphService catalogObjectCallGraphService0 = new CatalogObjectCallGraphService();
      CatalogObjectCallGraphPDFGenerator catalogObjectCallGraphPDFGenerator0 = new CatalogObjectCallGraphPDFGenerator();
      HeadersBuilder headersBuilder0 = mock(HeadersBuilder.class, new ViolatedAssumptionAnswer());
      Injector.inject(catalogObjectCallGraphPDFGenerator0, (Class<?>) CatalogObjectCallGraphPDFGenerator.class, "headersBuilder", (Object) headersBuilder0);
      SeparatorUtility separatorUtility0 = new SeparatorUtility();
      List<String> list0 = separatorUtility0.getSplitBySeparator("");
      Injector.inject(catalogObjectCallGraphPDFGenerator0, (Class<?>) CatalogObjectCallGraphPDFGenerator.class, "separatorUtility", (Object) separatorUtility0);
      TableCallGraphsBuilder tableCallGraphsBuilder0 = mock(TableCallGraphsBuilder.class, new ViolatedAssumptionAnswer());
      Injector.inject(catalogObjectCallGraphPDFGenerator0, (Class<?>) CatalogObjectCallGraphPDFGenerator.class, "tableGraphPathBuilder", (Object) tableCallGraphsBuilder0);
      Injector.validateBean(catalogObjectCallGraphPDFGenerator0, (Class<?>) CatalogObjectCallGraphPDFGenerator.class);
      Injector.inject(catalogObjectCallGraphService0, (Class<?>) CatalogObjectCallGraphService.class, "catalogObjectCallGraphPDFGenerator", (Object) catalogObjectCallGraphPDFGenerator0);
      CatalogObjectService catalogObjectService0 = mock(CatalogObjectService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(catalogObjectService0).listSelectedCatalogObjects(anyString() , anyList());
      Injector.inject(catalogObjectCallGraphService0, (Class<?>) CatalogObjectCallGraphService.class, "catalogObjectService", (Object) catalogObjectService0);
      Injector.validateBean(catalogObjectCallGraphService0, (Class<?>) CatalogObjectCallGraphService.class);
      Optional<String> optional0 = Optional.ofNullable("");
      Optional<String> optional1 = Optional.of("");
      // Undeclared exception!
      try { 
        catalogObjectCallGraphService0.generateBytesCallGraphForSelectedObjects("", list0, optional1, optional0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error while generating the PDF Report: java.lang.NullPointerException
         //
      }
  }
}
