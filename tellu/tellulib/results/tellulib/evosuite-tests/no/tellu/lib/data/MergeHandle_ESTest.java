/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 24 10:58:58 GMT 2019
 */

package no.tellu.lib.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.LinkedList;
import java.util.List;
import no.tellu.lib.data.DataGroupNode;
import no.tellu.lib.data.DataHandle;
import no.tellu.lib.data.DataHandleImpl;
import no.tellu.lib.data.DataNode;
import no.tellu.lib.data.DataPath;
import no.tellu.lib.data.DataPredicate;
import no.tellu.lib.data.DataSerializer;
import no.tellu.lib.data.DataValueNode;
import no.tellu.lib.data.MergeHandle;
import no.tellu.lib.data.MetaGroupNode;
import no.tellu.lib.data.MetaItemNode;
import no.tellu.lib.data.MetaNumberNode;
import no.tellu.lib.data.MultiLevelHandle;
import no.tellu.lib.data.model.ParsedExpr;
import no.tellu.lib.data.serialize.XmlSerializer;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;

public class MergeHandle_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      MergeHandle mergeHandle1 = new MergeHandle();
      boolean boolean0 = mergeHandle1.hasNode();
      assertFalse(boolean0);
      
      mergeHandle0.addDataBack(mergeHandle1);
      mergeHandle0.resetNode();
      assertFalse(mergeHandle0.hasNode());
      
      DataGroupNode dataGroupNode0 = new DataGroupNode();
      dataGroupNode0.getName();
      dataGroupNode0.childNodes();
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.LONG;
      Integer integer0 = new Integer(1);
      ParsedExpr parsedExpr0 = new ParsedExpr("", ":", 1043, metaItemNode_DataType0);
      MergeHandle mergeHandle2 = new MergeHandle();
      boolean boolean1 = mergeHandle2.isValid();
      assertFalse(boolean1 == boolean0);
      
      MergeHandle mergeHandle3 = new MergeHandle();
      mergeHandle0.getValueNode("$");
      assertFalse(mergeHandle0.hasNode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      dataHandleImpl0.getClonedNodes("", true);
      int int0 = mergeHandle0.index;
      dataHandleImpl0.getDataNodes("Q-As%");
      mergeHandle0.addDataBack(dataHandleImpl0);
      mergeHandle0.getDataNodes("");
      int int1 = mergeHandle0.totalNodes();
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      String string0 = mergeHandle0.getName();
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.getDataNodes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      dataHandleImpl0.getString((String) null, (String) null);
      mergeHandle0.addDataFront(dataHandleImpl0);
      mergeHandle0.getName();
      boolean boolean0 = mergeHandle0.hasNode();
      assertFalse(boolean0);
      
      mergeHandle0.nextNode();
      mergeHandle0.nextNode();
      // Undeclared exception!
      try { 
        mergeHandle0.getNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataValueNode dataValueNode0 = mergeHandle0.getValueNode(":");
      assertNull(dataValueNode0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      
      mergeHandle0.getDataNodes("I2(f3Am ");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle0.getNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      boolean boolean0 = mergeHandle0.nextNode();
      assertFalse(boolean0);
      
      mergeHandle0.getValueNode("{~O%>v /W)({8n5[)'");
      Integer integer0 = new Integer((-1));
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.INTEGER;
      ParsedExpr parsedExpr0 = new ParsedExpr("{~O%>v /W)({8n5[)'", "!=", (-297), metaItemNode_DataType0);
      MergeHandle mergeHandle1 = new MergeHandle();
      mergeHandle1.getValueNode("!=");
      boolean boolean1 = mergeHandle1.isValueNode();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.addDataFront(mergeHandle0);
      DataValueNode dataValueNode0 = mergeHandle0.getValueNode(":");
      assertNull(dataValueNode0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle0.setValue("", (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      boolean boolean0 = mergeHandle0.isValueNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      int int0 = mergeHandle0.index;
      mergeHandle0.getDataNodes(":c{tCFcp^a.m'!");
      MergeHandle mergeHandle1 = new MergeHandle();
      String string0 = "Q-As%";
      // Undeclared exception!
      try { 
        mergeHandle0.getDataNodes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      List<DataNode> list0 = mergeHandle0.getDataNodes(":Removing subscription for path $");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      dataHandleImpl0.getClonedNodes("", true);
      dataHandleImpl0.isValid();
      int int0 = mergeHandle0.index;
      mergeHandle0.getBoolean("", false);
      mergeHandle0.addDataBack(dataHandleImpl0);
      mergeHandle0.getDataNodes("");
      mergeHandle0.isValueNode();
      String string0 = mergeHandle0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      MergeHandle mergeHandle1 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle1.changeName("$/yD(X", "Error writing data to file", ":GGONz0+lH;n[p`oO");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      boolean boolean0 = mergeHandle0.nextNode();
      int int0 = mergeHandle0.index;
      mergeHandle0.getDataNodes("");
      MergeHandle mergeHandle1 = new MergeHandle();
      mergeHandle0.getDataNodes("2{H}:WU<^]S]RER-C4W");
      mergeHandle1.addDataBack(mergeHandle0);
      mergeHandle1.getDataNodes("::Invalid value of ");
      MergeHandle mergeHandle2 = new MergeHandle();
      int int1 = mergeHandle2.totalNodes();
      assertEquals(0, int1);
      
      boolean boolean1 = mergeHandle2.isValid();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataValueNode dataValueNode0 = mergeHandle0.getValueNode("$/yD(X");
      assertNull(dataValueNode0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.resetNode();
      DataValueNode dataValueNode0 = mergeHandle0.getValueNode(":\": ");
      assertNull(dataValueNode0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      DataGroupNode dataGroupNode0 = new DataGroupNode(":>x");
      MultiLevelHandle multiLevelHandle0 = new MultiLevelHandle(dataGroupNode0, "rgi||]EH8phKoQo%E");
      mergeHandle0.addDataFront(multiLevelHandle0);
      // Undeclared exception!
      try { 
        mergeHandle0.totalNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.addDataFront(mergeHandle0);
      mergeHandle0.nextNode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle0.setValue(":R,N#r", ":R,N#r");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle0.addNode((DataNode) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle0.addDataFront((DataHandleImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't add DataHandle null-pointer
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.nextNode();
      // Undeclared exception!
      try { 
        mergeHandle0.removeValue("8");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle0.addDataBack((DataHandleImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't add DataHandle null-pointer
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.nextNode();
      mergeHandle0.resetNode();
      mergeHandle0.getValueNode(":\": ");
      // Undeclared exception!
      try { 
        mergeHandle0.addDataBack((DataHandleImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't add DataHandle null-pointer
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle0.removeValue("Vup;Zwz/");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      boolean boolean0 = mergeHandle0.hasNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      mergeHandle0.addDataFront(dataHandleImpl0);
      String string0 = mergeHandle0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      mergeHandle0.addDataFront(dataHandleImpl0);
      mergeHandle0.resetNode();
      DataValueNode dataValueNode0 = mergeHandle0.getValueNode(":");
      assertNull(dataValueNode0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.getString("1SA$?f.i1C5TV", "1SA$?f.i1C5TV");
      mergeHandle0.addDataFront(mergeHandle0);
      MergeHandle mergeHandle1 = new MergeHandle();
      String string0 = ":mKU`_";
      mergeHandle1.getValueNode(":mKU`_");
      mergeHandle0.getDataNodes("1SA$?f.i1C5TV");
      String string1 = "2(_b]qe@|?";
      mergeHandle0.changeName(string1, string0, string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.nextNode();
      mergeHandle0.getName();
      mergeHandle0.hasNode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      dataHandleImpl0.getClonedNodes("", true);
      dataHandleImpl0.getInt((String) null, (-95));
      dataHandleImpl0.getDataNodes("Q-As%");
      mergeHandle0.addDataBack(dataHandleImpl0);
      String string0 = null;
      // Undeclared exception!
      try { 
        mergeHandle0.removeValue((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      mergeHandle0.addDataFront(dataHandleImpl0);
      mergeHandle0.isValid();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.isValid();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.totalNodes();
      // Undeclared exception!
      try { 
        mergeHandle0.getFloat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      mergeHandle0.addDataFront(dataHandleImpl0);
      mergeHandle0.hasNode();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      mergeHandle0.addDataFront(dataHandleImpl0);
      mergeHandle0.getValueNode("[cteY^G");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      String string0 = "";
      mergeHandle0.isValid();
      mergeHandle0.getDataHandle("");
      mergeHandle0.addDataFront(mergeHandle0);
      MergeHandle mergeHandle1 = new MergeHandle();
      DataNode dataNode0 = mock(DataNode.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mergeHandle0.addNode(dataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      mergeHandle0.addDataFront(dataHandleImpl0);
      mergeHandle0.nextNode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.getDataNodes("c{tCFcp^a.m'!");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle0.mergeNode((DataNode) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      String string0 = "GGO\\Nz0+lH;n[p`oO";
      try { 
        mergeHandle0.getLong("GGONz0+lH;n[p`oO");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      ParsedExpr.BooleanRef parsedExpr_BooleanRef0 = new ParsedExpr.BooleanRef("0)XSwk{L", (byte)38);
      ParsedExpr.BooleanRef parsedExpr_BooleanRef1 = new ParsedExpr.BooleanRef("0)XSwk{L", (byte)62);
      ParsedExpr.BooleanRef parsedExpr_BooleanRef2 = new ParsedExpr.BooleanRef("0)XSwk{L", (byte) (-1));
      ParsedExpr.BooleanRef parsedExpr_BooleanRef3 = new ParsedExpr.BooleanRef("vv^A^S_Ghf", (byte) (-1));
      ParsedExpr.BooleanRef parsedExpr_BooleanRef4 = new ParsedExpr.BooleanRef("-tS-a{", (byte)0);
      ParsedExpr.BooleanRef parsedExpr_BooleanRef5 = new ParsedExpr.BooleanRef("vv^A^S_Ghf", (byte)0);
      ParsedExpr.BooleanRef parsedExpr_BooleanRef6 = new ParsedExpr.BooleanRef("x", (byte)51);
      ParsedExpr.BooleanRef parsedExpr_BooleanRef7 = new ParsedExpr.BooleanRef("Less", (byte)117);
      DataGroupNode dataGroupNode0 = new DataGroupNode();
      DataGroupNode dataGroupNode1 = new DataGroupNode();
      parsedExpr_BooleanRef7.getNode(dataGroupNode1, dataGroupNode0);
      DataValueNode dataValueNode0 = new DataValueNode("yZ_D}3", (Object) null);
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl(dataValueNode0);
      mergeHandle0.addDataFront(dataHandleImpl0);
      mergeHandle0.hasNode();
      mergeHandle0.isValid();
      mergeHandle0.isValid();
      mergeHandle0.getName();
      mergeHandle0.isValueNode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      MergeHandle mergeHandle1 = new MergeHandle();
      mergeHandle0.addDataFront(mergeHandle1);
      mergeHandle0.totalNodes();
      mergeHandle0.isValid();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.getName();
      // Undeclared exception!
      try { 
        mergeHandle0.serialize((DataSerializer) null, (OutputStream) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.nextNode();
      int int0 = mergeHandle0.index;
      mergeHandle0.getDataNodes("");
      MergeHandle mergeHandle1 = new MergeHandle();
      mergeHandle1.getDataNodes("Q-As%");
      mergeHandle0.addDataBack(mergeHandle1);
      mergeHandle0.getDataNodes("6s=NYf=`RrZq");
      mergeHandle0.totalNodes();
      mergeHandle0.isValid();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle0.getValueNode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      mergeHandle0.addDataFront(dataHandleImpl0);
      mergeHandle0.isValueNode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      MergeHandle mergeHandle1 = new MergeHandle();
      mergeHandle0.addDataFront(mergeHandle1);
      mergeHandle0.isValid();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      MergeHandle mergeHandle1 = new MergeHandle();
      mergeHandle1.hasNode();
      mergeHandle0.addDataBack(mergeHandle1);
      mergeHandle0.resetNode();
      DataGroupNode dataGroupNode0 = new DataGroupNode();
      dataGroupNode0.getName();
      dataGroupNode0.childNodes();
      dataGroupNode0.getChildNode((-213));
      MetaGroupNode metaGroupNode0 = new MetaGroupNode((String) null, 0);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode((String) null, metaGroupNode0, 0);
      MetaGroupNode metaGroupNode1 = metaGroupNode0.putNode(metaNumberNode0);
      DataGroupNode dataGroupNode1 = metaGroupNode1.createData(true);
      DataPredicate dataPredicate0 = new DataPredicate();
      dataGroupNode1.getChildNodes((String) null, dataPredicate0);
      DataGroupNode dataGroupNode2 = new DataGroupNode();
      DataGroupNode dataGroupNode3 = new DataGroupNode();
      DataGroupNode dataGroupNode4 = new DataGroupNode();
      DataGroupNode dataGroupNode5 = dataGroupNode4.addNodeRaw((DataNode) null);
      // Undeclared exception!
      try { 
        mergeHandle0.setValue("85M0OY$K", dataGroupNode5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.addDataFront(mergeHandle0);
      mergeHandle0.hasNode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      // Undeclared exception!
      try { 
        mergeHandle0.changeName("::DataProvider $ activated, count is #", "::DataProvider $ activated, count is #", "::DataProvider $ activated, count is #");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      String string0 = "";
      mergeHandle0.isValid();
      mergeHandle0.getDataHandle("");
      mergeHandle0.addDataFront(mergeHandle0);
      // Undeclared exception!
      try { 
        mergeHandle0.removeValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataValueNode dataValueNode0 = new DataValueNode("");
      dataValueNode0.getString();
      DataValueNode dataValueNode1 = dataValueNode0.getValueNode((String) null);
      dataValueNode1.updateModified();
      // Undeclared exception!
      try { 
        mergeHandle0.mergeNode(dataValueNode1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      int int0 = mergeHandle0.index;
      dataHandleImpl0.getDataNodes("Q-As%");
      mergeHandle0.addDataBack(dataHandleImpl0);
      List<DataNode> list0 = new LinkedList<DataNode>();
      mergeHandle0.totalNodes();
      mergeHandle0.isValid();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      String string0 = "qeB";
      DataSerializer dataSerializer0 = mock(DataSerializer.class, new ViolatedAssumptionAnswer());
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      mergeHandle0.resetNode();
      // Undeclared exception!
      try { 
        mergeHandle0.serialize(dataSerializer0, outputStream0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }
}
