<?xml version='1.0' encoding='UTF-8'?><ts><start>s0</start><states><state id="s3"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s4"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s5"><transition target="s6" action="java.util.Arrays.findFirst()" proba="0.5"/><transition target="s9" action="java.util.Arrays.findAny()" proba="0.5"/></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s7"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"/></state><state id="s8"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s9"><transition target="sX" action="epsilon" proba="1.0"/></state><state id="s0"><transition target="s3" action="java.util.Arrays.hashCode(byte[])" proba="0.038461538461538464"/><transition target="s4" action="java.util.Arrays.equals(byte[],byte[])" proba="0.038461538461538464"/><transition target="s7" action="java.util.Arrays.toString(byte[])" proba="0.038461538461538464"/><transition target="s1" action="java.util.Arrays.stream(java.lang.Object[])" proba="0.19230769230769232"/><transition target="s2" action="java.util.Arrays.asList(java.lang.Object[])" proba="0.6923076923076923"/></state><state id="s1"><transition target="s5" action="java.util.Arrays.filter(java.util.function.Predicate)" proba="0.4"/><transition target="sX" action="epsilon" proba="0.2"/><transition target="s8" action="java.util.Arrays.noneMatch(java.util.function.Predicate)" proba="0.4"/></state><state id="s2"><transition target="sX" action="epsilon" proba="0.8571428571428571"/><transition target="s2" action="java.util.Arrays.asList(java.lang.Object[])" proba="0.14285714285714285"/></state></states></ts>