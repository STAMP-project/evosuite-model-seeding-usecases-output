/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 12:51:48 GMT 2019
 */

package org.ow2.proactive.catalog.dto;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.ow2.proactive.catalog.dto.CatalogObjectDependencies;
import org.ow2.proactive.catalog.dto.DependsOnCatalogObject;

public class CatalogObjectDependencies_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, stack0);
      CatalogObjectDependencies catalogObjectDependencies1 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, (List<String>) null);
      boolean boolean0 = catalogObjectDependencies1.equals(catalogObjectDependencies0);
      assertFalse(boolean0);
      assertFalse(catalogObjectDependencies0.equals((Object)catalogObjectDependencies1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, arrayList0);
      String string0 = catalogObjectDependencies0.toString();
      assertEquals("CatalogObjectDependencies(dependsOnList=null, calledByList=[])", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Vector<DependsOnCatalogObject> vector0 = new Vector<DependsOnCatalogObject>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies(vector0, linkedList0);
      catalogObjectDependencies0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, arrayList0);
      catalogObjectDependencies0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, (List<String>) null);
      catalogObjectDependencies0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, arrayList0);
      boolean boolean0 = catalogObjectDependencies0.equals(catalogObjectDependencies0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, arrayList0);
      boolean boolean0 = catalogObjectDependencies0.equals("CatalogObjectDependencies(dependsOnList=null, calledByList=null)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector<DependsOnCatalogObject> vector0 = new Vector<DependsOnCatalogObject>();
      Vector<String> vector1 = new Vector<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies(vector0, vector1);
      CatalogObjectDependencies catalogObjectDependencies1 = new CatalogObjectDependencies(vector0, vector1);
      boolean boolean0 = catalogObjectDependencies0.equals(catalogObjectDependencies1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, linkedList0);
      Vector<DependsOnCatalogObject> vector0 = new Vector<DependsOnCatalogObject>();
      CatalogObjectDependencies catalogObjectDependencies1 = new CatalogObjectDependencies(vector0, linkedList0);
      boolean boolean0 = catalogObjectDependencies0.equals(catalogObjectDependencies1);
      assertFalse(boolean0);
      assertFalse(catalogObjectDependencies1.equals((Object)catalogObjectDependencies0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, linkedList0);
      ArrayList<DependsOnCatalogObject> arrayList0 = new ArrayList<DependsOnCatalogObject>();
      CatalogObjectDependencies catalogObjectDependencies1 = new CatalogObjectDependencies(arrayList0, linkedList0);
      boolean boolean0 = catalogObjectDependencies1.equals(catalogObjectDependencies0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, (List<String>) null);
      CatalogObjectDependencies catalogObjectDependencies1 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, (List<String>) null);
      boolean boolean0 = catalogObjectDependencies0.equals(catalogObjectDependencies1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Stack<DependsOnCatalogObject> stack0 = new Stack<DependsOnCatalogObject>();
      Vector<String> vector0 = new Vector<String>();
      Stack<String> stack1 = new Stack<String>();
      vector0.add("");
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies(stack0, stack1);
      CatalogObjectDependencies catalogObjectDependencies1 = new CatalogObjectDependencies(stack0, vector0);
      boolean boolean0 = catalogObjectDependencies0.equals(catalogObjectDependencies1);
      assertFalse(catalogObjectDependencies1.equals((Object)catalogObjectDependencies0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, arrayList0);
      List<DependsOnCatalogObject> list0 = catalogObjectDependencies0.getDependsOnList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, arrayList0);
      List<String> list0 = catalogObjectDependencies0.getCalledByList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Stack<DependsOnCatalogObject> stack0 = new Stack<DependsOnCatalogObject>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies(stack0, arrayList0);
      DependsOnCatalogObject dependsOnCatalogObject0 = new DependsOnCatalogObject("com.google.common.collect.Range$RangeLexOrdering", "CatalogObjectDependencies(dependsOnList=[], calledByList=[])", true);
      boolean boolean0 = catalogObjectDependencies0.canEqual(dependsOnCatalogObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<DependsOnCatalogObject> linkedList0 = new LinkedList<DependsOnCatalogObject>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Vector<String> vector0 = new Vector<String>(treeSet0);
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies(linkedList0, vector0);
      boolean boolean0 = catalogObjectDependencies0.canEqual(catalogObjectDependencies0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<DependsOnCatalogObject> stack0 = new Stack<DependsOnCatalogObject>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies(stack0, arrayList0);
      List<String> list0 = catalogObjectDependencies0.getCalledByList();
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies((List<DependsOnCatalogObject>) null, (List<String>) null);
      List<String> list0 = catalogObjectDependencies0.getCalledByList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<DependsOnCatalogObject> arrayList0 = new ArrayList<DependsOnCatalogObject>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add((DependsOnCatalogObject) null);
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies(arrayList0, arrayList1);
      List<DependsOnCatalogObject> list0 = catalogObjectDependencies0.getDependsOnList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<DependsOnCatalogObject> arrayList0 = new ArrayList<DependsOnCatalogObject>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      CatalogObjectDependencies catalogObjectDependencies0 = new CatalogObjectDependencies(arrayList0, arrayList1);
      List<DependsOnCatalogObject> list0 = catalogObjectDependencies0.getDependsOnList();
      assertTrue(list0.isEmpty());
  }
}
