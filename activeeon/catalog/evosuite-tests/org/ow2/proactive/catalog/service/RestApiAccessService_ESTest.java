/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 15:13:43 GMT 2019
 */

package org.ow2.proactive.catalog.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.hibernate.collection.internal.PersistentSet;
import org.hibernate.engine.spi.SessionImplementor;
import org.ow2.proactive.catalog.repository.BucketRepository;
import org.ow2.proactive.catalog.repository.entity.BucketEntity;
import org.ow2.proactive.catalog.service.AuthorizationService;
import org.ow2.proactive.catalog.service.BucketService;
import org.ow2.proactive.catalog.service.OwnerGroupStringHelper;
import org.ow2.proactive.catalog.service.RestApiAccessService;
import org.ow2.proactive.catalog.service.SchedulerRestClientCreator;
import org.ow2.proactive.catalog.service.SchedulerUserAuthenticationService;
import org.ow2.proactive.catalog.service.model.RestApiAccessResponse;
import org.ow2.proactive.catalog.util.name.validator.BucketNameValidator;

public class RestApiAccessService_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = mock(BucketNameValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketEntity bucketEntity0 = new BucketEntity();
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0, (BucketEntity) null).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = mock(OwnerGroupStringHelper.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, (AuthorizationService) null, schedulerUserAuthenticationService0);
      // Undeclared exception!
      try { 
        restApiAccessService0.getUserDataFromSessionidAndCheckAccess(true, (String) null, "GROUP:public-objects");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not validate sessionId, validation returned: Loop has been executed more times than the allowed 10000
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = mock(BucketNameValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      SessionImplementor sessionImplementor0 = mock(SessionImplementor.class, new ViolatedAssumptionAnswer());
      PersistentSet persistentSet0 = new PersistentSet(sessionImplementor0);
      BucketEntity bucketEntity0 = new BucketEntity((Long) 0L, "GROUP:public-objects", "GROUP:public-objects", persistentSet0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = mock(OwnerGroupStringHelper.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      OwnerGroupStringHelper ownerGroupStringHelper1 = new OwnerGroupStringHelper();
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper1);
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService((SchedulerRestClientCreator) null);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      RestApiAccessResponse restApiAccessResponse0 = restApiAccessService0.getUserDataFromSessionidAndCheckAccess(false, "M", "M");
      assertTrue(restApiAccessResponse0.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = mock(BucketNameValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketEntity bucketEntity0 = new BucketEntity("omG$i#r-<p", "omG$i#r-<p");
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = mock(OwnerGroupStringHelper.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      AuthorizationService authorizationService0 = new AuthorizationService((OwnerGroupStringHelper) null);
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      RestApiAccessResponse restApiAccessResponse0 = restApiAccessService0.getUserDataFromSessionidAndCheckAccess(false, "KIpP)ZS H@", "omG$i#r-<p");
      assertTrue(restApiAccessResponse0.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketEntity bucketEntity0 = mock(BucketEntity.class, new ViolatedAssumptionAnswer());
      doReturn("GROUP:public-objects").when(bucketEntity0).getBucketName();
      doReturn("GROUP:public-objects").when(bucketEntity0).getOwner();
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      restApiAccessService0.checkAccessBySessionIdForBucketAndThrowIfDeclined(false, "GROUP:", "uB*,h!>_>0rm!s");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = mock(BucketNameValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketEntity bucketEntity0 = new BucketEntity();
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0, bucketEntity0).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = mock(OwnerGroupStringHelper.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, (AuthorizationService) null, schedulerUserAuthenticationService0);
      // Undeclared exception!
      try { 
        restApiAccessService0.checkAccessBySessionIdForBucketAndThrowIfDeclined(true, "GROUP:public-objects", "IUFYE8I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not validate sessionId, validation returned: Loop has been executed more times than the allowed 10000
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketEntity bucketEntity0 = mock(BucketEntity.class, new ViolatedAssumptionAnswer());
      doReturn("y").when(bucketEntity0).getBucketName();
      doReturn("ReplicationConnectionProxy.badValueForAllowSlaveDownConnections").when(bucketEntity0).getOwner();
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      restApiAccessService0.checkAccessBySessionIdForBucketAndThrowIfDeclined(false, "GROUP:public-objects", "omG$i#r-<p");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketEntity bucketEntity0 = mock(BucketEntity.class, new ViolatedAssumptionAnswer());
      doReturn("y").when(bucketEntity0).getBucketName();
      doReturn("ReplicationConnectionProxy.badValueForAllowSlaveDownConnections").when(bucketEntity0).getOwner();
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      boolean boolean0 = restApiAccessService0.isAPublicBucket("omG$i#r-<p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      // Undeclared exception!
      try { 
        restApiAccessService0.checkAccessBySessionIdForBucketAndThrowIfDeclined(false, "omG$i#r-<p", "w:P!Q!5#i(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn((BucketEntity) null).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      // Undeclared exception!
      try { 
        restApiAccessService0.checkAccessBySessionIdForBucketAndThrowIfDeclined(false, "GROUP:", "w;?GeIA2;zA&kG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find bucket with bucketName : w;?GeIA2;zA&kG
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, (SchedulerUserAuthenticationService) null);
      // Undeclared exception!
      try { 
        restApiAccessService0.checkAccessBySessionIdForOwnerOrGroupAndThrowIfDeclined("NULLS_LAST", "org.h2.engine.Constants");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService((BucketService) null, authorizationService0, schedulerUserAuthenticationService0);
      try { 
        restApiAccessService0.checkAccessBySessionIdForOwnerOrGroupAndThrowIfDeclined("GROUP:", " is not allowed to access buckets with id ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not validate sessionId, validation returned: Loop has been executed more times than the allowed 10000
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService((BucketService) null, authorizationService0, schedulerUserAuthenticationService0);
      // Undeclared exception!
      try { 
        restApiAccessService0.getUserDataFromSessionidAndCheckAccess(false, "aRG", "com.google.protobuf.DescriptorProtos$FieldOptions");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn((BucketEntity) null).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      // Undeclared exception!
      try { 
        restApiAccessService0.getUserDataFromSessionidAndCheckAccess(false, "GROUP:public-objects", "GROUP:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find bucket with bucketName : GROUP:
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = new BucketNameValidator();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn((BucketEntity) null).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, authorizationService0, schedulerUserAuthenticationService0);
      // Undeclared exception!
      try { 
        restApiAccessService0.isAPublicBucket((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find bucket with bucketName : null
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OwnerGroupStringHelper ownerGroupStringHelper0 = new OwnerGroupStringHelper();
      AuthorizationService authorizationService0 = new AuthorizationService(ownerGroupStringHelper0);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService((BucketService) null, authorizationService0, schedulerUserAuthenticationService0);
      // Undeclared exception!
      try { 
        restApiAccessService0.isBucketAccessibleByUser(true, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BucketService bucketService0 = new BucketService();
      BucketNameValidator bucketNameValidator0 = mock(BucketNameValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketNameValidator", (Object) bucketNameValidator0);
      BucketEntity bucketEntity0 = new BucketEntity();
      bucketEntity0.getBucketName();
      BucketRepository bucketRepository0 = mock(BucketRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bucketEntity0, (BucketEntity) null).when(bucketRepository0).findOneByBucketName(anyString());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "bucketRepository", (Object) bucketRepository0);
      OwnerGroupStringHelper ownerGroupStringHelper0 = mock(OwnerGroupStringHelper.class, new ViolatedAssumptionAnswer());
      Injector.inject(bucketService0, (Class<?>) BucketService.class, "ownerGroupStringHelper", (Object) ownerGroupStringHelper0);
      Injector.validateBean(bucketService0, (Class<?>) BucketService.class);
      SchedulerRestClientCreator schedulerRestClientCreator0 = new SchedulerRestClientCreator();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      RestApiAccessService restApiAccessService0 = new RestApiAccessService(bucketService0, (AuthorizationService) null, schedulerUserAuthenticationService0);
      // Undeclared exception!
      try { 
        restApiAccessService0.isBucketAccessibleByUser(true, "", "org.ow2.proactive.catalog.service.RestApiAccessService");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find bucket with bucketName : org.ow2.proactive.catalog.service.RestApiAccessService
         //
      }
  }
}
