/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 15:22:17 GMT 2019
 */

package org.ow2.proactive.catalog.service.model;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.ow2.proactive.catalog.service.model.AuthenticatedUser;

public class AuthenticatedUser_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = AuthenticatedUser.builder();
      AuthenticatedUser authenticatedUser0 = authenticatedUser_AuthenticatedUserBuilder0.build();
      authenticatedUser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = new AuthenticatedUser.AuthenticatedUserBuilder();
      String string0 = authenticatedUser_AuthenticatedUserBuilder0.toString();
      assertEquals("AuthenticatedUser.AuthenticatedUserBuilder(name=null, groups=null)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = new AuthenticatedUser.AuthenticatedUserBuilder();
      AuthenticatedUser authenticatedUser0 = authenticatedUser_AuthenticatedUserBuilder0.build();
      authenticatedUser0.setGroups((List<String>) null);
      assertNull(authenticatedUser0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = new AuthenticatedUser.AuthenticatedUserBuilder();
      AuthenticatedUser authenticatedUser0 = authenticatedUser_AuthenticatedUserBuilder0.build();
      String string0 = authenticatedUser0.EMPTY.toString();
      assertEquals("AuthenticatedUser(name=, groups=[])", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = new AuthenticatedUser.AuthenticatedUserBuilder();
      AuthenticatedUser authenticatedUser0 = authenticatedUser_AuthenticatedUserBuilder0.build();
      AuthenticatedUser authenticatedUser1 = authenticatedUser_AuthenticatedUserBuilder0.build();
      boolean boolean0 = authenticatedUser1.equals(authenticatedUser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AuthenticatedUser authenticatedUser0 = new AuthenticatedUser("org.ow2.proactive.catalog.service.model.AuthenticatedUser$AuthenticatedUserBuilder", (List<String>) null);
      authenticatedUser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      authenticatedUser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = new AuthenticatedUser.AuthenticatedUserBuilder();
      AuthenticatedUser authenticatedUser0 = authenticatedUser_AuthenticatedUserBuilder0.build();
      boolean boolean0 = authenticatedUser0.equals("AuthenticatedUser(name=null, groups=null)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = new AuthenticatedUser.AuthenticatedUserBuilder();
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      AuthenticatedUser authenticatedUser1 = authenticatedUser_AuthenticatedUserBuilder0.build();
      boolean boolean0 = authenticatedUser1.equals(authenticatedUser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = new AuthenticatedUser.AuthenticatedUserBuilder();
      AuthenticatedUser authenticatedUser0 = authenticatedUser_AuthenticatedUserBuilder0.build();
      authenticatedUser_AuthenticatedUserBuilder0.name("AuthenticatedUser(name=null, groups=null)");
      authenticatedUser0.setName("AuthenticatedUser(name=null, groups=null)");
      AuthenticatedUser authenticatedUser1 = authenticatedUser_AuthenticatedUserBuilder0.build();
      boolean boolean0 = authenticatedUser0.equals(authenticatedUser1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = AuthenticatedUser.builder();
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      AuthenticatedUser authenticatedUser1 = authenticatedUser_AuthenticatedUserBuilder0.build();
      boolean boolean0 = authenticatedUser0.equals(authenticatedUser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = new AuthenticatedUser.AuthenticatedUserBuilder();
      AuthenticatedUser authenticatedUser0 = authenticatedUser_AuthenticatedUserBuilder0.build();
      authenticatedUser_AuthenticatedUserBuilder0.name("AuthenticatedUser(name=null, groups=null)");
      authenticatedUser0.setName("AuthenticatedUser(name=null, groups=null)");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      authenticatedUser_AuthenticatedUserBuilder0.groups(arrayList0);
      AuthenticatedUser authenticatedUser1 = authenticatedUser_AuthenticatedUserBuilder0.build();
      boolean boolean0 = authenticatedUser0.equals(authenticatedUser1);
      assertFalse(boolean0);
      assertFalse(authenticatedUser1.equals((Object)authenticatedUser0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      AuthenticatedUser authenticatedUser0 = new AuthenticatedUser(",", vector0);
      AuthenticatedUser authenticatedUser1 = new AuthenticatedUser(",", vector0);
      boolean boolean0 = authenticatedUser0.equals(authenticatedUser1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = new AuthenticatedUser.AuthenticatedUserBuilder();
      AuthenticatedUser authenticatedUser0 = authenticatedUser_AuthenticatedUserBuilder0.build();
      List<String> list0 = authenticatedUser0.getGroups();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = new AuthenticatedUser.AuthenticatedUserBuilder();
      AuthenticatedUser authenticatedUser0 = authenticatedUser_AuthenticatedUserBuilder0.build();
      String string0 = authenticatedUser0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      AuthenticatedUser authenticatedUser0 = new AuthenticatedUser("<h+W-V?I", vector0);
      vector0.addElement("vZ?+`");
      Stack<String> stack0 = new Stack<String>();
      AuthenticatedUser authenticatedUser1 = new AuthenticatedUser("<h+W-V?I", stack0);
      boolean boolean0 = authenticatedUser0.equals(authenticatedUser1);
      assertFalse(authenticatedUser1.equals((Object)authenticatedUser0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      AuthenticatedUser authenticatedUser0 = new AuthenticatedUser("/3*<Rb.rVb", stack0);
      assertEquals("/3*<Rb.rVb", authenticatedUser0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      List<String> list0 = stack0.subList(0, 0);
      AuthenticatedUser authenticatedUser0 = new AuthenticatedUser((String) null, list0);
      stack0.add(">@|>zi]nn&b9");
      // Undeclared exception!
      try { 
        authenticatedUser0.toString();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AuthenticatedUser.AuthenticatedUserBuilder authenticatedUser_AuthenticatedUserBuilder0 = AuthenticatedUser.builder();
      AuthenticatedUser authenticatedUser0 = authenticatedUser_AuthenticatedUserBuilder0.build();
      Integer integer0 = new Integer(159);
      boolean boolean0 = authenticatedUser0.canEqual(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      AuthenticatedUser authenticatedUser0 = new AuthenticatedUser("<h+W-V?I", vector0);
      boolean boolean0 = authenticatedUser0.canEqual(authenticatedUser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      AuthenticatedUser authenticatedUser0 = new AuthenticatedUser("<h+W-V?I", vector0);
      vector0.addElement("vZ?+`");
      List<String> list0 = authenticatedUser0.getGroups();
      assertTrue(list0.contains("vZ?+`"));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      AuthenticatedUser authenticatedUser0 = new AuthenticatedUser("<h+W-V?I", vector0);
      List<String> list0 = authenticatedUser0.getGroups();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      String string0 = authenticatedUser0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      AuthenticatedUser authenticatedUser0 = new AuthenticatedUser("<h+W-V?I", vector0);
      String string0 = authenticatedUser0.getName();
      assertFalse(vector0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      boolean boolean0 = authenticatedUser0.equals(authenticatedUser0);
      assertTrue(boolean0);
  }
}
