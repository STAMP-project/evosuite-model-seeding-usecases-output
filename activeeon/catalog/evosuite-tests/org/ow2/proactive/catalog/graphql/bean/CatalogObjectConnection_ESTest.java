/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 13:19:30 GMT 2019
 */

package org.ow2.proactive.catalog.graphql.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.ow2.proactive.catalog.graphql.bean.CatalogObject;
import org.ow2.proactive.catalog.graphql.bean.CatalogObjectConnection;

public class CatalogObjectConnection_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      CatalogObjectConnection catalogObjectConnection1 = new CatalogObjectConnection();
      boolean boolean0 = catalogObjectConnection1.equals(catalogObjectConnection0);
      assertEquals(0, catalogObjectConnection1.getPage());
      assertEquals(0, catalogObjectConnection1.getTotalPage());
      assertTrue(boolean0);
      assertEquals(0, catalogObjectConnection1.getTotalCount());
      assertEquals(0, catalogObjectConnection1.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      String string0 = catalogObjectConnection0.toString();
      assertEquals("CatalogObjectConnection(edges=null, page=0, size=0, hasNext=false, hasPrevious=false, totalPage=0, totalCount=0)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      catalogObjectConnection0.setHasNext(true);
      catalogObjectConnection0.hashCode();
      assertTrue(catalogObjectConnection0.isHasNext());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Stack<CatalogObject> stack0 = new Stack<CatalogObject>();
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection(stack0, (-1342), (-1342), true, true, (-2838), 1682554634);
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      CatalogObjectConnection catalogObjectConnection1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.build();
      boolean boolean0 = catalogObjectConnection0.equals(catalogObjectConnection1);
      assertEquals(0, catalogObjectConnection1.getSize());
      assertEquals(1682554634, catalogObjectConnection0.getTotalCount());
      assertFalse(boolean0);
      assertEquals(0, catalogObjectConnection1.getPage());
      assertFalse(catalogObjectConnection1.isHasNext());
      assertEquals((-2838), catalogObjectConnection0.getTotalPage());
      assertEquals((-1342), catalogObjectConnection0.getPage());
      assertFalse(catalogObjectConnection1.isHasPrevious());
      assertEquals(0, catalogObjectConnection1.getTotalCount());
      assertEquals((-1342), catalogObjectConnection0.getSize());
      assertEquals(0, catalogObjectConnection1.getTotalPage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.totalCount((-261));
      assertSame(catalogObjectConnection_CatalogObjectConnectionBuilder0, catalogObjectConnection_CatalogObjectConnectionBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      catalogObjectConnection0.setPage(Integer.MIN_VALUE);
      int int0 = catalogObjectConnection0.getPage();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      catalogObjectConnection0.setHasPrevious(true);
      catalogObjectConnection0.hashCode();
      assertTrue(catalogObjectConnection0.isHasPrevious());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = new CatalogObjectConnection.CatalogObjectConnectionBuilder();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.hasNext(true);
      CatalogObjectConnection catalogObjectConnection0 = catalogObjectConnection_CatalogObjectConnectionBuilder1.build();
      boolean boolean0 = catalogObjectConnection0.isHasNext();
      assertEquals(0, catalogObjectConnection0.getTotalPage());
      assertFalse(catalogObjectConnection0.isHasPrevious());
      assertEquals(0, catalogObjectConnection0.getSize());
      assertEquals(0, catalogObjectConnection0.getPage());
      assertEquals(0, catalogObjectConnection0.getTotalCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      CatalogObjectConnection catalogObjectConnection0 = catalogObjectConnection_CatalogObjectConnectionBuilder0.build();
      boolean boolean0 = catalogObjectConnection0.equals(catalogObjectConnection_CatalogObjectConnectionBuilder0);
      assertEquals(0, catalogObjectConnection0.getTotalPage());
      assertEquals(0, catalogObjectConnection0.getPage());
      assertFalse(catalogObjectConnection0.isHasPrevious());
      assertEquals(0, catalogObjectConnection0.getTotalCount());
      assertFalse(boolean0);
      assertFalse(catalogObjectConnection0.isHasNext());
      assertEquals(0, catalogObjectConnection0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      String string0 = catalogObjectConnection_CatalogObjectConnectionBuilder0.toString();
      assertEquals("CatalogObjectConnection.CatalogObjectConnectionBuilder(edges=null, page=0, size=0, hasNext=false, hasPrevious=false, totalPage=0, totalCount=0)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = new CatalogObjectConnection.CatalogObjectConnectionBuilder();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.page(0);
      assertSame(catalogObjectConnection_CatalogObjectConnectionBuilder0, catalogObjectConnection_CatalogObjectConnectionBuilder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.hasPrevious(true);
      assertSame(catalogObjectConnection_CatalogObjectConnectionBuilder1, catalogObjectConnection_CatalogObjectConnectionBuilder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.totalPage(852);
      assertSame(catalogObjectConnection_CatalogObjectConnectionBuilder0, catalogObjectConnection_CatalogObjectConnectionBuilder1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = new CatalogObjectConnection.CatalogObjectConnectionBuilder();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.size(1426);
      assertSame(catalogObjectConnection_CatalogObjectConnectionBuilder1, catalogObjectConnection_CatalogObjectConnectionBuilder0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      Stack<CatalogObject> stack0 = new Stack<CatalogObject>();
      catalogObjectConnection0.setEdges(stack0);
      catalogObjectConnection0.hashCode();
      assertEquals(0, catalogObjectConnection0.getSize());
      assertEquals(0, catalogObjectConnection0.getTotalCount());
      assertEquals(0, catalogObjectConnection0.getTotalPage());
      assertEquals(0, catalogObjectConnection0.getPage());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      catalogObjectConnection0.setHasPrevious(true);
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      CatalogObjectConnection catalogObjectConnection1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.build();
      boolean boolean0 = catalogObjectConnection1.equals(catalogObjectConnection0);
      assertTrue(catalogObjectConnection0.isHasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      CatalogObjectConnection catalogObjectConnection1 = new CatalogObjectConnection();
      assertTrue(catalogObjectConnection1.equals((Object)catalogObjectConnection0));
      
      ArrayList<CatalogObject> arrayList0 = new ArrayList<CatalogObject>();
      catalogObjectConnection1.setEdges(arrayList0);
      boolean boolean0 = catalogObjectConnection0.equals(catalogObjectConnection1);
      assertFalse(catalogObjectConnection1.equals((Object)catalogObjectConnection0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Stack<CatalogObject> stack0 = new Stack<CatalogObject>();
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection(stack0, (-1342), (-1342), true, true, (-2838), 1682554634);
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.edges(stack0);
      CatalogObjectConnection catalogObjectConnection1 = catalogObjectConnection_CatalogObjectConnectionBuilder1.build();
      boolean boolean0 = catalogObjectConnection0.equals(catalogObjectConnection1);
      assertEquals(1682554634, catalogObjectConnection0.getTotalCount());
      assertEquals((-1342), catalogObjectConnection0.getSize());
      assertEquals(0, catalogObjectConnection1.getTotalCount());
      assertFalse(boolean0);
      assertEquals(0, catalogObjectConnection1.getTotalPage());
      assertEquals((-1342), catalogObjectConnection0.getPage());
      assertEquals((-2838), catalogObjectConnection0.getTotalPage());
      assertFalse(catalogObjectConnection1.isHasPrevious());
      assertFalse(catalogObjectConnection1.isHasNext());
      assertEquals(0, catalogObjectConnection1.getPage());
      assertEquals(0, catalogObjectConnection1.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      CatalogObjectConnection catalogObjectConnection1 = new CatalogObjectConnection();
      catalogObjectConnection1.setSize(31);
      boolean boolean0 = catalogObjectConnection0.equals(catalogObjectConnection1);
      assertEquals(31, catalogObjectConnection1.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      catalogObjectConnection0.setHasNext(true);
      CatalogObjectConnection catalogObjectConnection1 = new CatalogObjectConnection();
      boolean boolean0 = catalogObjectConnection0.equals(catalogObjectConnection1);
      assertTrue(catalogObjectConnection0.isHasNext());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      CatalogObjectConnection catalogObjectConnection1 = new CatalogObjectConnection();
      catalogObjectConnection1.setTotalPage((-1433));
      boolean boolean0 = catalogObjectConnection1.equals(catalogObjectConnection0);
      assertEquals((-1433), catalogObjectConnection1.getTotalPage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      CatalogObjectConnection catalogObjectConnection1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.build();
      catalogObjectConnection1.setTotalCount((-2289));
      boolean boolean0 = catalogObjectConnection1.equals(catalogObjectConnection0);
      assertEquals((-2289), catalogObjectConnection1.getTotalCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = new CatalogObjectConnection.CatalogObjectConnectionBuilder();
      CatalogObjectConnection catalogObjectConnection0 = catalogObjectConnection_CatalogObjectConnectionBuilder0.build();
      boolean boolean0 = catalogObjectConnection0.isHasPrevious();
      assertEquals(0, catalogObjectConnection0.getPage());
      assertEquals(0, catalogObjectConnection0.getTotalPage());
      assertEquals(0, catalogObjectConnection0.getSize());
      assertFalse(catalogObjectConnection0.isHasNext());
      assertEquals(0, catalogObjectConnection0.getTotalCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      int int0 = catalogObjectConnection0.getPage();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      int int0 = catalogObjectConnection0.getTotalPage();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      int int0 = catalogObjectConnection0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      int int0 = catalogObjectConnection0.getTotalCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      List<CatalogObject> list0 = catalogObjectConnection0.getEdges();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      boolean boolean0 = catalogObjectConnection0.isHasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      Object object0 = new Object();
      boolean boolean0 = catalogObjectConnection0.canEqual(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<CatalogObject> arrayList0 = new ArrayList<CatalogObject>();
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection(arrayList0, 0, 0, true, true, 0, 410);
      catalogObjectConnection0.canEqual(catalogObjectConnection0);
      assertEquals(0, catalogObjectConnection0.getTotalPage());
      assertTrue(catalogObjectConnection0.isHasNext());
      assertEquals(0, catalogObjectConnection0.getSize());
      assertEquals(0, catalogObjectConnection0.getPage());
      assertEquals(410, catalogObjectConnection0.getTotalCount());
      assertTrue(catalogObjectConnection0.isHasPrevious());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      Stack<CatalogObject> stack0 = new Stack<CatalogObject>();
      stack0.add((CatalogObject) null);
      catalogObjectConnection0.setEdges(stack0);
      List<CatalogObject> list0 = catalogObjectConnection0.getEdges();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Stack<CatalogObject> stack0 = new Stack<CatalogObject>();
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection(stack0, (-1342), (-1342), true, true, (-2838), 1682554634);
      catalogObjectConnection0.getEdges();
      assertTrue(catalogObjectConnection0.isHasPrevious());
      assertTrue(catalogObjectConnection0.isHasNext());
      assertEquals(1682554634, catalogObjectConnection0.getTotalCount());
      assertEquals((-2838), catalogObjectConnection0.getTotalPage());
      assertEquals((-1342), catalogObjectConnection0.getPage());
      assertEquals((-1342), catalogObjectConnection0.getSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      catalogObjectConnection0.setPage(59);
      int int0 = catalogObjectConnection0.getPage();
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Stack<CatalogObject> stack0 = new Stack<CatalogObject>();
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection(stack0, (-1579), (-1), true, true, (-3491), (-891));
      int int0 = catalogObjectConnection0.getSize();
      assertEquals((-1), int0);
      assertTrue(catalogObjectConnection0.isHasPrevious());
      assertEquals((-1579), catalogObjectConnection0.getPage());
      assertEquals((-3491), catalogObjectConnection0.getTotalPage());
      assertEquals((-891), catalogObjectConnection0.getTotalCount());
      assertTrue(catalogObjectConnection0.isHasNext());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection((List<CatalogObject>) null, 0, 1613, false, false, (-2135), 1613);
      int int0 = catalogObjectConnection0.getSize();
      assertFalse(catalogObjectConnection0.isHasNext());
      assertEquals(1613, catalogObjectConnection0.getTotalCount());
      assertEquals(0, catalogObjectConnection0.getPage());
      assertEquals((-2135), catalogObjectConnection0.getTotalPage());
      assertFalse(catalogObjectConnection0.isHasPrevious());
      assertEquals(1613, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      catalogObjectConnection0.setTotalCount((-1541));
      int int0 = catalogObjectConnection0.getTotalCount();
      assertEquals((-1541), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection((List<CatalogObject>) null, 1, 1, false, false, 1, 1);
      int int0 = catalogObjectConnection0.getTotalCount();
      assertEquals(1, catalogObjectConnection0.getPage());
      assertFalse(catalogObjectConnection0.isHasPrevious());
      assertFalse(catalogObjectConnection0.isHasNext());
      assertEquals(1, catalogObjectConnection0.getSize());
      assertEquals(1, int0);
      assertEquals(1, catalogObjectConnection0.getTotalPage());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      CatalogObjectConnection catalogObjectConnection0 = catalogObjectConnection_CatalogObjectConnectionBuilder0.build();
      catalogObjectConnection0.setTotalPage((-578));
      int int0 = catalogObjectConnection0.getTotalPage();
      assertEquals((-578), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      catalogObjectConnection0.setTotalPage(4203);
      int int0 = catalogObjectConnection0.getTotalPage();
      assertEquals(4203, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      catalogObjectConnection0.setHasPrevious(true);
      boolean boolean0 = catalogObjectConnection0.isHasPrevious();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      boolean boolean0 = catalogObjectConnection0.equals(catalogObjectConnection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      CatalogObjectConnection catalogObjectConnection1 = new CatalogObjectConnection();
      catalogObjectConnection1.setPage(Integer.MIN_VALUE);
      boolean boolean0 = catalogObjectConnection0.equals(catalogObjectConnection1);
      assertEquals(Integer.MIN_VALUE, catalogObjectConnection1.getPage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = new CatalogObjectConnection.CatalogObjectConnectionBuilder();
      CatalogObjectConnection catalogObjectConnection1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.build();
      catalogObjectConnection0.setSize((-541));
      boolean boolean0 = catalogObjectConnection1.equals(catalogObjectConnection0);
      assertEquals((-541), catalogObjectConnection0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = CatalogObjectConnection.builder();
      CatalogObjectConnection catalogObjectConnection1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.build();
      catalogObjectConnection1.setTotalPage(801);
      boolean boolean0 = catalogObjectConnection1.equals(catalogObjectConnection0);
      assertEquals(801, catalogObjectConnection1.getTotalPage());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = new CatalogObjectConnection.CatalogObjectConnectionBuilder();
      CatalogObjectConnection catalogObjectConnection1 = catalogObjectConnection_CatalogObjectConnectionBuilder0.build();
      assertEquals(0, catalogObjectConnection1.getTotalCount());
      
      catalogObjectConnection1.setTotalCount(1);
      boolean boolean0 = catalogObjectConnection1.equals(catalogObjectConnection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CatalogObjectConnection.CatalogObjectConnectionBuilder catalogObjectConnection_CatalogObjectConnectionBuilder0 = new CatalogObjectConnection.CatalogObjectConnectionBuilder();
      CatalogObjectConnection catalogObjectConnection0 = catalogObjectConnection_CatalogObjectConnectionBuilder0.build();
      catalogObjectConnection0.setPage((-56));
      catalogObjectConnection0.hashCode();
      assertEquals((-56), catalogObjectConnection0.getPage());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection();
      catalogObjectConnection0.setSize((-1179));
      catalogObjectConnection0.hashCode();
      assertEquals((-1179), catalogObjectConnection0.getSize());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CatalogObjectConnection catalogObjectConnection0 = new CatalogObjectConnection((List<CatalogObject>) null, 0, 1613, false, false, (-2135), 1613);
      catalogObjectConnection0.hashCode();
      assertEquals(0, catalogObjectConnection0.getPage());
      assertFalse(catalogObjectConnection0.isHasNext());
      assertEquals(1613, catalogObjectConnection0.getSize());
      assertEquals((-2135), catalogObjectConnection0.getTotalPage());
      assertEquals(1613, catalogObjectConnection0.getTotalCount());
  }
}
