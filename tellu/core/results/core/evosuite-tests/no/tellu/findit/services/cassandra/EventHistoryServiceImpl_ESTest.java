/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 25 08:46:43 GMT 2019
 */

package no.tellu.findit.services.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import no.tellu.findit.services.cassandra.Event;
import no.tellu.findit.services.cassandra.EventHistoryService;
import no.tellu.findit.services.cassandra.EventHistoryServiceImpl;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockUUID;

public class EventHistoryServiceImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      eventHistoryServiceImpl0.setTTL((Long) null);
      assertFalse(eventHistoryServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      boolean boolean0 = eventHistoryServiceImpl0.isConfigured();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      Event event0 = new Event();
      eventHistoryServiceImpl0.registerEvent(event0);
      assertNull(event0.getSubEvent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      UUID uUID0 = MockUUID.randomUUID();
      eventHistoryServiceImpl0.registerEvent((String) null, (String) null, (Long) null, (Long) null, (Date) null, (Long) null, (String) null, (String) null, (String) null, (String) null, uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      eventHistoryServiceImpl0.createEventTable((String) null);
      assertFalse(eventHistoryServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      eventHistoryServiceImpl0.clearKeyspace();
      assertFalse(eventHistoryServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      MockDate mockDate0 = new MockDate();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<Event> list0 = eventHistoryServiceImpl0.getEventsWithListOfObjectIds(linkedList0, mockDate0, mockDate0, "", (Long) null, linkedList0, "^X)OjW Bn4s.RcP`", hashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventHistoryService eventHistoryService0 = EventHistoryServiceImpl.getInstance();
      assertNotNull(eventHistoryService0);
      
      eventHistoryService0.configure("Keyspaces cleared: {}", "", (String) null, 46);
      assertTrue(eventHistoryService0.isConfigured());
      
      EventHistoryService eventHistoryService1 = EventHistoryServiceImpl.getInstance();
      assertTrue(eventHistoryService1.isConfigured());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      eventHistoryServiceImpl0.configure((String) null, (String) null, (String) null, 0);
      boolean boolean0 = eventHistoryServiceImpl0.isConfigured();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      MockDate mockDate0 = new MockDate(0L);
      MockDate mockDate1 = new MockDate(9, 4092, 1971);
      Long long0 = new Long(9);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<Event> list0 = eventHistoryServiceImpl0.getEvents(linkedList0, mockDate0, mockDate1, (String) null, (Long) null, long0, (String) null, map0);
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(long0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1L));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<Event> list0 = eventHistoryServiceImpl0.getEvents(linkedList0, (Date) null, (Date) null, "B<A|", long0, (Long) null, "Attempt to modify read-only DataNode", hashMap0);
      assertEquals(0, list0.size());
  }
}
