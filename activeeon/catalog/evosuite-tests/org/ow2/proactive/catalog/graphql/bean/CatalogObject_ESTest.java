/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 13:20:44 GMT 2019
 */

package org.ow2.proactive.catalog.graphql.bean;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.ow2.proactive.catalog.dto.Metadata;
import org.ow2.proactive.catalog.graphql.bean.CatalogObject;
import org.ow2.proactive.catalog.repository.entity.BucketEntity;
import org.ow2.proactive.catalog.repository.entity.CatalogObjectEntity;
import org.ow2.proactive.catalog.repository.entity.CatalogObjectRevisionEntity;
import org.ow2.proactive.catalog.repository.entity.KeyValueLabelMetadataEntity;

public class CatalogObject_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = Long.getLong(", name=", (-94L));
      CatalogObjectEntity.CatalogObjectEntityKey catalogObjectEntity_CatalogObjectEntityKey0 = new CatalogObjectEntity.CatalogObjectEntityKey();
      BucketEntity bucketEntity0 = new BucketEntity(", name=", "j^~<6.X:3|i");
      TreeSet<CatalogObjectRevisionEntity> treeSet0 = new TreeSet<CatalogObjectRevisionEntity>();
      CatalogObjectEntity catalogObjectEntity0 = new CatalogObjectEntity(catalogObjectEntity_CatalogObjectEntityKey0, bucketEntity0, "", "!Zu{IU#(;9Z?", "", treeSet0, 64L);
      Vector<KeyValueLabelMetadataEntity> vector0 = new Vector<KeyValueLabelMetadataEntity>();
      byte[] byteArray0 = new byte[9];
      CatalogObjectRevisionEntity catalogObjectRevisionEntity0 = new CatalogObjectRevisionEntity(long0, ", name=", "!Zu{IU#(;9Z?", 690L, catalogObjectEntity0, vector0, byteArray0);
      CatalogObject catalogObject0 = new CatalogObject(catalogObjectRevisionEntity0);
      assertEquals("!Zu{IU#(;9Z?", catalogObject0.getKind());
      assertEquals(690L, catalogObject0.getCommitDateTime());
      assertEquals(", name=", catalogObject0.getCommitMessage());
      assertEquals(", name=", catalogObject0.getBucketName());
      assertEquals("", catalogObject0.getContentType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      ArrayList<Metadata> arrayList0 = new ArrayList<Metadata>();
      catalogObject0.setMetadata(arrayList0);
      catalogObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      String string0 = catalogObject0.toString();
      assertEquals("CatalogObject(kind=null, bucketName=null, name=null, commitDateTime=0, contentType=null, commitMessage=null, metadata=null, link=null)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CatalogObjectEntity.CatalogObjectEntityKey catalogObjectEntity_CatalogObjectEntityKey0 = new CatalogObjectEntity.CatalogObjectEntityKey();
      BucketEntity bucketEntity0 = new BucketEntity();
      TreeSet<CatalogObjectRevisionEntity> treeSet0 = new TreeSet<CatalogObjectRevisionEntity>();
      CatalogObjectEntity catalogObjectEntity0 = new CatalogObjectEntity(catalogObjectEntity_CatalogObjectEntityKey0, bucketEntity0, "g/R6", "g/R6", "g/R6", treeSet0, (-1873L));
      CatalogObject catalogObject0 = null;
      try {
        catalogObject0 = new CatalogObject(catalogObjectEntity0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setName("org.apache.commons.io.filefilter.MagicNumberFileFilter");
      CatalogObject catalogObject1 = new CatalogObject();
      assertFalse(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject1.setName("org.apache.commons.io.filefilter.MagicNumberFileFilter");
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setKind("JO");
      catalogObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setBucketName("");
      catalogObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setName("Funnels.byteArrayFunnel()");
      catalogObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setContentType("9");
      catalogObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setCommitMessage("org.apache.commons.io.filefilter.RegexFileFilter");
      catalogObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setLink("CatalogObject(kind=null, bucketName=, name=Funnels.byteArrayFunnel(), commitDateTime=0, contentType=null, commitMessage=null, metadata=null, link=null)");
      catalogObject0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject0.setKind("");
      boolean boolean0 = catalogObject0.equals(catalogObject1);
      assertFalse(catalogObject1.equals((Object)catalogObject0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      boolean boolean0 = catalogObject0.equals("CatalogObject(kind=, bucketName=null, name=null, commitDateTime=0, contentType=null, commitMessage=null, metadata=null, link=null)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setKind(", contentType=");
      CatalogObject catalogObject1 = new CatalogObject();
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject1.setBucketName("");
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertFalse(catalogObject1.equals((Object)catalogObject0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject1.setBucketName("=B\n,RdsBx g8P\"2");
      boolean boolean0 = catalogObject0.equals(catalogObject1);
      assertFalse(catalogObject1.equals((Object)catalogObject0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<Metadata> vector0 = new Vector<Metadata>();
      CatalogObject catalogObject0 = new CatalogObject("", "", "NNTm", "NNTm", 1573L, "", vector0);
      assertEquals("NNTm", catalogObject0.getKind());
      
      catalogObject0.setKind("");
      LinkedList<Metadata> linkedList0 = new LinkedList<Metadata>();
      CatalogObject catalogObject1 = new CatalogObject("", "", "", "", (-1L), "", linkedList0);
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject1.setName("");
      boolean boolean0 = catalogObject0.equals(catalogObject1);
      assertFalse(catalogObject1.equals((Object)catalogObject0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject1.setName(", metadata=");
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertFalse(catalogObject1.equals((Object)catalogObject0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      catalogObject0.setKind("");
      catalogObject1.setKind("");
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject0.setContentType("CatalogObject(kind=, bucketName=null, name=null, commitDateTime=0, contentType=null, commitMessage=null, metadata=null, link=null)");
      boolean boolean0 = catalogObject0.equals(catalogObject1);
      assertFalse(catalogObject1.equals((Object)catalogObject0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject1.setContentType("}*rm");
      boolean boolean0 = catalogObject0.equals(catalogObject1);
      assertFalse(catalogObject1.equals((Object)catalogObject0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setContentType("SX^8U0CG{)]jQIP");
      CatalogObject catalogObject1 = new CatalogObject();
      assertFalse(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject1.setContentType("SX^8U0CG{)]jQIP");
      boolean boolean0 = catalogObject0.equals(catalogObject1);
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject0.setCommitMessage(", mHtadat]=");
      boolean boolean0 = catalogObject0.equals(catalogObject1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject0.setCommitMessage("");
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      catalogObject1.setCommitMessage(", mHtadat]=");
      assertFalse(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject0.setCommitMessage(", mHtadat]=");
      boolean boolean0 = catalogObject0.equals(catalogObject1);
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      ArrayList<Metadata> arrayList0 = new ArrayList<Metadata>();
      catalogObject1.setMetadata(arrayList0);
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      ArrayList<Metadata> arrayList0 = new ArrayList<Metadata>();
      catalogObject0.setMetadata(arrayList0);
      CatalogObject catalogObject1 = new CatalogObject();
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      LinkedList<Metadata> linkedList0 = new LinkedList<Metadata>();
      catalogObject0.setMetadata(linkedList0);
      assertFalse(catalogObject0.equals((Object)catalogObject1));
      
      Vector<Metadata> vector0 = new Vector<Metadata>();
      catalogObject1.setMetadata(vector0);
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertTrue(catalogObject0.equals((Object)catalogObject1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      assertTrue(catalogObject1.equals((Object)catalogObject0));
      
      catalogObject1.setLink("\")");
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setLink("");
      CatalogObject catalogObject1 = new CatalogObject();
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      catalogObject0.setLink("\")");
      assertFalse(catalogObject0.equals((Object)catalogObject1));
      
      catalogObject1.setLink("\")");
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertTrue(catalogObject0.equals((Object)catalogObject1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject("m!eH{Z[bcrxDh~a", "m!eH{Z[bcrxDh~a", "m!eH{Z[bcrxDh~a", "m!eH{Z[bcrxDh~a", 0L, "m!eH{Z[bcrxDh~a", (List<Metadata>) null);
      List<Metadata> list0 = catalogObject0.getMetadata();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      List<Metadata> list0 = catalogObject0.getMetadata();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      String string0 = catalogObject0.getKind();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      String string0 = catalogObject0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      String string0 = catalogObject0.getContentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      String string0 = catalogObject0.getLink();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      long long0 = catalogObject0.getCommitDateTime();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      String string0 = catalogObject0.getCommitMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      String string0 = catalogObject0.getBucketName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CatalogObjectEntity catalogObjectEntity0 = new CatalogObjectEntity();
      CatalogObject catalogObject0 = null;
      try {
        catalogObject0 = new CatalogObject(catalogObjectEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CatalogObjectRevisionEntity catalogObjectRevisionEntity0 = new CatalogObjectRevisionEntity();
      CatalogObject catalogObject0 = null;
      try {
        catalogObject0 = new CatalogObject(catalogObjectRevisionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      boolean boolean0 = catalogObject0.canEqual((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      boolean boolean0 = catalogObject0.canEqual(catalogObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector<Metadata> vector0 = new Vector<Metadata>();
      CatalogObject catalogObject0 = new CatalogObject("", "", "NNTm", "NNTm", 1573L, "", vector0);
      String string0 = catalogObject0.getBucketName();
      assertEquals(1573L, catalogObject0.getCommitDateTime());
      assertEquals("", catalogObject0.getName());
      assertEquals("NNTm", catalogObject0.getContentType());
      assertEquals("", catalogObject0.getCommitMessage());
      assertEquals("NNTm", catalogObject0.getKind());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject((String) null, "Funnel", ".,+V&$i", (String) null, 0L, ".,+V&$i", (List<Metadata>) null);
      catalogObject0.setBucketName("xjm+D]");
      catalogObject0.getBucketName();
      assertEquals("Funnel", catalogObject0.getName());
      assertEquals(".,+V&$i", catalogObject0.getKind());
      assertEquals(".,+V&$i", catalogObject0.getCommitMessage());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setCommitDateTime((-585L));
      long long0 = catalogObject0.getCommitDateTime();
      assertEquals((-585L), long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Stack<Metadata> stack0 = new Stack<Metadata>();
      CatalogObject catalogObject0 = new CatalogObject(")", ")", "", "", 1910L, ")", stack0);
      long long0 = catalogObject0.getCommitDateTime();
      assertEquals("", catalogObject0.getContentType());
      assertEquals("", catalogObject0.getKind());
      assertEquals(1910L, long0);
      assertEquals(")", catalogObject0.getBucketName());
      assertEquals(")", catalogObject0.getName());
      assertEquals(")", catalogObject0.getCommitMessage());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setCommitMessage("");
      String string0 = catalogObject0.getCommitMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setCommitMessage("b|MG CU#G^X 1");
      String string0 = catalogObject0.getCommitMessage();
      assertEquals("b|MG CU#G^X 1", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Stack<Metadata> stack0 = new Stack<Metadata>();
      CatalogObject catalogObject0 = new CatalogObject(")", ")", "", "", 1910L, ")", stack0);
      String string0 = catalogObject0.getContentType();
      assertEquals("", string0);
      assertEquals(")", catalogObject0.getName());
      assertEquals(")", catalogObject0.getCommitMessage());
      assertEquals(")", catalogObject0.getBucketName());
      assertEquals(1910L, catalogObject0.getCommitDateTime());
      assertEquals("", catalogObject0.getKind());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setContentType("u_Byi?Tt}#:{[uYt");
      String string0 = catalogObject0.getContentType();
      assertEquals("u_Byi?Tt}#:{[uYt", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Stack<Metadata> stack0 = new Stack<Metadata>();
      CatalogObject catalogObject0 = new CatalogObject(")", ")", "", "", 1910L, ")", stack0);
      String string0 = catalogObject0.getKind();
      assertEquals(")", catalogObject0.getBucketName());
      assertEquals(1910L, catalogObject0.getCommitDateTime());
      assertEquals(")", catalogObject0.getName());
      assertEquals("", catalogObject0.getContentType());
      assertEquals("", string0);
      assertEquals(")", catalogObject0.getCommitMessage());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject((String) null, "Funnel", ".,+V&$i", (String) null, 0L, ".,+V&$i", (List<Metadata>) null);
      String string0 = catalogObject0.getKind();
      assertEquals(".,+V&$i", string0);
      assertNotNull(string0);
      assertEquals(".,+V&$i", catalogObject0.getCommitMessage());
      assertEquals("Funnel", catalogObject0.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CatalogObjectEntity.CatalogObjectEntityKey catalogObjectEntity_CatalogObjectEntityKey0 = mock(CatalogObjectEntity.CatalogObjectEntityKey.class, new ViolatedAssumptionAnswer());
      doReturn(")").when(catalogObjectEntity_CatalogObjectEntityKey0).getName();
      BucketEntity bucketEntity0 = mock(BucketEntity.class, new ViolatedAssumptionAnswer());
      doReturn("|").when(bucketEntity0).getBucketName();
      TreeSet<CatalogObjectRevisionEntity> treeSet0 = new TreeSet<CatalogObjectRevisionEntity>();
      CatalogObjectEntity catalogObjectEntity0 = new CatalogObjectEntity(catalogObjectEntity_CatalogObjectEntityKey0, bucketEntity0, "z-OE", "z-OE", "O'UZs", treeSet0, 1L);
      CatalogObjectRevisionEntity catalogObjectRevisionEntity0 = new CatalogObjectRevisionEntity();
      treeSet0.add(catalogObjectRevisionEntity0);
      CatalogObject catalogObject0 = new CatalogObject(catalogObjectEntity0);
      catalogObject0.setLink("");
      catalogObject0.getLink();
      assertEquals("z-OE", catalogObject0.getContentType());
      assertEquals(")", catalogObject0.getName());
      assertEquals("|", catalogObject0.getBucketName());
      assertEquals("z-OE", catalogObject0.getKind());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setLink("CatalogObject(kind=null, bucketName=, name=Funnels.byteArrayFunnel(), commitDateTime=-929, contentType=null, commitMessage=null, metadata=null, link=null)");
      String string0 = catalogObject0.getLink();
      assertEquals("CatalogObject(kind=null, bucketName=, name=Funnels.byteArrayFunnel(), commitDateTime=-929, contentType=null, commitMessage=null, metadata=null, link=null)", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector<Metadata> vector0 = new Vector<Metadata>();
      Metadata metadata0 = new Metadata();
      vector0.add(metadata0);
      CatalogObject catalogObject0 = new CatalogObject(",N]Z6:4^|e", ",N]Z6:4^|e", ",N]Z6:4^|e", ",N]Z6:4^|e", 1093L, ",N]Z6:4^|e", vector0);
      List<Metadata> list0 = catalogObject0.getMetadata();
      assertTrue(list0.contains(metadata0));
      assertEquals(1093L, catalogObject0.getCommitDateTime());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setName("");
      String string0 = catalogObject0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject((String) null, "Funnel", ".,+V&$i", (String) null, 0L, ".,+V&$i", (List<Metadata>) null);
      String string0 = catalogObject0.getName();
      assertEquals("Funnel", string0);
      assertEquals(".,+V&$i", catalogObject0.getKind());
      assertEquals(".,+V&$i", catalogObject0.getCommitMessage());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      boolean boolean0 = catalogObject0.equals(catalogObject0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      CatalogObject catalogObject1 = new CatalogObject();
      catalogObject1.setCommitDateTime(1079L);
      boolean boolean0 = catalogObject1.equals(catalogObject0);
      assertEquals(1079L, catalogObject1.getCommitDateTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CatalogObject catalogObject0 = new CatalogObject();
      catalogObject0.setCommitDateTime((-2045L));
      catalogObject0.hashCode();
  }
}
