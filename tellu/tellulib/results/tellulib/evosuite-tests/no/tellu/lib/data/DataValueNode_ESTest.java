/*
 * This file was automatically generated by EvoSuite
 * Tue Sep 24 11:10:53 GMT 2019
 */

package no.tellu.lib.data;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import no.tellu.lib.data.BooleanOp;
import no.tellu.lib.data.DataNode;
import no.tellu.lib.data.DataPredicate;
import no.tellu.lib.data.DataValueNode;
import no.tellu.lib.data.MetaGroupNode;
import no.tellu.lib.data.MetaItemNode;
import no.tellu.lib.data.MetaNode;
import no.tellu.lib.data.MetaNumberNode;
import no.tellu.lib.data.SetDefaultTrav;
import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class DataValueNode_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("PxYf]k", "PxYf]k");
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.INTEGER;
      MetaItemNode metaItemNode0 = new MetaItemNode("\"", metaItemNode_DataType0);
      dataValueNode0.meta = metaItemNode0;
      BooleanOp booleanOp0 = BooleanOp.Less;
      // Undeclared exception!
      try { 
        dataValueNode0.evaluate(booleanOp0, "PxYf]k");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode((String) null, (Object) null);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      SetDefaultTrav setDefaultTrav0 = new SetDefaultTrav();
      dataValueNode0.process(setDefaultTrav0);
      assertFalse(dataValueNode0.isModified());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      MetaNode metaNode0 = dataValueNode0.getMetaNode();
      assertFalse(metaNode0.isRequired());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaItemNode metaItemNode0 = new MetaItemNode("ENUM$VALUES", metaItemNode_DataType0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      String string0 = dataValueNode0.toString();
      assertEquals("ENUM$VALUES=null", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("a(kg", "a(kg");
      Object object0 = dataValueNode0.getValue();
      assertEquals("a(kg", object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      Long long0 = new Long(1L);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("y[*\"~.:z`>", metaItemNode_DataType0, long0, 281, 281, false);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      MetaItemNode metaItemNode0 = dataValueNode0.getMetaItem();
      assertEquals(MetaItemNode.DataType.DOUBLE, metaItemNode0.getDataType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Object object0 = new Object();
      MetaItemNode metaItemNode0 = new MetaItemNode("('IvSxY;(AX", object0);
      Long long0 = new Long((-1L));
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0, long0);
      try { 
        dataValueNode0.getString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaItemNode metaItemNode0 = new MetaItemNode("~o&b~MjpdASrq9gL", metaItemNode_DataType0);
      DataValueNode dataValueNode0 = null;
      try {
        dataValueNode0 = new DataValueNode(metaItemNode0, "~o&b~MjpdASrq9gL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data type is incompatible
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = null;
      try {
        dataValueNode0 = new DataValueNode(metaItemNode0, metaItemNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data type is incompatible
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("y7");
      boolean boolean0 = dataValueNode0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.BOOLEAN;
      MetaItemNode metaItemNode0 = new MetaItemNode("no.tellu.lib.data.DataValueNode", metaItemNode_DataType0, metaItemNode_DataType0, 2, 2, true);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      // Undeclared exception!
      try { 
        dataValueNode0.cloneNode(">", true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data type is incompatible
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode((String) null, (Object) null);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      DataNode dataNode0 = dataValueNode0.cloneNode((String) null, true, true);
      assertNotSame(dataNode0, dataValueNode0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaItemNode metaItemNode0 = new MetaItemNode("ENUM$VALUES", metaItemNode_DataType0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      DataPredicate dataPredicate0 = new DataPredicate("ENUM$VALUES");
      boolean boolean0 = dataValueNode0.contains(dataPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode(">v-bqkKV^O6CjI2", ">v-bqkKV^O6CjI2");
      DataPredicate dataPredicate0 = new DataPredicate(">v-bqkKV^O6CjI2");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      // Undeclared exception!
      try { 
        dataValueNode0.contains(dataPredicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DateItem >v-bqkKV^O6CjI2doesn't support operation Greater on Strings
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DataPredicate dataPredicate0 = new DataPredicate("ytE[*\"~.:z{K>n");
      DataValueNode dataValueNode0 = new DataValueNode("ytE[*\"~.:z{K>n");
      boolean boolean0 = dataValueNode0.contains(dataPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("fMH2$W$");
      DataValueNode dataValueNode1 = dataValueNode0.getValueNode("fMH2$W$");
      assertNull(dataValueNode1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(")@%$K*'/");
      DataValueNode dataValueNode1 = dataValueNode0.getValueNode((String) null);
      assertSame(dataValueNode0, dataValueNode1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("");
      Boolean boolean0 = Boolean.FALSE;
      dataValueNode0.setValue(boolean0);
      boolean boolean1 = dataValueNode0.getBoolean();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(">v-bqkxKV^O6CI2");
      try { 
        dataValueNode0.getBoolean();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Integer integer0 = new Integer(6);
      MetaItemNode metaItemNode0 = new MetaItemNode("no.tellu.lib.data.DataNotFoundException", integer0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      try { 
        dataValueNode0.getBoolean();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = new Object();
      MetaItemNode metaItemNode0 = new MetaItemNode("]", object0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      try { 
        dataValueNode0.getBoolean();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      MetaItemNode metaItemNode0 = new MetaItemNode(",STD", boolean0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      boolean boolean1 = dataValueNode0.getBoolean();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      boolean boolean0 = dataValueNode0.getBoolean(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Short short0 = new Short((short)1013);
      DataValueNode dataValueNode0 = new DataValueNode("]", short0);
      boolean boolean0 = dataValueNode0.getBoolean(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf((String) null);
      MetaItemNode metaItemNode0 = new MetaItemNode("-'2rf:S85^9;NHP0h", boolean0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      boolean boolean1 = dataValueNode0.getBoolean(true);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Byte byte0 = new Byte((byte)60);
      MetaItemNode metaItemNode0 = new MetaItemNode("Incompatible meta data", byte0, (byte)60);
      Boolean boolean0 = Boolean.FALSE;
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0, boolean0);
      boolean boolean1 = dataValueNode0.getBoolean(false);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("Q", "Q");
      try { 
        dataValueNode0.getInt();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.LONG;
      MetaItemNode metaItemNode0 = new MetaItemNode((String) null, metaItemNode_DataType0, (Object) null, (-662), (-3592), true);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0, (Object) null);
      try { 
        dataValueNode0.getInt();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("@.&?=;gY4}", "@.&?=;gY4}");
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("@.&?=;gY4}", metaItemNode_DataType0);
      dataValueNode0.meta = (MetaItemNode) metaNumberNode0;
      // Undeclared exception!
      try { 
        dataValueNode0.getInt();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-59));
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("", byte0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      int int0 = dataValueNode0.getInt();
      assertEquals((-59), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("I", "I");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      try { 
        dataValueNode0.getInt();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      int int0 = dataValueNode0.getInt(1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("*");
      int int0 = dataValueNode0.getInt(1179);
      assertEquals(1179, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Short short0 = new Short((short)1013);
      DataValueNode dataValueNode0 = new DataValueNode("]", short0);
      int int0 = dataValueNode0.getInt(1);
      assertEquals(1013, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-59));
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("", byte0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      int int0 = dataValueNode0.getInt((-1416));
      assertEquals((-59), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Long long0 = new Long(0L);
      MetaItemNode metaItemNode0 = new MetaItemNode("B'pmuG;Vf?n", long0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      int int0 = dataValueNode0.getInt(66);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("\"n[JnHCe_x['%i");
      dataValueNode0.setValue((Object) dataValueNode0, true);
      int int0 = dataValueNode0.getInt((-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("", "k");
      // Undeclared exception!
      try { 
        dataValueNode0.getInt(554);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode((String) null);
      try { 
        dataValueNode0.getLong();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Short short0 = new Short((short)897);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("Attempt to set group in value node", short0, 0.0, 0.0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      long long0 = dataValueNode0.getLong();
      assertEquals(897L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.FLOAT;
      Short short0 = new Short((short)897);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("Attempt to set group in value node", short0, 0.0, 0.0);
      MetaNumberNode metaNumberNode1 = new MetaNumberNode("Attempt to set group in value node", metaItemNode_DataType0, metaNumberNode0, 2, 0, true);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode1);
      // Undeclared exception!
      try { 
        dataValueNode0.getLong();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no.tellu.lib.data.MetaNumberNode cannot be cast to java.lang.Number
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      try { 
        dataValueNode0.getLong();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("", "");
      try { 
        dataValueNode0.getLong();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(":eH&Ah~*3lu");
      long long0 = dataValueNode0.getLong((long) 6);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Short short0 = new Short((short)1221);
      MetaItemNode metaItemNode0 = new MetaItemNode("hV", short0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      long long0 = dataValueNode0.getLong((long) 1);
      assertEquals(1221L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer(6);
      MetaItemNode metaItemNode0 = new MetaItemNode("no.tellu.lib.data.DataNotFoundException", integer0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      long long0 = dataValueNode0.getLong((long) 6);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      long long0 = dataValueNode0.getLong(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long((-5749L));
      DataValueNode dataValueNode0 = new DataValueNode("Can't change name of node which has MetaNoKe", long0);
      float float0 = dataValueNode0.getFloat();
      assertEquals((-5749.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("");
      try { 
        dataValueNode0.getFloat();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("#O^9o7", "#O^9o7");
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("Can't modify DataNode directly", dataValueNode0, (-513));
      dataValueNode0.meta = (MetaItemNode) metaNumberNode0;
      try { 
        dataValueNode0.getFloat();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      try { 
        dataValueNode0.getFloat();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long(0L);
      MetaItemNode metaItemNode0 = new MetaItemNode("B'pmuG;Vf?n", long0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      float float0 = dataValueNode0.getFloat();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(",STD", ",STD");
      float float0 = dataValueNode0.getFloat((float) (-943));
      assertEquals((-943.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(":eH&Ah~*3lu");
      float float0 = dataValueNode0.getFloat((float) 6);
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      float float0 = dataValueNode0.getFloat((float) 1);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Short short0 = new Short((short)204);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("]", short0, (-1));
      Long long0 = new Long((-1813));
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0, long0);
      float float0 = dataValueNode0.getFloat(0.0F);
      assertEquals((-1813.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float(0.0);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode((String) null, float0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      float float1 = dataValueNode0.getFloat((float) 0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-59));
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("", byte0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      double double0 = dataValueNode0.getDouble();
      assertEquals((-59.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode((String) null);
      try { 
        dataValueNode0.getDouble();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(0.0F);
      DataValueNode dataValueNode0 = new DataValueNode("Cant change name of node which has etaNode", float0);
      double double0 = dataValueNode0.getDouble();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("Data type is incompatible", metaItemNode_DataType0, "Data type is incompatible", 1418, 0, false);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      // Undeclared exception!
      try { 
        dataValueNode0.getDouble();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("a(kg", "a(kg");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      try { 
        dataValueNode0.getDouble();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("", "");
      try { 
        dataValueNode0.getDouble();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      double double0 = dataValueNode0.getDouble((-3692.2527004125));
      assertEquals((-3692.2527004125), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("3:da.k{#<[>q", byte0, 2150);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      double double0 = dataValueNode0.getDouble((double) (byte)2);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = new Float(0.0);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode((String) null, float0);
      Short short0 = new Short((short)1);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0, short0);
      double double0 = dataValueNode0.getDouble(1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      DataValueNode dataValueNode0 = new DataValueNode("0", boolean0);
      double double0 = dataValueNode0.getDouble(428.36363053352);
      assertEquals(428.36363053352, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(":eH&Ah~*3lu");
      String string0 = dataValueNode0.getString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("u", "u");
      String string0 = dataValueNode0.getString();
      assertEquals("u", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = new Long((-503L));
      MetaItemNode metaItemNode0 = new MetaItemNode("Can't add DataNode which has meta-data", long0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      try { 
        dataValueNode0.getString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("i|@](}*6", "i|@](}*6");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0, (Object) null);
      dataValueNode0.setValue((Object) "", true);
      String string0 = dataValueNode0.getString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(":eH&Ah~*3lu");
      String string0 = dataValueNode0.getString(":eH&Ah~*3lu");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BooleanOp booleanOp0 = BooleanOp.NotEquals;
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("\"n[JnHCe_x['%i", booleanOp0);
      Short short0 = new Short((short) (-1515));
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0, short0);
      String string0 = dataValueNode0.getString("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = new Double(0L);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("Data type is incompatible", double0, 391);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      String string0 = dataValueNode0.getString("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.STRING;
      boolean boolean0 = dataValueNode0.equalsValue(metaItemNode_DataType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(",STD", ",STD");
      boolean boolean0 = dataValueNode0.equalsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.INTEGER;
      MetaNumberNode metaNumberNode0 = new MetaNumberNode((String) null, metaItemNode_DataType0, (Object) null, 0, 0, true);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      boolean boolean0 = dataValueNode0.equalsValue(metaNumberNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode((String) null, (Object) null);
      DataNode dataNode0 = dataValueNode0.cloneNode((String) null, true, true);
      assertNotSame(dataNode0, dataValueNode0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("W[*\"_Uz`>");
      MetaItemNode metaItemNode0 = new MetaItemNode("no.tellu.lib.data.DataValueNode", "no.tellu.lib.data.DataValueNode");
      dataValueNode0.setMetaImpl(metaItemNode0);
      assertEquals(1, MetaNode.CARD_ONE);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("@.&?=;gY4d_}", "@.&?=;gY4d_}");
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.STRING;
      MetaItemNode metaItemNode0 = new MetaItemNode("@.&?=;gY4d_}", metaItemNode_DataType0, metaItemNode_DataType0, (-1889), (-1889), true);
      dataValueNode0.setMetaNode(metaItemNode0);
      assertTrue(metaItemNode0.isRequired());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      BooleanOp booleanOp0 = BooleanOp.NotEquals;
      boolean boolean0 = dataValueNode0.evaluate(booleanOp0, "Attempt to modify read-only DataNode");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.FLOAT;
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("g", metaItemNode_DataType0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      BooleanOp booleanOp0 = BooleanOp.NotEquals;
      Double double0 = new Double((-1861.0666439));
      // Undeclared exception!
      try { 
        dataValueNode0.evaluate(booleanOp0, double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DateItem gdoesn't support operation NotEquals
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BooleanOp booleanOp0 = BooleanOp.NotEquals;
      Double double0 = new Double((-1155.9));
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("hV", booleanOp0);
      Short short0 = new Short((short) (-1515));
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0, short0);
      boolean boolean0 = dataValueNode0.evaluate(booleanOp0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("");
      BooleanOp booleanOp0 = BooleanOp.Less;
      // Undeclared exception!
      try { 
        dataValueNode0.evaluate(booleanOp0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-59));
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("", byte0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      BooleanOp booleanOp0 = BooleanOp.Less;
      // Undeclared exception!
      try { 
        dataValueNode0.evaluate(booleanOp0, "]");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DateItem doesn't support operation Less on Strings
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaItemNode metaItemNode0 = new MetaItemNode("ENUM$VALUES", metaItemNode_DataType0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      BooleanOp booleanOp0 = BooleanOp.Greater;
      // Undeclared exception!
      try { 
        dataValueNode0.evaluate(booleanOp0, "ENUM$VALUES");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // DateItem ENUM$VALUESdoesn't support operation Greater on Strings
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      BooleanOp booleanOp0 = BooleanOp.NotEquals;
      boolean boolean0 = dataValueNode0.evaluate(booleanOp0, "]");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.STRING;
      MetaItemNode metaItemNode0 = new MetaItemNode("doesn't support operation ", metaItemNode_DataType0, "]", 1, 2, true);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        dataValueNode0.setValue(object0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Attempt to modify read-only DataNode
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaItemNode metaItemNode0 = new MetaItemNode("[!zZKa\"H`%ii~Ol", metaItemNode_DataType0, (Object) null, 2, 4360, true);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      Double double0 = new Double(0);
      dataValueNode0.setValue((Object) double0, true);
      assertEquals("[!zZKa\"H`%ii~Ol", dataValueNode0.getName());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      Byte byte0 = Byte.valueOf((byte)1);
      dataValueNode0.setValue((Object) byte0, false);
      assertEquals("]", dataValueNode0.getName());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.INTEGER;
      MetaItemNode metaItemNode0 = new MetaItemNode("l", metaItemNode_DataType0, "l", (-73), (-73), true);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      SetDefaultTrav setDefaultTrav0 = new SetDefaultTrav();
      // Undeclared exception!
      try { 
        dataValueNode0.process(setDefaultTrav0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data type is incompatible
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      Long long0 = new Long(1L);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("y[*\"~.:z`>", metaItemNode_DataType0, long0, 281, 281, false);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        dataValueNode0.setValue(object0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data type is incompatible
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BooleanOp booleanOp0 = BooleanOp.NotEquals;
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("\"n[JnHCe_x['%i", booleanOp0);
      Short short0 = new Short((short) (-1515));
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0, short0);
      dataValueNode0.setValue((Object) short0, true);
      assertFalse(dataValueNode0.isModified());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode((String) null);
      boolean boolean0 = dataValueNode0.equalsValue((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaItemNode metaItemNode0 = new MetaItemNode("ENUM$VALUES", metaItemNode_DataType0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      dataValueNode0.setValue((Object) null, false);
      assertFalse(dataValueNode0.isModified());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("DateItem ", metaItemNode_DataType0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      // Undeclared exception!
      try { 
        dataValueNode0.setValue((Object) "DateItem ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data type is incompatible
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("ENUM$VALUES", "ENUM$VALUES");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      dataValueNode0.setValue((Object) null, false);
      assertTrue(dataValueNode0.isModified());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DataValueNode dataValueNode0 = null;
      try {
        dataValueNode0 = new DataValueNode((MetaItemNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DataValueNode dataValueNode0 = null;
      try {
        dataValueNode0 = new DataValueNode((MetaItemNode) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(",STD", ",STD");
      // Undeclared exception!
      try { 
        dataValueNode0.contains((DataPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double(0.0);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("E", double0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0, double0);
      BooleanOp booleanOp0 = BooleanOp.Equals;
      // Undeclared exception!
      try { 
        dataValueNode0.evaluate(booleanOp0, "\"n[JnHCe_x['%i");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Number
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BooleanOp booleanOp0 = BooleanOp.NotEquals;
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("\"n[JnHCe_x['%i", booleanOp0);
      Short short0 = new Short((short) (-1515));
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0, short0);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        dataValueNode0.evaluate((BooleanOp) null, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(">", ">");
      MetaNumberNode metaNumberNode0 = new MetaNumberNode(">", dataValueNode0, (-1813));
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaItemNode metaItemNode0 = new MetaItemNode("hV", metaItemNode_DataType0);
      DataValueNode dataValueNode1 = new DataValueNode(metaNumberNode0);
      dataValueNode1.meta = metaItemNode0;
      // Undeclared exception!
      try { 
        dataValueNode1.getFloat();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no.tellu.lib.data.DataValueNode cannot be cast to java.lang.Number
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.STRING;
      MetaItemNode metaItemNode0 = new MetaItemNode("@w['=L}cS+F)ARu+1<}", metaItemNode_DataType0, metaItemNode_DataType0, 821, 821, true);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      // Undeclared exception!
      try { 
        dataValueNode0.getString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no.tellu.lib.data.MetaItemNode$DataType$6 cannot be cast to java.lang.String
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = new Object();
      MetaNumberNode metaNumberNode0 = new MetaNumberNode((String) null, object0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      // Undeclared exception!
      try { 
        dataValueNode0.isValid();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Number
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("", "");
      // Undeclared exception!
      try { 
        dataValueNode0.process((DataNode.Traverser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(">v-bqkKV^O6CjI2", ">v-bqkKV^O6CjI2");
      MetaGroupNode metaGroupNode0 = new MetaGroupNode(">v-bqkKV^O6CjI2");
      // Undeclared exception!
      try { 
        dataValueNode0.setMetaImpl(metaGroupNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Attempt to set group in value node
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("a(kg", "a(kg");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      // Undeclared exception!
      try { 
        dataValueNode0.setValue(metaItemNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Data type is incompatible
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("", "");
      Boolean boolean0 = Boolean.TRUE;
      BooleanOp booleanOp0 = BooleanOp.Equals;
      boolean boolean1 = dataValueNode0.evaluate(booleanOp0, boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("]", "]");
      BooleanOp booleanOp0 = BooleanOp.Equals;
      boolean boolean0 = dataValueNode0.evaluate(booleanOp0, "]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Short short0 = new Short((short)204);
      DataValueNode dataValueNode0 = new DataValueNode("r0a!", short0);
      double double0 = dataValueNode0.getDouble();
      assertEquals(204.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("*1%Jnw[z&j6r@W:aCA");
      double double0 = dataValueNode0.getDouble((double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer(6);
      DataValueNode dataValueNode0 = new DataValueNode("OiAAA9|g56sUq)ZhuO", integer0);
      float float0 = dataValueNode0.getFloat();
      assertEquals(6.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = new Float(115.0);
      DataValueNode dataValueNode0 = new DataValueNode("{sJl#uq", float0);
      int int0 = dataValueNode0.getInt();
      assertEquals(115, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float(0.0);
      MetaNumberNode metaNumberNode0 = new MetaNumberNode((String) null, float0);
      Short short0 = new Short((short)1);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0, short0);
      dataValueNode0.setValue(float0);
      int int0 = dataValueNode0.getInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-59));
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("", byte0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      long long0 = dataValueNode0.getLong();
      assertEquals((-59L), long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.INTEGER;
      MetaItemNode metaItemNode0 = new MetaItemNode("\"", metaItemNode_DataType0);
      Double double0 = new Double(0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0, double0);
      long long0 = dataValueNode0.getLong();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("false", "false");
      long long0 = dataValueNode0.getLong((-1028L));
      assertEquals((-1028L), long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("i|@](}*6", "i|@](}*6");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      long long0 = dataValueNode0.getLong((long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.FLOAT;
      Short short0 = new Short((short) (-1683));
      MetaItemNode metaItemNode0 = new MetaItemNode("v#e@4r5sxTRk", metaItemNode_DataType0, short0, (-1789569704), (-1789569704), true);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      MetaItemNode metaItemNode1 = dataValueNode0.getMetaItem();
      assertSame(metaItemNode1, metaItemNode0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MetaItemNode metaItemNode0 = new MetaItemNode("]", "]");
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      MetaItemNode metaItemNode1 = dataValueNode0.getMetaItem();
      assertEquals(3, MetaNode.CARD_ONE_OR_MORE);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.DOUBLE;
      MetaItemNode metaItemNode0 = new MetaItemNode("[!zZKa\"H`%ii~O/l", metaItemNode_DataType0, (Object) null, 2, 4360, true);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      MetaItemNode metaItemNode1 = dataValueNode0.getMetaItem();
      assertEquals(3, MetaNode.CARD_ONE_OR_MORE);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(" on Strings");
      MetaItemNode metaItemNode0 = dataValueNode0.getMetaItem();
      assertNull(metaItemNode0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.LONG;
      MetaItemNode metaItemNode0 = new MetaItemNode((String) null, metaItemNode_DataType0, (Object) null, (-662), (-3592), true);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0, (Object) null);
      MetaNode metaNode0 = dataValueNode0.getMetaNode();
      assertEquals(1, MetaNode.CARD_ONE);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.STRING;
      MetaItemNode metaItemNode0 = new MetaItemNode("doesn't support operation ", metaItemNode_DataType0, "]", 1, 2, false);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      MetaNode metaNode0 = dataValueNode0.getMetaNode();
      assertEquals(2, MetaNode.CARD_ZERO_OR_MORE);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("47O[$eHp");
      MetaNode metaNode0 = dataValueNode0.getMetaNode();
      assertNull(metaNode0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode("]", "");
      String string0 = dataValueNode0.getString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(">", ">");
      String string0 = dataValueNode0.getString("G");
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.BOOLEAN;
      MetaItemNode metaItemNode0 = new MetaItemNode("", metaItemNode_DataType0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      Object object0 = dataValueNode0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DataValueNode dataValueNode0 = new DataValueNode(")@%$K*'/");
      Object object0 = new Object();
      MetaNumberNode metaNumberNode0 = new MetaNumberNode((String) null, object0, 0.0, 2882.18363);
      dataValueNode0.setValue((Object) metaNumberNode0, false);
      DataValueNode dataValueNode1 = dataValueNode0.getValueNode((String) null);
      assertSame(dataValueNode0, dataValueNode1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MetaItemNode metaItemNode0 = mock(MetaItemNode.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(metaItemNode0).isValid(any());
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      boolean boolean0 = dataValueNode0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = new Integer(6);
      DataValueNode dataValueNode0 = new DataValueNode("OiAAA9|g56sUq)ZhuO", integer0);
      DataNode dataNode0 = dataValueNode0.cloneNode("", true, false);
      assertEquals("", dataNode0.getName());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MetaItemNode.DataType metaItemNode_DataType0 = MetaItemNode.DataType.LONG;
      MetaItemNode metaItemNode0 = new MetaItemNode("no.tellu.lib.data.DataValueNode", metaItemNode_DataType0);
      DataValueNode dataValueNode0 = new DataValueNode(metaItemNode0);
      dataValueNode0.modified = true;
      boolean boolean0 = dataValueNode0.getBoolean(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-59));
      MetaNumberNode metaNumberNode0 = new MetaNumberNode("", byte0);
      DataValueNode dataValueNode0 = new DataValueNode(metaNumberNode0);
      boolean boolean0 = dataValueNode0.getBoolean(true);
      assertTrue(boolean0);
  }
}
