<?xml version="1.0"?><ts><start>s0</start><states><state id="s3"><transition target="s3" action="java.util.Map.put(java.lang.Object,java.lang.Object)" proba="0.3125"></transition><transition target="s4" action="java.util.Map.putIfAbsent(java.lang.Object,java.lang.Object)" proba="0.0625"></transition><transition target="s13" action="java.util.Map.isEmpty()" proba="0.0625"></transition><transition target="sX" action="epsilon" proba="0.5625"></transition></state><state id="s4"><transition target="s3" action="java.util.Map.put(java.lang.Object,java.lang.Object)" proba="0.1"></transition><transition target="sX" action="epsilon" proba="0.9"></transition></state><state id="s5"><transition target="s10" action="java.util.Map.parallelStream()" proba="0.2222222222222222"></transition><transition target="sX" action="epsilon" proba="0.7777777777777778"></transition></state><state id="s6"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s7"><transition target="sX" action="epsilon" proba="0.5"></transition><transition target="s12" action="java.util.Map.iterator()" proba="0.5"></transition></state><state id="sX"><transition target="s0" action="epsilon" proba="1.0"></transition></state><state id="s8"><transition target="s8" action="java.util.Map.containsKey(java.lang.Object)" proba="0.5"></transition><transition target="sX" action="epsilon" proba="0.5"></transition></state><state id="s9"><transition target="s5" action="java.util.Map.keySet()" proba="0.25"></transition><transition target="sX" action="epsilon" proba="0.75"></transition></state><state id="s11"><transition target="s9" action="java.util.Map.clear()" proba="1.0"></transition></state><state id="s10"><transition target="s11" action="java.util.Map.anyMatch(java.util.function.Predicate)" proba="1.0"></transition></state><state id="s13"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s12"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s15"><transition target="sX" action="epsilon" proba="1.0"></transition></state><state id="s14"><transition target="s7" action="java.util.Map.entrySet()" proba="1.0"></transition></state><state id="s0"><transition target="s3" action="java.util.Map.put(java.lang.Object,java.lang.Object)" proba="0.15254237288135594"></transition><transition target="s4" action="java.util.Map.putIfAbsent(java.lang.Object,java.lang.Object)" proba="0.11864406779661017"></transition><transition target="s5" action="java.util.Map.keySet()" proba="0.05084745762711865"></transition><transition target="s6" action="java.util.Map.remove(java.lang.Object)" proba="0.05084745762711865"></transition><transition target="s7" action="java.util.Map.entrySet()" proba="0.05084745762711865"></transition><transition target="s8" action="java.util.Map.containsKey(java.lang.Object)" proba="0.03389830508474576"></transition><transition target="s9" action="java.util.Map.clear()" proba="0.03389830508474576"></transition><transition target="s15" action="java.util.Map.values()" proba="0.01694915254237288"></transition><transition target="s14" action="java.util.Map.size()" proba="0.01694915254237288"></transition><transition target="s1" action="java.util.Map.get(java.lang.Object)" proba="0.4406779661016949"></transition><transition target="s2" action="java.util.Map.forEach(java.util.function.BiConsumer)" proba="0.03389830508474576"></transition></state><state id="s1"><transition target="s3" action="java.util.Map.put(java.lang.Object,java.lang.Object)" proba="0.038461538461538464"></transition><transition target="s4" action="java.util.Map.putIfAbsent(java.lang.Object,java.lang.Object)" proba="0.07692307692307693"></transition><transition target="s5" action="java.util.Map.keySet()" proba="0.19230769230769232"></transition><transition target="sX" action="epsilon" proba="0.6923076923076923"></transition></state><state id="s2"><transition target="sX" action="epsilon" proba="1.0"></transition></state></states></ts>