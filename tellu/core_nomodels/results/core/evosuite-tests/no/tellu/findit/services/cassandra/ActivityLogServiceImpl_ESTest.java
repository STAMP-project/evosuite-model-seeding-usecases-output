/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 21 07:46:19 GMT 2019
 */

package no.tellu.findit.services.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import no.tellu.findit.services.cassandra.ActivityLogItem;
import no.tellu.findit.services.cassandra.ActivityLogKey;
import no.tellu.findit.services.cassandra.ActivityLogServiceImpl;
import no.tellu.findit.util.TinyDomainObject;
import org.evosuite.runtime.mock.java.util.MockDate;

public class ActivityLogServiceImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      boolean boolean0 = activityLogServiceImpl0.isConfigured();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = new Long(1L);
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      ActivityLogKey activityLogKey0 = ActivityLogKey.HTTP_POST;
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log(long0, long0, (TinyDomainObject) null, (TinyDomainObject) null, (List<TinyDomainObject>) linkedList0, activityLogKey0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      activityLogServiceImpl0.setTTL((Long) null);
      assertFalse(activityLogServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(map0);
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log((Long) null, (Long) null, (TinyDomainObject) null, (TinyDomainObject) null, (List<TinyDomainObject>) linkedList0, hashMap0, "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      String[] stringArray0 = new String[2];
      Long long0 = new Long(0L);
      ActivityLogItem activityLogItem0 = activityLogServiceImpl0.log((Long) null, long0, (TinyDomainObject) null, (TinyDomainObject) null, (List<TinyDomainObject>) null, (String) null, stringArray0);
      assertNull(activityLogItem0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      MockDate mockDate0 = new MockDate();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<ActivityLogItem> list0 = activityLogServiceImpl0.getActivityLogs((Long) null, (Long) null, (Date) mockDate0, (Date) mockDate0, (String) null, map0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      MockDate mockDate0 = new MockDate();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<ActivityLogItem> list0 = activityLogServiceImpl0.getActivityLogs((Long) null, (Long) null, (Date) mockDate0, (Date) mockDate0, (String) null, (Long) null, (String) null, (Long) null, (String) null, map0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      activityLogServiceImpl0.createEventTable((String) null);
      assertFalse(activityLogServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      activityLogServiceImpl0.clearKeyspace();
      assertFalse(activityLogServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = new Long((-11L));
      Class<ActivityLogItem> class0 = ActivityLogItem.class;
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, (Long) null, "^q5RD8T5a", "");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log(long0, long0, tinyDomainObject0, tinyDomainObject0, (List<TinyDomainObject>) null, hashMap0, " ALLOW FILTERING;", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = Long.getLong((String) null);
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      Long long1 = new Long((-447L));
      Class<ActivityLogItem> class0 = ActivityLogItem.class;
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, long0, "", (String) null);
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log(long1, (Long) null, (TinyDomainObject) null, tinyDomainObject0, (List<TinyDomainObject>) linkedList0, (HashMap<String, String>) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = new ActivityLogServiceImpl();
      String[] stringArray0 = new String[10];
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      linkedList0.add((TinyDomainObject) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log((Long) null, (Long) null, (TinyDomainObject) null, (TinyDomainObject) null, (List<TinyDomainObject>) linkedList0, hashMap0, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = new Long((-3100L));
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      String[] stringArray0 = new String[2];
      ActivityLogItem activityLogItem0 = activityLogServiceImpl0.log(long0, long0, (TinyDomainObject) null, (TinyDomainObject) null, (List<TinyDomainObject>) linkedList0, (HashMap<String, String>) null, "Connected to cluster: %s\n", stringArray0);
      assertNull(activityLogItem0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = new Long((-1L));
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      String[] stringArray0 = new String[8];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ActivityLogItem activityLogItem0 = activityLogServiceImpl0.log((Long) null, long0, (TinyDomainObject) null, (TinyDomainObject) null, (List<TinyDomainObject>) linkedList0, hashMap0, "", stringArray0);
      assertNull(activityLogItem0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ActivityLogServiceImpl activityLogServiceImpl0 = new ActivityLogServiceImpl();
      Long long0 = new Long(0L);
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "M");
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log(long0, long0, (TinyDomainObject) null, (TinyDomainObject) null, (List<TinyDomainObject>) linkedList0, hashMap0, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key == null
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = new ActivityLogServiceImpl();
      Long long0 = new Long(1492L);
      Class<ActivityLogServiceImpl> class0 = ActivityLogServiceImpl.class;
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, long0, (String) null, (String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log(long0, long0, tinyDomainObject0, tinyDomainObject0, (List<TinyDomainObject>) null, hashMap0, (String) null, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown object type: no.tellu.findit.services.cassandra.ActivityLogServiceImpl
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, (Long) null, (String) null, (String) null);
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      ActivityLogKey activityLogKey0 = ActivityLogKey.RULE_ENGINE_ERROR;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log((Long) null, (Long) null, tinyDomainObject0, tinyDomainObject0, (List<TinyDomainObject>) linkedList0, activityLogKey0, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown object type: java.time.chrono.ChronoLocalDate
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      activityLogServiceImpl0.configure("*+8S*V", "smsSendFailure", "u6>j(<zu?!b#", (-4348));
      assertTrue(activityLogServiceImpl0.isConfigured());
      
      ActivityLogServiceImpl activityLogServiceImpl1 = ActivityLogServiceImpl.getInstance();
      assertTrue(activityLogServiceImpl1.isConfigured());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      activityLogServiceImpl0.configure("*+8S*V", "smsSendFailure", "u6>j(<zu?!b#", (-4348));
      boolean boolean0 = activityLogServiceImpl0.isConfigured();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = Long.getLong((String) null);
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      Class<ActivityLogItem> class0 = ActivityLogItem.class;
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, (Long) null, (String) null, (String) null);
      linkedList0.add(tinyDomainObject0);
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log(long0, long0, tinyDomainObject0, tinyDomainObject0, (List<TinyDomainObject>) linkedList0, "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = new Long((-1L));
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      String[] stringArray0 = new String[8];
      Class<String> class0 = String.class;
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, (Long) null, "", "lPdAZ6c]{aP|R^kM");
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log(long0, long0, (TinyDomainObject) null, tinyDomainObject0, (List<TinyDomainObject>) linkedList0, ".6B\"\"NHYK=,Q/9", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown object type: java.lang.String
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = new Long((-3100L));
      Long long1 = new Long((-4348));
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      String[] stringArray0 = new String[2];
      ActivityLogKey activityLogKey0 = ActivityLogKey.RULE_TRIGGERED;
      ActivityLogItem activityLogItem0 = activityLogServiceImpl0.log(long1, long0, (TinyDomainObject) null, (TinyDomainObject) null, (List<TinyDomainObject>) linkedList0, activityLogKey0, stringArray0);
      assertNull(activityLogItem0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = Long.getLong((String) null);
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      Class<ActivityLogItem> class0 = ActivityLogItem.class;
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, long0, "", (String) null);
      ActivityLogKey activityLogKey0 = ActivityLogKey.HTTP_POST;
      String[] stringArray0 = new String[3];
      ActivityLogItem activityLogItem0 = activityLogServiceImpl0.log(long0, long0, (TinyDomainObject) null, tinyDomainObject0, (List<TinyDomainObject>) linkedList0, activityLogKey0, stringArray0);
      assertNull(activityLogItem0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = new Long((-4348));
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      Class<ActivityLogServiceImpl> class0 = ActivityLogServiceImpl.class;
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, long0, (String) null, (String) null);
      // Undeclared exception!
      try { 
        activityLogServiceImpl0.log(long0, long0, tinyDomainObject0, (TinyDomainObject) null, (List<TinyDomainObject>) linkedList0, (HashMap<String, String>) null, "", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unknown object type: no.tellu.findit.services.cassandra.ActivityLogServiceImpl
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ActivityLogServiceImpl activityLogServiceImpl0 = ActivityLogServiceImpl.getInstance();
      Long long0 = new Long((-11L));
      LinkedList<TinyDomainObject> linkedList0 = new LinkedList<TinyDomainObject>();
      Class<ActivityLogItem> class0 = ActivityLogItem.class;
      TinyDomainObject tinyDomainObject0 = new TinyDomainObject(class0, long0, (String) null, (String) null);
      ActivityLogKey activityLogKey0 = ActivityLogKey.SIA_SEND_FAILURE;
      String[] stringArray0 = new String[7];
      ActivityLogItem activityLogItem0 = activityLogServiceImpl0.log((Long) null, long0, tinyDomainObject0, (TinyDomainObject) null, (List<TinyDomainObject>) linkedList0, activityLogKey0, stringArray0);
      assertNull(activityLogItem0);
  }
}
