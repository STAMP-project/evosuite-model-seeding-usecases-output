/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 18 12:37:58 GMT 2019
 */

package no.tellu.lib.data;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.util.LinkedList;
import java.util.List;
import no.tellu.lib.data.DataGroupNode;
import no.tellu.lib.data.DataHandle;
import no.tellu.lib.data.DataHandleImpl;
import no.tellu.lib.data.DataNode;
import no.tellu.lib.data.DataPath;
import no.tellu.lib.data.DataValueNode;
import no.tellu.lib.data.MergeHandle;
import no.tellu.lib.data.MetaGroupNode;
import no.tellu.lib.data.MetaItemNode;
import no.tellu.lib.data.MetaNode;
import no.tellu.lib.data.MultiLevelHandle;
import no.tellu.lib.data.SetDefaultTrav;
import no.tellu.lib.data.model.ParsedExpr;
import no.tellu.lib.data.model.Rule;
import no.tellu.lib.data.serialize.JsonSerializer;
import no.tellu.lib.data.serialize.XmlSerializer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

public class MergeHandle_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      
      // Undeclared exception!
      try { 
        mergeHandle0.getValueNode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      String string0 = "";
      // Undeclared exception!
      try { 
        mergeHandle0.removeValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      mergeHandle0.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      
      mergeHandle0.totalNodes();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      boolean boolean0 = mergeHandle0.isValueNode();
      assertFalse(boolean0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      
      mergeHandle0.isValueNode();
      String string0 = "1MnHr$eYUbJH";
      // Undeclared exception!
      try { 
        mergeHandle0.changeName("1MnHr$eYUbJH", "1MnHr$eYUbJH", "1MnHr$eYUbJH");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      boolean boolean0 = mergeHandle0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.getDataNodes("<");
      // Undeclared exception!
      try { 
        mergeHandle0.addDataFront((DataHandleImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't add DataHandle null-pointer
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      DataHandleImpl dataHandleImpl0 = null;
      mergeHandle0.isValueNode();
      // Undeclared exception!
      try { 
        mergeHandle0.addDataBack((DataHandleImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't add DataHandle null-pointer
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNotNull(mergeHandle1);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      boolean boolean0 = mergeHandle0.isValid();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertTrue(boolean0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotSame(mergeHandle0, mergeHandle1);
      
      mergeHandle1.getDataNodes("H");
      mergeHandle1.isValid();
      mergeHandle1.isValid();
      mergeHandle0.resetNode();
      mergeHandle1.getValueNode(":@Ut{vqpW w");
      mergeHandle1.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      String string0 = mergeHandle0.getName();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(string0);
      
      JsonSerializer jsonSerializer0 = new JsonSerializer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        mergeHandle0.serialize(jsonSerializer0, byteArrayOutputStream0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.resetNode();
      assertEquals(0, mergeHandle0.totalNodes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      MergeHandle mergeHandle1 = new MergeHandle();
      String string0 = ":ztn?[SVc";
      mergeHandle0.getFloat(":ztn?[SVc", 1.0F);
      mergeHandle0.addDataFront(mergeHandle1);
      mergeHandle0.addDataFront(mergeHandle1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      mergeHandle0.resetNode();
      mergeHandle0.totalNodes();
      mergeHandle1.isValueNode();
      DataNode dataNode0 = null;
      // Undeclared exception!
      try { 
        mergeHandle1.mergeNode((DataNode) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      int int0 = mergeHandle0.totalNodes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.getBoolean(">X_aQ(;T5BY", false);
      // Undeclared exception!
      try { 
        mergeHandle0.changeName(">X_aQ(;T5BY", "", "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      boolean boolean0 = mergeHandle0.nextNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.addDataFront(mergeHandle0);
      // Undeclared exception!
      try { 
        mergeHandle0.nextNode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      MetaGroupNode metaGroupNode0 = new MetaGroupNode("::E#,n^fo 3HKCq9_0qj9");
      DataGroupNode dataGroupNode0 = metaGroupNode0.createData(true);
      MultiLevelHandle multiLevelHandle0 = new MultiLevelHandle(dataGroupNode0, "");
      DataHandleImpl dataHandleImpl0 = multiLevelHandle0.subHandle;
      mergeHandle0.addDataFront(dataHandleImpl0);
      try { 
        mergeHandle0.getDouble(":");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      MergeHandle mergeHandle1 = new MergeHandle();
      mergeHandle0.addDataFront(mergeHandle1);
      mergeHandle0.getValueNode("no.tellu.lib.data.MergeHandle");
      String string0 = "Xy\\e,vzExX/)?Gyqev";
      mergeHandle0.getInt("Xye,vzExX/)?Gyqev", 1);
      // Undeclared exception!
      try { 
        mergeHandle0.addNode((DataNode) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      String string0 = "++q)1Cf]n4Ax";
      List<DataNode> list0 = mergeHandle0.getClonedNodes("++q)1Cf]n4Ax", false);
      DataPath dataPath0 = new DataPath("++q)1Cf]n4Ax");
      mergeHandle0.hasValue("|S2\u0003Viv.#V-Adkn3;");
      DataPath dataPath1 = dataPath0.clonePath();
      MultiLevelHandle multiLevelHandle0 = new MultiLevelHandle(list0, dataPath1);
      mergeHandle0.addDataFront(multiLevelHandle0);
      mergeHandle0.getDataNodes("++q)1Cf]n4Ax");
      String string1 = "Cannot unread '";
      // Undeclared exception!
      try { 
        mergeHandle0.changeName("++q)1Cf]n4Ax", "Cannot unread '", "++q)1Cf]n4Ax");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.getClonedNodes("$", false);
      mergeHandle0.isValid();
      String string0 = "&f&5gm`VdIL!Tu";
      boolean boolean0 = false;
      mergeHandle0.getBoolean("&f&5gm`VdIL!Tu", false);
      mergeHandle0.hasNode();
      try { 
        mergeHandle0.getFloat("&f&5gm`VdIL!Tu");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.getValueNode(";");
      // Undeclared exception!
      try { 
        mergeHandle0.mergeNode((DataNode) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      mergeHandle0.addDataFront(mergeHandle0);
      String string0 = ")c!si\"(OHyNu{";
      // Undeclared exception!
      try { 
        mergeHandle0.getDataNodes(string0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      DataHandleImpl dataHandleImpl0 = null;
      boolean boolean0 = mergeHandle0.isValueNode();
      assertFalse(boolean0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      
      // Undeclared exception!
      try { 
        mergeHandle0.addDataBack((DataHandleImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't add DataHandle null-pointer
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNotNull(mergeHandle0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.setValue((String) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNotNull(mergeHandle0);
      
      String string0 = mergeHandle0.getString("I@1m12R#dAf", "HsmXqh>}9>O`./");
      assertEquals("HsmXqh>}9>O`./", string0);
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNotNull(string0);
      
      boolean boolean0 = mergeHandle0.isValid();
      assertTrue(boolean0);
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      mergeHandle0.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      
      mergeHandle0.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      
      List<DataNode> list0 = mergeHandle0.getDataNodes(":@Ut{vqpW w");
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.nextNode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.getDataNodes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNotNull(mergeHandle1);
      
      mergeHandle1.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      mergeHandle1.resetNode();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNotSame(mergeHandle1, mergeHandle0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNotNull(mergeHandle1);
      
      mergeHandle1.addDataFront(mergeHandle1);
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNotSame(mergeHandle1, mergeHandle0);
      
      // Undeclared exception!
      try { 
        mergeHandle1.isValid();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      mergeHandle0.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasNode());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertNotNull(dataHandleImpl0);
      
      mergeHandle0.addDataFront(dataHandleImpl0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasNode());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(0, dataHandleImpl0.totalNodes());
      
      mergeHandle0.totalNodes();
      mergeHandle0.getName();
      mergeHandle0.resetNode();
      String string0 = ")0|6'\"+r#Rrj)z<L2y";
      mergeHandle0.getValueNode(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      mergeHandle0.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      
      mergeHandle0.hasNode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      List<DataNode> list0 = mergeHandle0.getDataNodes("gUI9psZ(z");
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.removeValue("m(EL{hV}W,00");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      boolean boolean0 = mergeHandle0.hasNode();
      assertFalse(boolean0);
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertEquals(0, mergeHandle0.totalNodes());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.addDataFront((DataHandleImpl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Can't add DataHandle null-pointer
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      mergeHandle0.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      
      List<DataNode> list0 = mergeHandle0.getDataNodes(":</ (?N&a<OvNU");
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      long long0 = mergeHandle0.getLong("Attempt to set value in group node", 157L);
      assertEquals(157L, long0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      
      // Undeclared exception!
      try { 
        mergeHandle0.getNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.getNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      JsonSerializer jsonSerializer0 = new JsonSerializer();
      assertNotNull(jsonSerializer0);
      
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNotNull(mergeHandle0);
      
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasNode());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertNotNull(dataHandleImpl0);
      
      mergeHandle0.addDataBack(dataHandleImpl0);
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, linkedList0.size());
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasNode());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      
      boolean boolean0 = mergeHandle0.isValid();
      assertFalse(boolean0);
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      
      boolean boolean1 = mergeHandle0.nextNode();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".'TO,^H#H&n!<\"T");
      assertFalse(boolean0);
      
      String string0 = mergeHandle0.getName();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertNull(string0);
      
      String string1 = ":Extraneous closing array bracket detected (this is usually caused by a missing opening array bracket)";
      DataValueNode dataValueNode0 = mergeHandle0.getValueNode(":Extraneous closing array bracket detected (this is usually caused by a missing opening array bracket)");
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertNull(dataValueNode0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasNode());
      assertNotNull(mergeHandle1);
      
      int int0 = mergeHandle1.getInt(":x", 1024);
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(1024, int0);
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasNode());
      assertNotSame(mergeHandle1, mergeHandle0);
      
      // Undeclared exception!
      try { 
        mergeHandle1.addNode((DataNode) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      mergeHandle0.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      
      // Undeclared exception!
      try { 
        mergeHandle0.getValueNode(";");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.changeName(":11Xvl^3R", ":11Xvl^3R", ":11Xvl^3R");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      String string0 = mergeHandle0.getName();
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.getValueNode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      assertFalse(dataHandleImpl0.hasNode());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertNull(dataHandleImpl0.getName());
      assertNotNull(dataHandleImpl0);
      
      mergeHandle0.addDataFront(dataHandleImpl0);
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(dataHandleImpl0.hasNode());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertNull(dataHandleImpl0.getName());
      
      List<DataNode> list0 = mergeHandle0.getDataNodes("x");
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = mergeHandle0.isValid();
      assertFalse(boolean0);
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      
      // Undeclared exception!
      try { 
        mergeHandle0.getNode();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.mergeNode((DataNode) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(mergeHandle1.hasNode());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNull(mergeHandle1.getName());
      assertNotNull(mergeHandle1);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNull(mergeHandle1.getName());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      boolean boolean0 = mergeHandle1.hasNode();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(boolean0);
      assertFalse(mergeHandle1.hasNode());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNull(mergeHandle1.getName());
      assertNotSame(mergeHandle1, mergeHandle0);
      
      int int0 = mergeHandle0.totalNodes();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertEquals(0, int0);
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNotSame(mergeHandle0, mergeHandle1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      List<DataNode> list0 = mergeHandle0.getDataNodes(":");
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNotNull(mergeHandle1);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      String string0 = mergeHandle0.getName();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      double double0 = mergeHandle0.getDouble("", Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      
      boolean boolean0 = mergeHandle0.nextNode();
      assertFalse(boolean0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      
      List<DataNode> list0 = mergeHandle0.getClonedNodes("@Ut{vqpW w", true);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(list0);
      
      boolean boolean1 = mergeHandle0.isValid();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      
      DataValueNode dataValueNode0 = mergeHandle0.getValueNode("@Ut{vqpW w");
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(dataValueNode0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      String string0 = "-FJ[LD";
      List<DataNode> list0 = mergeHandle0.getDataNodes("-FJ[LD");
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.removeValue("9TP");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNotNull(mergeHandle1);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      boolean boolean0 = mergeHandle0.isValid();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertTrue(boolean0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertNotSame(mergeHandle0, mergeHandle1);
      
      List<DataNode> list0 = mergeHandle1.getDataNodes("H");
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(mergeHandle1, mergeHandle0);
      assertNotNull(list0);
      
      boolean boolean1 = mergeHandle1.isValid();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNotSame(mergeHandle1, mergeHandle0);
      
      mergeHandle1.resetNode();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNotSame(mergeHandle1, mergeHandle0);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl((DataNode) null);
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(1, dataHandleImpl0.totalNodes());
      assertTrue(dataHandleImpl0.hasNode());
      assertNotNull(dataHandleImpl0);
      
      mergeHandle0.addDataBack(dataHandleImpl0);
      assertTrue(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(1, mergeHandle0.totalNodes());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(1, dataHandleImpl0.totalNodes());
      assertTrue(dataHandleImpl0.hasNode());
      
      // Undeclared exception!
      try { 
        mergeHandle0.isValid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNotNull(mergeHandle0);
      
      try { 
        mergeHandle0.getDouble(":");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNull(mergeHandle1.getName());
      assertNotNull(mergeHandle1);
      
      mergeHandle1.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNull(mergeHandle1.getName());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      int int0 = mergeHandle1.totalNodes();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, int0);
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertNull(mergeHandle1.getName());
      assertNotSame(mergeHandle1, mergeHandle0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      String string0 = ":";
      DataGroupNode dataGroupNode0 = new DataGroupNode(":");
      assertEquals(":", dataGroupNode0.getName());
      assertFalse(dataGroupNode0.isModified());
      assertEquals(0, dataGroupNode0.childNodes());
      assertNotNull(dataGroupNode0);
      
      List<DataNode> list0 = dataGroupNode0.childNodes;
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      DataPath dataPath0 = new DataPath(":");
      assertEquals(":", dataPath0.toString());
      assertFalse(dataPath0.moreLeft());
      assertEquals("", dataPath0.getRemainingString());
      assertNotNull(dataPath0);
      
      DataPath dataPath1 = dataPath0.clonePath();
      assertTrue(dataPath1.equals((Object)dataPath0));
      assertEquals(":", dataPath0.toString());
      assertFalse(dataPath0.moreLeft());
      assertEquals("", dataPath0.getRemainingString());
      assertFalse(dataPath1.moreLeft());
      assertEquals(":", dataPath1.toString());
      assertEquals("", dataPath1.getRemainingString());
      assertNotSame(dataPath0, dataPath1);
      assertNotSame(dataPath1, dataPath0);
      assertNotNull(dataPath1);
      
      MultiLevelHandle multiLevelHandle0 = new MultiLevelHandle(list0, dataPath1);
      assertTrue(dataPath0.equals((Object)dataPath1));
      assertTrue(dataPath1.equals((Object)dataPath0));
      assertEquals(":", dataGroupNode0.getName());
      assertFalse(dataGroupNode0.isModified());
      assertEquals(0, dataGroupNode0.childNodes());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(":", dataPath0.toString());
      assertFalse(dataPath0.moreLeft());
      assertEquals("", dataPath0.getRemainingString());
      assertFalse(dataPath1.moreLeft());
      assertEquals(":", dataPath1.toString());
      assertEquals("", dataPath1.getRemainingString());
      assertFalse(multiLevelHandle0.hasNode());
      assertFalse(multiLevelHandle0.hasOpenTransaction());
      assertNull(multiLevelHandle0.getName());
      assertNotNull(multiLevelHandle0);
      
      DataHandleImpl dataHandleImpl0 = multiLevelHandle0.subHandle;
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasNode());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertNotNull(dataHandleImpl0);
      
      XmlSerializer xmlSerializer0 = new XmlSerializer();
      assertNotNull(xmlSerializer0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      dataHandleImpl0.serialize(xmlSerializer0, byteArrayOutputStream0, false);
      assertTrue(dataPath0.equals((Object)dataPath1));
      assertTrue(dataPath1.equals((Object)dataPath0));
      assertEquals(":", dataGroupNode0.getName());
      assertFalse(dataGroupNode0.isModified());
      assertEquals(0, dataGroupNode0.childNodes());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(":", dataPath0.toString());
      assertFalse(dataPath0.moreLeft());
      assertEquals("", dataPath0.getRemainingString());
      assertFalse(dataPath1.moreLeft());
      assertEquals(":", dataPath1.toString());
      assertEquals("", dataPath1.getRemainingString());
      assertFalse(multiLevelHandle0.hasNode());
      assertFalse(multiLevelHandle0.hasOpenTransaction());
      assertNull(multiLevelHandle0.getName());
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasNode());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotSame(dataPath0, dataPath1);
      assertNotSame(dataPath1, dataPath0);
      
      mergeHandle0.addDataBack(dataHandleImpl0);
      assertTrue(dataPath0.equals((Object)dataPath1));
      assertTrue(dataPath1.equals((Object)dataPath0));
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(":", dataGroupNode0.getName());
      assertFalse(dataGroupNode0.isModified());
      assertEquals(0, dataGroupNode0.childNodes());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(":", dataPath0.toString());
      assertFalse(dataPath0.moreLeft());
      assertEquals("", dataPath0.getRemainingString());
      assertFalse(dataPath1.moreLeft());
      assertEquals(":", dataPath1.toString());
      assertEquals("", dataPath1.getRemainingString());
      assertFalse(multiLevelHandle0.hasNode());
      assertFalse(multiLevelHandle0.hasOpenTransaction());
      assertNull(multiLevelHandle0.getName());
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasNode());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertNotSame(dataPath0, dataPath1);
      assertNotSame(dataPath1, dataPath0);
      
      JsonSerializer jsonSerializer0 = new JsonSerializer();
      assertNotNull(jsonSerializer0);
      
      String string1 = "";
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        MockURI.resolve((URI) null, ":");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNull(mergeHandle1.getName());
      assertNotNull(mergeHandle1);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNull(mergeHandle1.getName());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      boolean boolean0 = mergeHandle0.isValueNode();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(boolean0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotSame(mergeHandle0, mergeHandle1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNotNull(mergeHandle1);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      boolean boolean0 = mergeHandle0.nextNode();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(boolean0);
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertNotSame(mergeHandle0, mergeHandle1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasNode());
      assertNotNull(mergeHandle1);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasNode());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      boolean boolean0 = mergeHandle0.isValid();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertTrue(boolean0);
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertNotSame(mergeHandle0, mergeHandle1);
      
      mergeHandle0.resetNode();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertNotSame(mergeHandle0, mergeHandle1);
      
      List<DataNode> list0 = mergeHandle0.getClonedNodes(":", false);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotNull(list0);
      
      DataPath dataPath0 = new DataPath(":TCdTIw8kF>ChV6");
      assertEquals(":TCdTIw8kF>ChV6", dataPath0.toString());
      assertEquals("TCdTIw8kF>ChV6", dataPath0.getRemainingString());
      assertTrue(dataPath0.moreLeft());
      assertNotNull(dataPath0);
      
      MultiLevelHandle multiLevelHandle0 = new MultiLevelHandle(list0, dataPath0);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(":TCdTIw8kF>ChV6", dataPath0.toString());
      assertFalse(dataPath0.moreLeft());
      assertEquals("", dataPath0.getRemainingString());
      assertNull(multiLevelHandle0.getName());
      assertFalse(multiLevelHandle0.hasNode());
      assertFalse(multiLevelHandle0.hasOpenTransaction());
      assertNotNull(multiLevelHandle0);
      
      MetaGroupNode metaGroupNode0 = new MetaGroupNode(":", 175, false, true);
      assertEquals(1, MetaNode.CARD_FLAG_REQUIRED);
      assertEquals(1, MetaNode.CARD_ONE);
      assertEquals(0, MetaNode.CARD_ZERO_OR_ONE);
      assertEquals(2, MetaNode.CARD_FLAG_MULTIPLE);
      assertEquals(3, MetaNode.CARD_ONE_OR_MORE);
      assertEquals(2, MetaNode.CARD_ZERO_OR_MORE);
      assertEquals(":", metaGroupNode0.getName());
      assertTrue(metaGroupNode0.isAllowUnknown());
      assertTrue(metaGroupNode0.isRequired());
      assertEquals(0, metaGroupNode0.numberOfChildren());
      assertEquals(175, metaGroupNode0.getCardinality());
      assertTrue(metaGroupNode0.isMultiple());
      assertFalse(metaGroupNode0.isReadOnly());
      assertNotNull(metaGroupNode0);
      
      DataGroupNode dataGroupNode0 = metaGroupNode0.createData(false);
      assertEquals(1, MetaNode.CARD_FLAG_REQUIRED);
      assertEquals(1, MetaNode.CARD_ONE);
      assertEquals(0, MetaNode.CARD_ZERO_OR_ONE);
      assertEquals(2, MetaNode.CARD_FLAG_MULTIPLE);
      assertEquals(3, MetaNode.CARD_ONE_OR_MORE);
      assertEquals(2, MetaNode.CARD_ZERO_OR_MORE);
      assertEquals(":", metaGroupNode0.getName());
      assertTrue(metaGroupNode0.isAllowUnknown());
      assertTrue(metaGroupNode0.isRequired());
      assertEquals(0, metaGroupNode0.numberOfChildren());
      assertEquals(175, metaGroupNode0.getCardinality());
      assertTrue(metaGroupNode0.isMultiple());
      assertFalse(metaGroupNode0.isReadOnly());
      assertEquals(0, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals(":", dataGroupNode0.getName());
      assertNotNull(dataGroupNode0);
      
      DataGroupNode dataGroupNode1 = new DataGroupNode(metaGroupNode0);
      assertFalse(dataGroupNode1.equals((Object)dataGroupNode0));
      assertEquals(1, MetaNode.CARD_FLAG_REQUIRED);
      assertEquals(1, MetaNode.CARD_ONE);
      assertEquals(0, MetaNode.CARD_ZERO_OR_ONE);
      assertEquals(2, MetaNode.CARD_FLAG_MULTIPLE);
      assertEquals(3, MetaNode.CARD_ONE_OR_MORE);
      assertEquals(2, MetaNode.CARD_ZERO_OR_MORE);
      assertEquals(":", metaGroupNode0.getName());
      assertTrue(metaGroupNode0.isAllowUnknown());
      assertTrue(metaGroupNode0.isRequired());
      assertEquals(0, metaGroupNode0.numberOfChildren());
      assertEquals(175, metaGroupNode0.getCardinality());
      assertTrue(metaGroupNode0.isMultiple());
      assertFalse(metaGroupNode0.isReadOnly());
      assertEquals(":", dataGroupNode1.getName());
      assertFalse(dataGroupNode1.isModified());
      assertEquals(0, dataGroupNode1.childNodes());
      assertNotNull(dataGroupNode1);
      
      DataGroupNode dataGroupNode2 = dataGroupNode0.addNodeRaw(dataGroupNode1);
      assertFalse(dataGroupNode0.equals((Object)dataGroupNode1));
      assertFalse(dataGroupNode1.equals((Object)dataGroupNode0));
      assertFalse(dataGroupNode2.equals((Object)dataGroupNode1));
      assertEquals(1, MetaNode.CARD_FLAG_REQUIRED);
      assertEquals(1, MetaNode.CARD_ONE);
      assertEquals(0, MetaNode.CARD_ZERO_OR_ONE);
      assertEquals(2, MetaNode.CARD_FLAG_MULTIPLE);
      assertEquals(3, MetaNode.CARD_ONE_OR_MORE);
      assertEquals(2, MetaNode.CARD_ZERO_OR_MORE);
      assertEquals(":", metaGroupNode0.getName());
      assertTrue(metaGroupNode0.isAllowUnknown());
      assertTrue(metaGroupNode0.isRequired());
      assertEquals(0, metaGroupNode0.numberOfChildren());
      assertEquals(175, metaGroupNode0.getCardinality());
      assertTrue(metaGroupNode0.isMultiple());
      assertFalse(metaGroupNode0.isReadOnly());
      assertEquals(1, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals(":", dataGroupNode0.getName());
      assertEquals(":", dataGroupNode1.getName());
      assertFalse(dataGroupNode1.isModified());
      assertEquals(0, dataGroupNode1.childNodes());
      assertFalse(dataGroupNode2.isModified());
      assertEquals(1, dataGroupNode2.childNodes());
      assertEquals(":", dataGroupNode2.getName());
      assertSame(dataGroupNode0, dataGroupNode2);
      assertNotSame(dataGroupNode0, dataGroupNode1);
      assertNotSame(dataGroupNode1, dataGroupNode0);
      assertNotSame(dataGroupNode1, dataGroupNode2);
      assertNotSame(dataGroupNode2, dataGroupNode1);
      assertSame(dataGroupNode2, dataGroupNode0);
      assertNotNull(dataGroupNode2);
      
      MultiLevelHandle multiLevelHandle1 = new MultiLevelHandle(dataGroupNode2, "HsmXqh>}9>O`./");
      assertFalse(dataGroupNode0.equals((Object)dataGroupNode1));
      assertFalse(dataGroupNode1.equals((Object)dataGroupNode0));
      assertFalse(dataGroupNode1.equals((Object)dataGroupNode2));
      assertFalse(dataGroupNode2.equals((Object)dataGroupNode1));
      assertFalse(multiLevelHandle1.equals((Object)multiLevelHandle0));
      assertEquals(1, MetaNode.CARD_FLAG_REQUIRED);
      assertEquals(1, MetaNode.CARD_ONE);
      assertEquals(0, MetaNode.CARD_ZERO_OR_ONE);
      assertEquals(2, MetaNode.CARD_FLAG_MULTIPLE);
      assertEquals(3, MetaNode.CARD_ONE_OR_MORE);
      assertEquals(2, MetaNode.CARD_ZERO_OR_MORE);
      assertEquals(":", metaGroupNode0.getName());
      assertTrue(metaGroupNode0.isAllowUnknown());
      assertTrue(metaGroupNode0.isRequired());
      assertEquals(0, metaGroupNode0.numberOfChildren());
      assertEquals(175, metaGroupNode0.getCardinality());
      assertTrue(metaGroupNode0.isMultiple());
      assertFalse(metaGroupNode0.isReadOnly());
      assertEquals(1, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals(":", dataGroupNode0.getName());
      assertEquals(":", dataGroupNode1.getName());
      assertFalse(dataGroupNode1.isModified());
      assertEquals(0, dataGroupNode1.childNodes());
      assertFalse(dataGroupNode2.isModified());
      assertEquals(1, dataGroupNode2.childNodes());
      assertEquals(":", dataGroupNode2.getName());
      assertFalse(multiLevelHandle1.hasNode());
      assertFalse(multiLevelHandle1.hasOpenTransaction());
      assertNull(multiLevelHandle1.getName());
      assertNotNull(multiLevelHandle1);
      
      DataHandleImpl dataHandleImpl0 = multiLevelHandle1.subHandle;
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertFalse(dataHandleImpl0.hasNode());
      assertNotNull(dataHandleImpl0);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasNode());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      boolean boolean1 = mergeHandle0.hasNode();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNull(mergeHandle0.getName());
      assertNotSame(mergeHandle0, mergeHandle1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      DataHandleImpl dataHandleImpl0 = new DataHandleImpl();
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertFalse(dataHandleImpl0.hasNode());
      assertNull(dataHandleImpl0.getName());
      assertNotNull(dataHandleImpl0);
      
      mergeHandle0.addDataBack(dataHandleImpl0);
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertFalse(dataHandleImpl0.hasNode());
      assertNull(dataHandleImpl0.getName());
      
      boolean boolean0 = mergeHandle0.hasNode();
      assertFalse(boolean0);
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      mergeHandle0.addDataFront(mergeHandle0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      
      mergeHandle0.isValid();
      String string0 = "H";
      mergeHandle0.getDataNodes(string0);
      mergeHandle0.isValid();
      mergeHandle0.addDataFront(mergeHandle0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      try { 
        mergeHandle0.getDouble(" m1rHh2/{c!d4#a7Z#y");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      DataGroupNode dataGroupNode0 = new DataGroupNode();
      assertEquals(0, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals("", dataGroupNode0.getName());
      assertNotNull(dataGroupNode0);
      
      MultiLevelHandle multiLevelHandle0 = new MultiLevelHandle(dataGroupNode0, "");
      assertEquals(0, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals("", dataGroupNode0.getName());
      assertFalse(multiLevelHandle0.hasNode());
      assertNull(multiLevelHandle0.getName());
      assertFalse(multiLevelHandle0.hasOpenTransaction());
      assertNotNull(multiLevelHandle0);
      
      mergeHandle0.addDataFront(multiLevelHandle0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals("", dataGroupNode0.getName());
      assertFalse(multiLevelHandle0.hasNode());
      assertNull(multiLevelHandle0.getName());
      assertFalse(multiLevelHandle0.hasOpenTransaction());
      
      // Undeclared exception!
      try { 
        mergeHandle0.totalNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      double double0 = mergeHandle0.getDouble("=N", 0.0);
      assertEquals(0.0, double0, 0.01);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      
      boolean boolean0 = mergeHandle0.hasValue("=N");
      assertFalse(boolean0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      
      String string0 = mergeHandle0.getString("$!:vHcC", "=N");
      assertEquals("=N", string0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(string0);
      
      mergeHandle0.resetNode();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      
      List<DataNode> list0 = mergeHandle0.getClonedNodes(":", false);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      DataPath dataPath0 = new DataPath("$!:vHcC");
      assertEquals("$!:vHcC", dataPath0.toString());
      assertEquals("$!:vHcC", dataPath0.getRemainingString());
      assertTrue(dataPath0.moreLeft());
      assertNotNull(dataPath0);
      
      MultiLevelHandle multiLevelHandle0 = new MultiLevelHandle(list0, dataPath0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(dataPath0.moreLeft());
      assertEquals("$!:vHcC", dataPath0.toString());
      assertEquals("", dataPath0.getRemainingString());
      assertFalse(multiLevelHandle0.hasNode());
      assertFalse(multiLevelHandle0.hasOpenTransaction());
      assertNull(multiLevelHandle0.getName());
      assertNotNull(multiLevelHandle0);
      
      DataHandleImpl dataHandleImpl0 = multiLevelHandle0.subHandle;
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasNode());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertNotNull(dataHandleImpl0);
      
      mergeHandle0.addDataFront(dataHandleImpl0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(dataPath0.moreLeft());
      assertEquals("$!:vHcC", dataPath0.toString());
      assertEquals("", dataPath0.getRemainingString());
      assertFalse(multiLevelHandle0.hasNode());
      assertFalse(multiLevelHandle0.hasOpenTransaction());
      assertNull(multiLevelHandle0.getName());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasNode());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      
      boolean boolean1 = mergeHandle0.hasNode();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasNode());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNotNull(mergeHandle1);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertEquals(0, mergeHandle1.totalNodes());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      boolean boolean0 = mergeHandle0.hasNode();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(boolean0);
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNotSame(mergeHandle0, mergeHandle1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      boolean boolean0 = mergeHandle0.hasValue("");
      assertFalse(boolean0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      
      int int0 = mergeHandle0.totalNodes();
      assertEquals(0, int0);
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      
      DataValueNode dataValueNode0 = new DataValueNode("");
      assertEquals("", dataValueNode0.getName());
      assertFalse(dataValueNode0.isModified());
      assertNotNull(dataValueNode0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.setValue("", dataValueNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertNotNull(mergeHandle1);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      double double0 = mergeHandle1.getDouble(";]LF^l/d4", 0.0);
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertFalse(mergeHandle1.hasNode());
      assertNull(mergeHandle1.getName());
      assertNotSame(mergeHandle1, mergeHandle0);
      
      boolean boolean0 = mergeHandle0.nextNode();
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(boolean0);
      assertFalse(mergeHandle0.hasNode());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertNotSame(mergeHandle0, mergeHandle1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      DataGroupNode dataGroupNode0 = new DataGroupNode();
      assertEquals(0, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals("", dataGroupNode0.getName());
      assertNotNull(dataGroupNode0);
      
      // Undeclared exception!
      try { 
        mergeHandle0.addNode(dataGroupNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertNotNull(mergeHandle0);
      
      MergeHandle mergeHandle1 = new MergeHandle();
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNotNull(mergeHandle1);
      
      mergeHandle0.addDataFront(mergeHandle1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertFalse(mergeHandle1.equals((Object)mergeHandle0));
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle1.getName());
      assertFalse(mergeHandle1.hasOpenTransaction());
      assertEquals(0, mergeHandle1.totalNodes());
      assertFalse(mergeHandle1.hasNode());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNotSame(mergeHandle1, mergeHandle0);
      
      String string0 = "no.tellu.lib.data.MergeHandle";
      DataValueNode dataValueNode0 = mergeHandle0.getValueNode("no.tellu.lib.data.MergeHandle");
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertNotSame(mergeHandle0, mergeHandle1);
      assertNull(dataValueNode0);
      
      String string1 = "Xy\\e,vzExX/)?Gyqev";
      int int0 = mergeHandle0.getInt("Xye,vzExX/)?Gyqev", 1);
      assertFalse(mergeHandle0.equals((Object)mergeHandle1));
      assertEquals(1, int0);
      assertEquals(0, mergeHandle0.totalNodes());
      assertNull(mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertFalse(mergeHandle0.hasNode());
      assertNotSame(mergeHandle0, mergeHandle1);
      
      XmlSerializer xmlSerializer0 = new XmlSerializer();
      assertNotNull(xmlSerializer0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("r<!M0C{kEF_}r^k79>");
      assertNotNull(mockFileOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        mergeHandle1.serialize(xmlSerializer0, dataOutputStream0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // MergeHandle is read-only
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MergeHandle mergeHandle0 = new MergeHandle();
      assertFalse(mergeHandle0.hasNode());
      assertNull(mergeHandle0.getName());
      assertEquals(0, mergeHandle0.totalNodes());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertNotNull(mergeHandle0);
      
      double double0 = new Float(0.0);
      assertEquals(0.0F, double0, 0.01);
      
      DataGroupNode dataGroupNode0 = new DataGroupNode("7R,-3;Ev.vzib=WIA|~");
      assertEquals(0, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals("7R,-3;Ev.vzib=WIA|~", dataGroupNode0.getName());
      assertNotNull(dataGroupNode0);
      
      List<DataNode> list0 = dataGroupNode0.childNodes;
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      DataPath dataPath0 = new DataPath("=N");
      assertEquals("=N", dataPath0.getRemainingString());
      assertTrue(dataPath0.moreLeft());
      assertEquals("=N", dataPath0.toString());
      assertNotNull(dataPath0);
      
      MultiLevelHandle multiLevelHandle0 = new MultiLevelHandle(list0, dataPath0);
      assertEquals(0, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals("7R,-3;Ev.vzib=WIA|~", dataGroupNode0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("", dataPath0.getRemainingString());
      assertFalse(dataPath0.moreLeft());
      assertEquals("=N", dataPath0.toString());
      assertNull(multiLevelHandle0.getName());
      assertFalse(multiLevelHandle0.hasNode());
      assertFalse(multiLevelHandle0.hasOpenTransaction());
      assertNotNull(multiLevelHandle0);
      
      DataHandleImpl dataHandleImpl0 = multiLevelHandle0.subHandle;
      assertNull(dataHandleImpl0.getName());
      assertFalse(dataHandleImpl0.hasOpenTransaction());
      assertEquals(0, dataHandleImpl0.totalNodes());
      assertFalse(dataHandleImpl0.hasNode());
      assertNotNull(dataHandleImpl0);
      
      DataHandleImpl dataHandleImpl1 = new DataHandleImpl(dataGroupNode0);
      assertFalse(dataHandleImpl1.equals((Object)dataHandleImpl0));
      assertEquals(0, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals("7R,-3;Ev.vzib=WIA|~", dataGroupNode0.getName());
      assertEquals("7R,-3;Ev.vzib=WIA|~", dataHandleImpl1.getName());
      assertTrue(dataHandleImpl1.hasNode());
      assertEquals(1, dataHandleImpl1.totalNodes());
      assertFalse(dataHandleImpl1.hasOpenTransaction());
      assertNotNull(dataHandleImpl1);
      
      mergeHandle0.addDataFront(dataHandleImpl1);
      assertFalse(dataHandleImpl1.equals((Object)dataHandleImpl0));
      assertTrue(mergeHandle0.hasNode());
      assertEquals(1, mergeHandle0.totalNodes());
      assertEquals("7R,-3;Ev.vzib=WIA|~", mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
      assertEquals(0, dataGroupNode0.childNodes());
      assertFalse(dataGroupNode0.isModified());
      assertEquals("7R,-3;Ev.vzib=WIA|~", dataGroupNode0.getName());
      assertEquals("7R,-3;Ev.vzib=WIA|~", dataHandleImpl1.getName());
      assertTrue(dataHandleImpl1.hasNode());
      assertEquals(1, dataHandleImpl1.totalNodes());
      assertFalse(dataHandleImpl1.hasOpenTransaction());
      assertNotSame(dataHandleImpl1, dataHandleImpl0);
      
      boolean boolean0 = mergeHandle0.hasNode();
      assertTrue(boolean0);
      assertTrue(mergeHandle0.hasNode());
      assertEquals(1, mergeHandle0.totalNodes());
      assertEquals("7R,-3;Ev.vzib=WIA|~", mergeHandle0.getName());
      assertFalse(mergeHandle0.hasOpenTransaction());
  }
}
