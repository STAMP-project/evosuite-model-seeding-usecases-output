/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 15:23:26 GMT 2019
 */

package org.ow2.proactive.catalog.service.model;

import org.junit.Test;
import static org.junit.Assert.*;
import org.ow2.proactive.catalog.service.model.AuthenticatedUser;
import org.ow2.proactive.catalog.service.model.RestApiAccessResponse;

public class RestApiAccessResponse_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      RestApiAccessResponse restApiAccessResponse0 = new RestApiAccessResponse(false, authenticatedUser0);
      RestApiAccessResponse restApiAccessResponse1 = RestApiAccessResponse.EMPTY;
      boolean boolean0 = restApiAccessResponse0.equals(restApiAccessResponse1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder0 = RestApiAccessResponse.builder();
      restApiAccessResponse_RestApiAccessResponseBuilder0.authorized(true);
      RestApiAccessResponse restApiAccessResponse0 = RestApiAccessResponse.EMPTY;
      RestApiAccessResponse restApiAccessResponse1 = restApiAccessResponse_RestApiAccessResponseBuilder0.build();
      boolean boolean0 = restApiAccessResponse0.equals(restApiAccessResponse1);
      assertFalse(boolean0);
      assertTrue(restApiAccessResponse1.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder0 = new RestApiAccessResponse.RestApiAccessResponseBuilder();
      RestApiAccessResponse restApiAccessResponse0 = restApiAccessResponse_RestApiAccessResponseBuilder0.build();
      String string0 = restApiAccessResponse0.toString();
      assertEquals("RestApiAccessResponse(authorized=false, authenticatedUser=null)", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder0 = new RestApiAccessResponse.RestApiAccessResponseBuilder();
      String string0 = restApiAccessResponse_RestApiAccessResponseBuilder0.toString();
      assertEquals("RestApiAccessResponse.RestApiAccessResponseBuilder(authorized=false, authenticatedUser=null)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder0 = new RestApiAccessResponse.RestApiAccessResponseBuilder();
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder1 = restApiAccessResponse_RestApiAccessResponseBuilder0.authenticatedUser(authenticatedUser0);
      assertSame(restApiAccessResponse_RestApiAccessResponseBuilder1, restApiAccessResponse_RestApiAccessResponseBuilder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder0 = RestApiAccessResponse.builder();
      RestApiAccessResponse restApiAccessResponse0 = restApiAccessResponse_RestApiAccessResponseBuilder0.build();
      restApiAccessResponse0.hashCode();
      assertFalse(restApiAccessResponse0.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      RestApiAccessResponse restApiAccessResponse0 = new RestApiAccessResponse(true, authenticatedUser0);
      restApiAccessResponse0.hashCode();
      assertTrue(restApiAccessResponse0.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      RestApiAccessResponse restApiAccessResponse0 = new RestApiAccessResponse(false, authenticatedUser0);
      boolean boolean0 = restApiAccessResponse0.equals(restApiAccessResponse0);
      assertFalse(restApiAccessResponse0.isAuthorized());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      RestApiAccessResponse restApiAccessResponse0 = new RestApiAccessResponse(false, authenticatedUser0);
      boolean boolean0 = restApiAccessResponse0.equals("");
      assertFalse(boolean0);
      assertFalse(restApiAccessResponse0.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder0 = RestApiAccessResponse.builder();
      RestApiAccessResponse restApiAccessResponse0 = restApiAccessResponse_RestApiAccessResponseBuilder0.build();
      RestApiAccessResponse restApiAccessResponse1 = restApiAccessResponse_RestApiAccessResponseBuilder0.build();
      boolean boolean0 = restApiAccessResponse0.equals(restApiAccessResponse1);
      assertTrue(boolean0);
      assertFalse(restApiAccessResponse1.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder0 = RestApiAccessResponse.builder();
      RestApiAccessResponse restApiAccessResponse0 = restApiAccessResponse_RestApiAccessResponseBuilder0.build();
      RestApiAccessResponse restApiAccessResponse1 = RestApiAccessResponse.EMPTY;
      boolean boolean0 = restApiAccessResponse0.equals(restApiAccessResponse1);
      assertFalse(boolean0);
      assertFalse(restApiAccessResponse0.isAuthorized());
      assertFalse(restApiAccessResponse1.equals((Object)restApiAccessResponse0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RestApiAccessResponse restApiAccessResponse0 = RestApiAccessResponse.EMPTY;
      boolean boolean0 = restApiAccessResponse0.isAuthorized();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder0 = new RestApiAccessResponse.RestApiAccessResponseBuilder();
      RestApiAccessResponse restApiAccessResponse0 = restApiAccessResponse_RestApiAccessResponseBuilder0.build();
      restApiAccessResponse0.getAuthenticatedUser();
      assertFalse(restApiAccessResponse0.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      RestApiAccessResponse restApiAccessResponse0 = new RestApiAccessResponse(false, authenticatedUser0);
      Object object0 = new Object();
      restApiAccessResponse0.canEqual(object0);
      assertFalse(restApiAccessResponse0.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder0 = new RestApiAccessResponse.RestApiAccessResponseBuilder();
      RestApiAccessResponse restApiAccessResponse0 = restApiAccessResponse_RestApiAccessResponseBuilder0.build();
      restApiAccessResponse0.canEqual(restApiAccessResponse0);
      assertFalse(restApiAccessResponse0.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AuthenticatedUser authenticatedUser0 = AuthenticatedUser.EMPTY;
      RestApiAccessResponse restApiAccessResponse0 = new RestApiAccessResponse(false, authenticatedUser0);
      restApiAccessResponse0.getAuthenticatedUser();
      assertFalse(restApiAccessResponse0.isAuthorized());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder0 = RestApiAccessResponse.builder();
      RestApiAccessResponse.RestApiAccessResponseBuilder restApiAccessResponse_RestApiAccessResponseBuilder1 = restApiAccessResponse_RestApiAccessResponseBuilder0.authorized(true);
      RestApiAccessResponse restApiAccessResponse0 = restApiAccessResponse_RestApiAccessResponseBuilder1.build();
      boolean boolean0 = restApiAccessResponse0.isAuthorized();
      assertTrue(boolean0);
  }
}
