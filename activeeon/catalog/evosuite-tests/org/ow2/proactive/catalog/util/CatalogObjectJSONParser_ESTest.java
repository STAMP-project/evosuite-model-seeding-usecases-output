/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 14:26:54 GMT 2019
 */

package org.ow2.proactive.catalog.util;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.ow2.proactive.catalog.util.CatalogObjectJSONParser;

public class CatalogObjectJSONParser_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CatalogObjectJSONParser catalogObjectJSONParser0 = new CatalogObjectJSONParser();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CatalogObjectJSONParser.parseJSONFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      String string0 = catalogObjectJSONParser_CatalogObjectData0.getKind();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      String string0 = catalogObjectJSONParser_CatalogObjectData0.getCommitMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      catalogObjectJSONParser_CatalogObjectData0.setCommitMessage("8k0m(p%Ce<I");
      assertNull(catalogObjectJSONParser_CatalogObjectData0.getUsername());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      catalogObjectJSONParser_CatalogObjectData0.setObjectFileName("}gaSPNr");
      assertNull(catalogObjectJSONParser_CatalogObjectData0.getUsername());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      String string0 = catalogObjectJSONParser_CatalogObjectData0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      catalogObjectJSONParser_CatalogObjectData0.setUsername("G");
      assertEquals("G", catalogObjectJSONParser_CatalogObjectData0.getUsername());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      String string0 = catalogObjectJSONParser_CatalogObjectData0.getContentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      catalogObjectJSONParser_CatalogObjectData0.setName("G");
      assertNull(catalogObjectJSONParser_CatalogObjectData0.getKind());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      catalogObjectJSONParser_CatalogObjectData0.setKind("MIME");
      assertEquals("MIME", catalogObjectJSONParser_CatalogObjectData0.getKind());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      String string0 = catalogObjectJSONParser_CatalogObjectData0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      String string0 = catalogObjectJSONParser_CatalogObjectData0.getObjectFileName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CatalogObjectJSONParser.CatalogObjectData catalogObjectJSONParser_CatalogObjectData0 = new CatalogObjectJSONParser.CatalogObjectData();
      catalogObjectJSONParser_CatalogObjectData0.setContentType("Gni");
      assertNull(catalogObjectJSONParser_CatalogObjectData0.getKind());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.ow2.proactive.catalog.util.CatalogObjectJSONParser", "org.ow2.proactive.catalog.util.CatalogObjectJSONParser");
      try { 
        CatalogObjectJSONParser.parseJSONFile(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //  at [Source: [B@0000000001; line: 1, column: 0]
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = new File("no suitable creator method found to deserialize from JSON floating-point number");
      try { 
        CatalogObjectJSONParser.parseJSONFile(file0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "Hj?");
      File file0 = MockFile.createTempFile("Hj?", "", (File) mockFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        CatalogObjectJSONParser.parseJSONFile(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
      }
  }
}
