/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 14:56:54 GMT 2019
 */

package org.ow2.proactive.catalog.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.time.ZoneId;
import java.util.Set;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.ow2.proactive.authentication.UserData;
import org.ow2.proactive.catalog.service.SchedulerRestClientCreator;
import org.ow2.proactive.catalog.service.SchedulerUserAuthenticationService;
import org.ow2.proactive.catalog.service.model.AuthenticatedUser;
import org.ow2.proactive_grid_cloud_portal.common.SchedulerRestInterface;
import org.ow2.proactive_grid_cloud_portal.scheduler.client.SchedulerRestClient;

public class SchedulerUserAuthenticationService_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserData userData0 = new UserData();
      SchedulerRestInterface schedulerRestInterface0 = mock(SchedulerRestInterface.class, new ViolatedAssumptionAnswer());
      doReturn(userData0).when(schedulerRestInterface0).getUserDataFromSessionId(anyString());
      SchedulerRestClient schedulerRestClient0 = mock(SchedulerRestClient.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerRestInterface0).when(schedulerRestClient0).getScheduler();
      SchedulerRestClientCreator schedulerRestClientCreator0 = mock(SchedulerRestClientCreator.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerRestClient0).when(schedulerRestClientCreator0).getNewClientInitializedWithSchedulerRestUrl();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      try { 
        schedulerUserAuthenticationService0.authenticateBySessionId((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SessionId is invalid
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserData userData0 = new UserData();
      SchedulerRestInterface schedulerRestInterface0 = mock(SchedulerRestInterface.class, new ViolatedAssumptionAnswer());
      doReturn(userData0).when(schedulerRestInterface0).getUserDataFromSessionId(anyString());
      SchedulerRestClient schedulerRestClient0 = mock(SchedulerRestClient.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerRestInterface0).when(schedulerRestClient0).getScheduler();
      SchedulerRestClientCreator schedulerRestClientCreator0 = mock(SchedulerRestClientCreator.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerRestClient0).when(schedulerRestClientCreator0).getNewClientInitializedWithSchedulerRestUrl();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      try { 
        schedulerUserAuthenticationService0.authenticateBySessionId("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // SessionId is invalid
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserData userData0 = new UserData();
      userData0.setUserName("TLS");
      SchedulerRestInterface schedulerRestInterface0 = mock(SchedulerRestInterface.class, new ViolatedAssumptionAnswer());
      doReturn(userData0).when(schedulerRestInterface0).getUserDataFromSessionId(anyString());
      SchedulerRestClient schedulerRestClient0 = mock(SchedulerRestClient.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerRestInterface0).when(schedulerRestClient0).getScheduler();
      SchedulerRestClientCreator schedulerRestClientCreator0 = mock(SchedulerRestClientCreator.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerRestClient0).when(schedulerRestClientCreator0).getNewClientInitializedWithSchedulerRestUrl();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      // Undeclared exception!
      try { 
        schedulerUserAuthenticationService0.authenticateBySessionId("TLS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserData userData0 = new UserData();
      userData0.setUserName("SessionId is invalid");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      userData0.setGroups(set0);
      SchedulerRestInterface schedulerRestInterface0 = mock(SchedulerRestInterface.class, new ViolatedAssumptionAnswer());
      doReturn(userData0).when(schedulerRestInterface0).getUserDataFromSessionId(anyString());
      SchedulerRestClient schedulerRestClient0 = mock(SchedulerRestClient.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerRestInterface0).when(schedulerRestClient0).getScheduler();
      SchedulerRestClientCreator schedulerRestClientCreator0 = mock(SchedulerRestClientCreator.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerRestClient0).when(schedulerRestClientCreator0).getNewClientInitializedWithSchedulerRestUrl();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      AuthenticatedUser authenticatedUser0 = schedulerUserAuthenticationService0.authenticateBySessionId("");
      assertEquals("SessionId is invalid", authenticatedUser0.getName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SchedulerRestClient schedulerRestClient0 = mock(SchedulerRestClient.class, new ViolatedAssumptionAnswer());
      doReturn((SchedulerRestInterface) null).when(schedulerRestClient0).getScheduler();
      SchedulerRestClientCreator schedulerRestClientCreator0 = mock(SchedulerRestClientCreator.class, new ViolatedAssumptionAnswer());
      doReturn(schedulerRestClient0).when(schedulerRestClientCreator0).getNewClientInitializedWithSchedulerRestUrl();
      SchedulerUserAuthenticationService schedulerUserAuthenticationService0 = new SchedulerUserAuthenticationService(schedulerRestClientCreator0);
      try { 
        schedulerUserAuthenticationService0.authenticateBySessionId("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not validate sessionId, validation returned: null
         //
      }
  }
}
