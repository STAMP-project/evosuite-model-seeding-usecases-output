/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 21 08:02:28 GMT 2019
 */

package no.tellu.findit.services.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import no.tellu.findit.domain.Asset;
import no.tellu.findit.domain.AssetImpl;
import no.tellu.findit.domain.AssetProperty;
import no.tellu.findit.domain.LocationImpl;
import no.tellu.findit.domain.LocationProjectionType;
import no.tellu.findit.domain.Position;
import no.tellu.findit.domain.PositionImpl;
import no.tellu.findit.domain.ServiceProviderImpl;
import no.tellu.findit.services.cassandra.AssetHistory;
import no.tellu.findit.services.cassandra.HistoryDatabaseServiceImpl;
import org.evosuite.runtime.mock.java.util.MockDate;

public class HistoryDatabaseServiceImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      assertNotNull(historyDatabaseServiceImpl0);
      
      boolean boolean0 = historyDatabaseServiceImpl0.isConfigured();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      AssetImpl assetImpl0 = new AssetImpl();
      LinkedList<AssetProperty> linkedList0 = new LinkedList<AssetProperty>();
      historyDatabaseServiceImpl0.addPropertyHistory(assetImpl0, linkedList0, (Date) null, (Date) null, (Long) null);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      PositionImpl positionImpl0 = new PositionImpl(1, true);
      Map<String, String> map0 = positionImpl0.getTransientProperties();
      LinkedList<HistoryDatabaseServiceImpl> linkedList0 = new LinkedList<HistoryDatabaseServiceImpl>();
      Long long0 = new Long((-158L));
      historyDatabaseServiceImpl0.addToAssetHistory("=`oMP>wF'%fTl**", (Asset) null, (Position) null, "=`oMP>wF'%fTl**", map0, linkedList0, map0, (Date) null, long0);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      historyDatabaseServiceImpl0.close();
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      historyDatabaseServiceImpl0.clearKeyspace();
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
      
      historyDatabaseServiceImpl0.configure(", r_time", ", r_time", ", r_time", "=`oMP>wF'%fTl**", 1);
      boolean boolean0 = historyDatabaseServiceImpl0.isConfigured();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      historyDatabaseServiceImpl0.createKeySpace((String) null);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      historyDatabaseServiceImpl0.createAssetHistoryTable((String) null);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      historyDatabaseServiceImpl0.createAssetPropertyDB("=`oMP>wF'%fTl**");
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PositionImpl positionImpl0 = new PositionImpl(0L, false);
      Long long0 = positionImpl0.getFloor();
      LocationProjectionType locationProjectionType0 = LocationProjectionType.UTM;
      Double double0 = positionImpl0.getLongitude();
      LocationImpl locationImpl0 = new LocationImpl(long0, positionImpl0, false, false, "Qm]PoY(HgzZ`D1z", "AssetRecordImpl", locationProjectionType0, (Double) null, (Double) null, (Double) null, (Double) null, double0, (Double) null, (Long) null);
      List<Long> list0 = locationImpl0.getActiveLevels();
      ServiceProviderImpl serviceProviderImpl0 = new ServiceProviderImpl(long0, (Long) null, long0, "A0U6SqTM9$");
      Date date0 = serviceProviderImpl0.getDateCreated();
      Map<String, Object> map0 = historyDatabaseServiceImpl0.getAssetObservations(list0, date0, date0, hashMap0);
      assertEquals(2, map0.size());
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      historyDatabaseServiceImpl0.getAssetObservation((Long) null, (Date) null, hashMap0);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      long long0 = historyDatabaseServiceImpl0.count((List<Long>) null, (String) null, (Date) null, (Date) null, (String) null);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<AssetHistory> class0 = AssetHistory.class;
      String string0 = historyDatabaseServiceImpl0.createSelectStatement(hashMap0, class0);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
      assertEquals("SELECT * ", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      MockDate mockDate0 = new MockDate(7, 7, 2175, 7, 1, 7);
      String string0 = historyDatabaseServiceImpl0.createTimeClause((Date) null, mockDate0);
      assertEquals(" o_time < -1781974733000 ", string0);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      MockDate mockDate0 = new MockDate(0L);
      String string0 = historyDatabaseServiceImpl0.createTimeClause(mockDate0, (Date) null);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
      assertEquals(" AND o_time > 0 ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      MockDate mockDate0 = new MockDate(543, 543, 2, 1352, 7, 602);
      String string0 = historyDatabaseServiceImpl0.createTimeClause(mockDate0, mockDate0);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
      assertEquals(" AND o_time > 16359351422000  AND  o_time < 16359351422000 ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      String string0 = historyDatabaseServiceImpl0.ceateAssetStatement((List<Long>) null);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add((Long) null);
      String string0 = historyDatabaseServiceImpl0.ceateAssetStatement(linkedList0);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
      assertEquals(" WHERE a_id  = null", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add((Long) null);
      linkedList0.add((Long) null);
      String string0 = historyDatabaseServiceImpl0.ceateAssetStatement(linkedList0);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
      assertEquals(" WHERE a_id  IN (null,null) ", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      historyDatabaseServiceImpl0.createJSONString((Object) null);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      MockDate mockDate0 = new MockDate();
      Double double0 = new Double((-1.0));
      Map<String, Object> map0 = historyDatabaseServiceImpl0.getAssetProperties(linkedList0, "", mockDate0, mockDate0, (String) null, double0, hashMap0);
      // Undeclared exception!
      try { 
        historyDatabaseServiceImpl0.createJSONString(map0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = new HistoryDatabaseServiceImpl();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      String string0 = historyDatabaseServiceImpl0.createJSONString(map0);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
      assertEquals("{'CTT':'Asia/Shanghai','ART':'Africa/Cairo','CNT':'America/St_Johns','PRT':'America/Puerto_Rico','PNT':'America/Phoenix','PLT':'Asia/Karachi','AST':'America/Anchorage','BST':'Asia/Dhaka','CST':'America/Chicago','EST':'-05:00','HST':'-10:00','JST':'Asia/Tokyo','IST':'Asia/Kolkata','AGT':'America/Argentina/Buenos_Aires','NST':'Pacific/Auckland','MST':'-07:00','AET':'Australia/Sydney','BET':'America/Sao_Paulo','PST':'America/Los_Angeles','ACT':'Australia/Darwin','SST':'Pacific/Guadalcanal','VST':'Asia/Ho_Chi_Minh','CAT':'Africa/Harare','ECT':'Europe/Paris','EAT':'Africa/Addis_Ababa','IET':'America/Indiana/Indianapolis','MIT':'Pacific/Apia','NET':'Asia/Yerevan'}", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("longitude");
      historyDatabaseServiceImpl0.createJSONString(linkedList0);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(0L);
      linkedList0.add(long0);
      linkedList0.add(long0);
      historyDatabaseServiceImpl0.createJSONString(linkedList0);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      historyDatabaseServiceImpl0.printNodes();
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        historyDatabaseServiceImpl0.createSelectStatement((Map<String, String>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      historyDatabaseServiceImpl0.createTimeClause((Date) null, (Date) null);
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl0 = HistoryDatabaseServiceImpl.getInstance();
      assertFalse(historyDatabaseServiceImpl0.isConfigured());
      
      historyDatabaseServiceImpl0.configure((String) null, ",O~h[,0;", "qx'k_T:B@Hd_$\"", "id", (-689));
      assertTrue(historyDatabaseServiceImpl0.isConfigured());
      
      HistoryDatabaseServiceImpl historyDatabaseServiceImpl1 = HistoryDatabaseServiceImpl.getInstance();
      assertTrue(historyDatabaseServiceImpl1.isConfigured());
  }
}
