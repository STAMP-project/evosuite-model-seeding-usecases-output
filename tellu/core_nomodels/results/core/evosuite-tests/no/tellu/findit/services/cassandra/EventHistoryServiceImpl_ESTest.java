/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 21 07:56:42 GMT 2019
 */

package no.tellu.findit.services.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.Instant;
import java.time.ZoneId;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import no.tellu.findit.services.cassandra.Event;
import no.tellu.findit.services.cassandra.EventHistoryService;
import no.tellu.findit.services.cassandra.EventHistoryServiceImpl;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockUUID;

public class EventHistoryServiceImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      eventHistoryServiceImpl0.setTTL((Long) null);
      assertFalse(eventHistoryServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EventHistoryService eventHistoryService0 = EventHistoryServiceImpl.getInstance();
      boolean boolean0 = eventHistoryService0.isConfigured();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      Event event0 = new Event();
      eventHistoryServiceImpl0.registerEvent(event0);
      assertNull(event0.getEvent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      Long long0 = new Long((-144L));
      MockDate mockDate0 = new MockDate();
      UUID uUID0 = MockUUID.fromString((String) null);
      eventHistoryServiceImpl0.registerEvent((String) null, (String) null, long0, long0, (Date) mockDate0, long0, (String) null, (String) null, (String) null, (String) null, uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<Event> list0 = eventHistoryServiceImpl0.getEvents(linkedList0, (Date) null, (Date) null, (String) null, (Long) null, (Long) null, (String) null, hashMap0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EventHistoryService eventHistoryService0 = EventHistoryServiceImpl.getInstance();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      MockDate mockDate0 = new MockDate();
      Long long0 = Long.getLong((String) null, (-9223372036854775808L));
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<Event> list0 = eventHistoryService0.getEvents(linkedList0, mockDate0, mockDate0, "wL5H8LNH", long0, long0, "wL5H8LNH", map0);
      assertFalse(linkedList0.contains((-9223372036854775808L)));
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EventHistoryService eventHistoryService0 = EventHistoryServiceImpl.getInstance();
      eventHistoryService0.configure("-?W#", "no-reply@smarttracker.no", "V(MWGxXW", (-1));
      assertTrue(eventHistoryService0.isConfigured());
      
      EventHistoryService eventHistoryService1 = EventHistoryServiceImpl.getInstance();
      assertTrue(eventHistoryService1.isConfigured());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      eventHistoryServiceImpl0.createEventTable((String) null);
      assertFalse(eventHistoryServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = (EventHistoryServiceImpl)EventHistoryServiceImpl.getInstance();
      eventHistoryServiceImpl0.clearKeyspace();
      assertFalse(eventHistoryServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      MockDate mockDate0 = new MockDate();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      List<Event> list0 = eventHistoryServiceImpl0.getEventsWithListOfObjectIds(linkedList0, mockDate0, mockDate0, (String) null, (Long) null, linkedList0, (String) null, map0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      eventHistoryServiceImpl0.configure("XMzoD$(", "XMzoD$(", "%s%s%s", 251);
      boolean boolean0 = eventHistoryServiceImpl0.isConfigured();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      MockDate mockDate0 = new MockDate((-51), 0, 482, 0, 0, 215);
      Long long0 = new Long(482);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Long long1 = new Long(0L);
      List<Event> list0 = eventHistoryServiceImpl0.getEvents(linkedList0, mockDate0, mockDate0, (String) null, long0, long1, "no.tellu.findit.cfg.Environment", map0);
      assertFalse(linkedList0.contains(0L));
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EventHistoryServiceImpl eventHistoryServiceImpl0 = new EventHistoryServiceImpl();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      MockDate mockDate0 = new MockDate((-51), 0, 482, 0, 0, 215);
      Long long0 = new Long(482);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Instant instant0 = MockInstant.ofEpochSecond((long) 0, (-917L));
      Date date0 = Date.from(instant0);
      List<Event> list0 = eventHistoryServiceImpl0.getEvents(linkedList0, date0, mockDate0, (String) null, long0, long0, "no.tellu.findit.cfg.Environment", map0);
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(long0));
  }
}
