/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 14:28:04 GMT 2019
 */

package org.ow2.proactive.catalog.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.ow2.proactive.catalog.repository.entity.CatalogObjectRevisionEntity;
import org.ow2.proactive.catalog.util.ArchiveManagerHelper;
import org.ow2.proactive.catalog.util.RawObjectResponseCreator;

public class ArchiveManagerHelper_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArchiveManagerHelper archiveManagerHelper0 = new ArchiveManagerHelper();
      RawObjectResponseCreator rawObjectResponseCreator0 = mock(RawObjectResponseCreator.class, new ViolatedAssumptionAnswer());
      Injector.inject(archiveManagerHelper0, (Class<?>) ArchiveManagerHelper.class, "rawObjectResponseCreator", (Object) rawObjectResponseCreator0);
      Injector.validateBean(archiveManagerHelper0, (Class<?>) ArchiveManagerHelper.class);
      byte[] byteArray0 = new byte[5];
      List<ArchiveManagerHelper.FileNameAndContent> list0 = archiveManagerHelper0.extractZIP(byteArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArchiveManagerHelper.FileNameAndContent archiveManagerHelper_FileNameAndContent0 = new ArchiveManagerHelper.FileNameAndContent();
      archiveManagerHelper_FileNameAndContent0.setContent((byte[]) null);
      assertNull(archiveManagerHelper_FileNameAndContent0.getFileNameWithExtension());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArchiveManagerHelper.FileNameAndContent archiveManagerHelper_FileNameAndContent0 = new ArchiveManagerHelper.FileNameAndContent();
      byte[] byteArray0 = archiveManagerHelper_FileNameAndContent0.getContent();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArchiveManagerHelper.FileNameAndContent archiveManagerHelper_FileNameAndContent0 = new ArchiveManagerHelper.FileNameAndContent();
      archiveManagerHelper_FileNameAndContent0.setName("<=W~S8*Erh|lg(|hOwK");
      assertNull(archiveManagerHelper_FileNameAndContent0.getFileNameWithExtension());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArchiveManagerHelper.FileNameAndContent archiveManagerHelper_FileNameAndContent0 = new ArchiveManagerHelper.FileNameAndContent();
      String string0 = archiveManagerHelper_FileNameAndContent0.getFileNameWithExtension();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArchiveManagerHelper.FileNameAndContent archiveManagerHelper_FileNameAndContent0 = new ArchiveManagerHelper.FileNameAndContent();
      String string0 = archiveManagerHelper_FileNameAndContent0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArchiveManagerHelper.FileNameAndContent archiveManagerHelper_FileNameAndContent0 = new ArchiveManagerHelper.FileNameAndContent();
      archiveManagerHelper_FileNameAndContent0.setFileNameWithExtension((String) null);
      assertNull(archiveManagerHelper_FileNameAndContent0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<CatalogObjectRevisionEntity> linkedList0 = new LinkedList<CatalogObjectRevisionEntity>();
      ArchiveManagerHelper archiveManagerHelper0 = new ArchiveManagerHelper();
      RawObjectResponseCreator rawObjectResponseCreator0 = mock(RawObjectResponseCreator.class, new ViolatedAssumptionAnswer());
      Injector.inject(archiveManagerHelper0, (Class<?>) ArchiveManagerHelper.class, "rawObjectResponseCreator", (Object) rawObjectResponseCreator0);
      Injector.validateBean(archiveManagerHelper0, (Class<?>) ArchiveManagerHelper.class);
      ArchiveManagerHelper.ZipArchiveContent archiveManagerHelper_ZipArchiveContent0 = archiveManagerHelper0.compressZIP(linkedList0);
      assertNotNull(archiveManagerHelper_ZipArchiveContent0);
      assertFalse(archiveManagerHelper_ZipArchiveContent0.isPartial());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArchiveManagerHelper.ZipArchiveContent archiveManagerHelper_ZipArchiveContent0 = new ArchiveManagerHelper.ZipArchiveContent();
      boolean boolean0 = archiveManagerHelper_ZipArchiveContent0.isPartial();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<CatalogObjectRevisionEntity> linkedList0 = new LinkedList<CatalogObjectRevisionEntity>();
      linkedList0.offerLast((CatalogObjectRevisionEntity) null);
      ArchiveManagerHelper archiveManagerHelper0 = new ArchiveManagerHelper();
      RawObjectResponseCreator rawObjectResponseCreator0 = mock(RawObjectResponseCreator.class, new ViolatedAssumptionAnswer());
      Injector.inject(archiveManagerHelper0, (Class<?>) ArchiveManagerHelper.class, "rawObjectResponseCreator", (Object) rawObjectResponseCreator0);
      Injector.validateBean(archiveManagerHelper0, (Class<?>) ArchiveManagerHelper.class);
      ArchiveManagerHelper.ZipArchiveContent archiveManagerHelper_ZipArchiveContent0 = archiveManagerHelper0.compressZIP(linkedList0);
      assertTrue(archiveManagerHelper_ZipArchiveContent0.isPartial());
      assertNotNull(archiveManagerHelper_ZipArchiveContent0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArchiveManagerHelper.ZipArchiveContent archiveManagerHelper_ZipArchiveContent0 = new ArchiveManagerHelper.ZipArchiveContent();
      archiveManagerHelper_ZipArchiveContent0.getContent();
      assertFalse(archiveManagerHelper_ZipArchiveContent0.isPartial());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArchiveManagerHelper archiveManagerHelper0 = new ArchiveManagerHelper();
      ArchiveManagerHelper.ZipArchiveContent archiveManagerHelper_ZipArchiveContent0 = archiveManagerHelper0.compressZIP((List<CatalogObjectRevisionEntity>) null);
      assertNull(archiveManagerHelper_ZipArchiveContent0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArchiveManagerHelper archiveManagerHelper0 = new ArchiveManagerHelper();
      CatalogObjectRevisionEntity catalogObjectRevisionEntity0 = new CatalogObjectRevisionEntity();
      LinkedList<CatalogObjectRevisionEntity> linkedList0 = new LinkedList<CatalogObjectRevisionEntity>();
      linkedList0.offerLast(catalogObjectRevisionEntity0);
      // Undeclared exception!
      try { 
        archiveManagerHelper0.compressZIP(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArchiveManagerHelper archiveManagerHelper0 = new ArchiveManagerHelper();
      List<ArchiveManagerHelper.FileNameAndContent> list0 = archiveManagerHelper0.extractZIP((byte[]) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArchiveManagerHelper.ZipArchiveContent archiveManagerHelper_ZipArchiveContent0 = new ArchiveManagerHelper.ZipArchiveContent();
      byte[] byteArray0 = new byte[3];
      archiveManagerHelper_ZipArchiveContent0.setContent(byteArray0);
      assertFalse(archiveManagerHelper_ZipArchiveContent0.isPartial());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArchiveManagerHelper.ZipArchiveContent archiveManagerHelper_ZipArchiveContent0 = new ArchiveManagerHelper.ZipArchiveContent();
      assertFalse(archiveManagerHelper_ZipArchiveContent0.isPartial());
      
      archiveManagerHelper_ZipArchiveContent0.setPartial(true);
      assertTrue(archiveManagerHelper_ZipArchiveContent0.isPartial());
  }
}
