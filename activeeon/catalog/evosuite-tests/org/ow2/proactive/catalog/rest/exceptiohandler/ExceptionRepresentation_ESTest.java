/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 13:00:21 GMT 2019
 */

package org.ow2.proactive.catalog.rest.exceptiohandler;

import org.junit.Test;
import static org.junit.Assert.*;
import org.ow2.proactive.catalog.rest.exceptiohandler.ExceptionRepresentation;

public class ExceptionRepresentation_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "WRITE_ONLY", (String) null);
      String string0 = exceptionRepresentation0.toString();
      assertEquals("ExceptionRepresentation(statusCode=null, errorMessage=WRITE_ONLY, stackTrace=null)", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1997);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, "", "READ_ONLY");
      exceptionRepresentation0.hashCode();
      assertEquals("READ_ONLY", exceptionRepresentation0.getStackTrace());
      assertEquals("", exceptionRepresentation0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "", (String) null);
      exceptionRepresentation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(2039);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, (String) null, (String) null);
      exceptionRepresentation0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "WRITE_ONLY", (String) null);
      boolean boolean0 = exceptionRepresentation0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, "", "");
      ExceptionRepresentation exceptionRepresentation1 = new ExceptionRepresentation(integer0, "", "");
      boolean boolean0 = exceptionRepresentation0.equals(exceptionRepresentation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(1997);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "", "");
      ExceptionRepresentation exceptionRepresentation1 = new ExceptionRepresentation(integer0, "ExceptionRepresentation(statusCode=null, errorMessage=, stackTrace=)", "tF5](Gt|");
      boolean boolean0 = exceptionRepresentation0.equals(exceptionRepresentation1);
      assertFalse(boolean0);
      assertEquals("ExceptionRepresentation(statusCode=null, errorMessage=, stackTrace=)", exceptionRepresentation1.getErrorMessage());
      assertEquals("tF5](Gt|", exceptionRepresentation1.getStackTrace());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "n{([Ft%~e-7xHG", "n{([Ft%~e-7xHG");
      ExceptionRepresentation exceptionRepresentation1 = new ExceptionRepresentation((Integer) (-2089), "n{([Ft%~e-7xHG", "n{([Ft%~e-7xHG");
      boolean boolean0 = exceptionRepresentation1.equals(exceptionRepresentation0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, (String) null, (String) null);
      ExceptionRepresentation exceptionRepresentation1 = new ExceptionRepresentation((Integer) null, "n{([Ft%~e-7xHvG", "n{([Ft%~e-7xHvG");
      boolean boolean0 = exceptionRepresentation0.equals(exceptionRepresentation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(2480);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, (String) null, (String) null);
      ExceptionRepresentation exceptionRepresentation1 = new ExceptionRepresentation(integer0, (String) null, (String) null);
      boolean boolean0 = exceptionRepresentation0.equals(exceptionRepresentation1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "Qb)", "Qb)");
      ExceptionRepresentation exceptionRepresentation1 = new ExceptionRepresentation((Integer) null, "K$XD", "K$XD");
      boolean boolean0 = exceptionRepresentation0.equals(exceptionRepresentation1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "WRITE_ONLY", (String) null);
      ExceptionRepresentation exceptionRepresentation1 = new ExceptionRepresentation((Integer) null, "WRITE_ONLY", "");
      boolean boolean0 = exceptionRepresentation0.equals(exceptionRepresentation1);
      assertEquals("WRITE_ONLY", exceptionRepresentation1.getErrorMessage());
      assertFalse(boolean0);
      assertFalse(exceptionRepresentation1.equals((Object)exceptionRepresentation0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "", "");
      ExceptionRepresentation exceptionRepresentation1 = new ExceptionRepresentation((Integer) null, "", "e4[]OkJf\"K");
      boolean boolean0 = exceptionRepresentation0.equals(exceptionRepresentation1);
      assertEquals("", exceptionRepresentation1.getErrorMessage());
      assertFalse(boolean0);
      assertFalse(exceptionRepresentation1.equals((Object)exceptionRepresentation0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, "", "");
      String string0 = exceptionRepresentation0.getStackTrace();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, "", "");
      Integer integer1 = exceptionRepresentation0.getStatusCode();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "", (String) null);
      String string0 = exceptionRepresentation0.getErrorMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, "", "");
      boolean boolean0 = exceptionRepresentation0.canEqual(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((-2416));
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, "", "z1<i$");
      exceptionRepresentation0.canEqual(exceptionRepresentation0);
      assertEquals("", exceptionRepresentation0.getErrorMessage());
      assertEquals("z1<i$", exceptionRepresentation0.getStackTrace());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, ".2TucHs:B'+o5K^/0Nc", "s4/i<:<KRn2");
      String string0 = exceptionRepresentation0.getErrorMessage();
      assertEquals(".2TucHs:B'+o5K^/0Nc", string0);
      assertEquals("s4/i<:<KRn2", exceptionRepresentation0.getStackTrace());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-1884));
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, (String) null, "");
      String string0 = exceptionRepresentation0.getErrorMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) 0, "0", "at+B<a)774k");
      String string0 = exceptionRepresentation0.getStackTrace();
      assertEquals("at+B<a)774k", string0);
      assertEquals("0", exceptionRepresentation0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "", (String) null);
      String string0 = exceptionRepresentation0.getStackTrace();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-3883));
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, "4294965358", ", stackTrace=");
      exceptionRepresentation0.getStatusCode();
      assertEquals(", stackTrace=", exceptionRepresentation0.getStackTrace());
      assertEquals("4294965358", exceptionRepresentation0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) null, "", (String) null);
      Integer integer0 = exceptionRepresentation0.getStatusCode();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation((Integer) 2695, "0", "");
      exceptionRepresentation0.getStatusCode();
      assertEquals("", exceptionRepresentation0.getStackTrace());
      assertEquals("0", exceptionRepresentation0.getErrorMessage());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, "", "");
      boolean boolean0 = exceptionRepresentation0.equals(exceptionRepresentation0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(2849);
      ExceptionRepresentation exceptionRepresentation0 = new ExceptionRepresentation(integer0, "", "v@;q`IhK[s~");
      ExceptionRepresentation exceptionRepresentation1 = new ExceptionRepresentation(integer0, "", ";rj$v>X");
      boolean boolean0 = exceptionRepresentation0.equals(exceptionRepresentation1);
      assertFalse(boolean0);
      assertEquals("", exceptionRepresentation1.getErrorMessage());
  }
}
