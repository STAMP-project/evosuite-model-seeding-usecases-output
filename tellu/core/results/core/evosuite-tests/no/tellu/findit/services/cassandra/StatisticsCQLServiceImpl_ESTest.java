/*
 * This file was automatically generated by EvoSuite
 * Wed Sep 25 09:08:12 GMT 2019
 */

package no.tellu.findit.services.cassandra;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Date;
import java.util.List;
import no.tellu.findit.services.cassandra.Count;
import no.tellu.findit.services.cassandra.State;
import no.tellu.findit.services.cassandra.StatisticsCQLServiceImpl;
import org.evosuite.runtime.mock.java.util.MockDate;

public class StatisticsCQLServiceImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      statisticsCQLServiceImpl0.setTTL((Long) null);
      assertFalse(statisticsCQLServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = new StatisticsCQLServiceImpl();
      MockDate mockDate0 = new MockDate();
      Date date0 = statisticsCQLServiceImpl0.getHourOfDay(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      boolean boolean0 = statisticsCQLServiceImpl0.isConfigured();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = new StatisticsCQLServiceImpl();
      statisticsCQLServiceImpl0.clearKeyspace();
      assertFalse(statisticsCQLServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      statisticsCQLServiceImpl0.checkCassandraConnectionHealth();
      assertFalse(statisticsCQLServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      MockDate mockDate0 = new MockDate();
      statisticsCQLServiceImpl0.registerEvent(mockDate0, (String) null, (Long) null, (Long) null);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      long long0 = statisticsCQLServiceImpl0.fetchEventCount((Date) null, (Date) null, (String) null, (Long) null, (Long) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = new StatisticsCQLServiceImpl();
      MockDate mockDate0 = new MockDate((-324), 47, (-324), 47, 47, (-324));
      Long long0 = Long.getLong("", (-7L));
      List<Count> list0 = statisticsCQLServiceImpl0.fetchEventCounts(mockDate0, mockDate0, "", long0, (Long) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      MockDate mockDate0 = new MockDate();
      statisticsCQLServiceImpl0.registerState(mockDate0, (String) null, (String) null, (Long) null, (Long) null, (Long) null);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = new StatisticsCQLServiceImpl();
      MockDate mockDate0 = new MockDate();
      List<State> list0 = statisticsCQLServiceImpl0.fetchStateChanges(mockDate0, mockDate0, (String) null, (String) null, (Long) null, (Long) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = new StatisticsCQLServiceImpl();
      MockDate mockDate0 = new MockDate((-324), 47, (-324), 47, 47, (-324));
      Long long0 = Long.getLong("", (-7L));
      String string0 = statisticsCQLServiceImpl0.fetchInitialState(mockDate0, "", "", long0, long0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      statisticsCQLServiceImpl0.close();
      assertFalse(statisticsCQLServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      statisticsCQLServiceImpl0.createStateTable((String) null);
      assertFalse(statisticsCQLServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = new StatisticsCQLServiceImpl();
      statisticsCQLServiceImpl0.createCounterTable((String) null);
      assertFalse(statisticsCQLServiceImpl0.isConfigured());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      // Undeclared exception!
      try { 
        statisticsCQLServiceImpl0.getHourOfDay((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      MockDate mockDate0 = new MockDate(34, 34, 34, 34, (-1273));
      Long long0 = Long.valueOf(0L);
      String string0 = statisticsCQLServiceImpl0.fetchInitialState(mockDate0, "^XCb+5J", "^XCb+5J", long0, (Long) (-1206L));
      assertEquals("^XCb+5J", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = new StatisticsCQLServiceImpl();
      MockDate mockDate0 = new MockDate();
      String string0 = statisticsCQLServiceImpl0.fetchInitialState(mockDate0, (String) null, (String) null, (Long) null, (Long) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      statisticsCQLServiceImpl0.configure(":~_+36V", "!]aV]i<GVq)RE6", "PRIMARY KEY ((o_id, key), time)", "p", (-791));
      assertTrue(statisticsCQLServiceImpl0.isConfigured());
      
      StatisticsCQLServiceImpl statisticsCQLServiceImpl1 = StatisticsCQLServiceImpl.getInstance();
      assertTrue(statisticsCQLServiceImpl1.isConfigured());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticsCQLServiceImpl statisticsCQLServiceImpl0 = StatisticsCQLServiceImpl.getInstance();
      statisticsCQLServiceImpl0.configure("e*){i37&wZIKGFJP", "", "", "cassandra_cql_subscription_message_ttl", (-1));
      boolean boolean0 = statisticsCQLServiceImpl0.isConfigured();
      assertTrue(boolean0);
  }
}
