/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 16 14:23:09 GMT 2019
 */

package org.ow2.proactive.catalog.report;

import org.junit.Test;
import static org.junit.Assert.*;
import be.quodlibet.boxable.BaseTable;
import be.quodlibet.boxable.page.DefaultPageProvider;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.Function;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.evosuite.runtime.javaee.injection.Injector;
import org.jgrapht.graph.DefaultEdgeFunction;
import org.ow2.proactive.catalog.dto.CatalogObjectMetadata;
import org.ow2.proactive.catalog.report.CellFactory;
import org.ow2.proactive.catalog.report.HeadersBuilder;

public class HeadersBuilder_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HeadersBuilder headersBuilder0 = new HeadersBuilder();
      // Undeclared exception!
      try { 
        headersBuilder0.createMainHeader((BaseTable) null, "org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure.PDDefaultAttributeObject");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HeadersBuilder headersBuilder0 = new HeadersBuilder();
      CellFactory cellFactory0 = new CellFactory();
      Injector.inject(headersBuilder0, (Class<?>) HeadersBuilder.class, "cellFactory", (Object) cellFactory0);
      Injector.validateBean(headersBuilder0, (Class<?>) HeadersBuilder.class);
      PDDocument pDDocument0 = new PDDocument();
      PDPage pDPage0 = new PDPage((PDRectangle) null);
      Optional<String> optional0 = Optional.of("graphql.schema.GraphQLTypeReference");
      BaseTable baseTable0 = new BaseTable(1683.7795F, (-8.074902F), 1683.7795F, 0.0F, 2537.8F, pDDocument0, pDPage0, true, true);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(103);
      headersBuilder0.createInfoHeader(baseTable0, (Set<String>) linkedHashSet0, (Set<String>) linkedHashSet0, optional0, optional0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HeadersBuilder headersBuilder0 = new HeadersBuilder();
      CellFactory cellFactory0 = new CellFactory();
      Injector.inject(headersBuilder0, (Class<?>) HeadersBuilder.class, "cellFactory", (Object) cellFactory0);
      Injector.validateBean(headersBuilder0, (Class<?>) HeadersBuilder.class);
      PDDocument pDDocument0 = new PDDocument();
      PDPage pDPage0 = new PDPage((PDRectangle) null);
      Optional<String> optional0 = Optional.of("graphql.schema.GraphQLTypeReference");
      BaseTable baseTable0 = new BaseTable((-1.0F), (-1.0F), (-1147.3F), 0.0F, 1683.7795F, pDDocument0, pDPage0, true, false);
      TreeSet<CatalogObjectMetadata> treeSet0 = new TreeSet<CatalogObjectMetadata>();
      headersBuilder0.createInfoHeader(baseTable0, (Set<CatalogObjectMetadata>) treeSet0, optional0, optional0);
      assertFalse(baseTable0.tableStartedAtNewPage());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HeadersBuilder headersBuilder0 = new HeadersBuilder();
      PDDocument pDDocument0 = new PDDocument();
      PDPage pDPage0 = new PDPage((PDRectangle) null);
      BaseTable baseTable0 = new BaseTable(3.0F, (-467.99F), 3.0F, (-467.99F), (-467.99F), pDDocument0, pDPage0, false, false);
      // Undeclared exception!
      try { 
        headersBuilder0.createMainHeader(baseTable0, "GXuqc8QQ\u001DpmXy.5P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cell Width=-116.9975 can't be bigger than row width=-467.99
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HeadersBuilder headersBuilder0 = new HeadersBuilder();
      CellFactory cellFactory0 = new CellFactory();
      Injector.inject(headersBuilder0, (Class<?>) HeadersBuilder.class, "cellFactory", (Object) cellFactory0);
      Injector.validateBean(headersBuilder0, (Class<?>) HeadersBuilder.class);
      PDDocument pDDocument0 = new PDDocument();
      PDPage pDPage0 = new PDPage((PDRectangle) null);
      BaseTable baseTable0 = new BaseTable(1683.7795F, (-8.074902F), 1683.7795F, 0.0F, 2537.8F, pDDocument0, pDPage0, true, true);
      headersBuilder0.createMainHeader(baseTable0, "p$]It\"0>U");
      assertFalse(baseTable0.tableStartedAtNewPage());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HeadersBuilder headersBuilder0 = new HeadersBuilder();
      PDDocument pDDocument0 = new PDDocument();
      PDRectangle pDRectangle0 = new PDRectangle();
      DefaultPageProvider defaultPageProvider0 = new DefaultPageProvider(pDDocument0, pDRectangle0);
      PDPage pDPage0 = defaultPageProvider0.createPage();
      BaseTable baseTable0 = new BaseTable((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), pDDocument0, pDPage0, false, false);
      Optional<String> optional0 = Optional.ofNullable("");
      Hashtable<Object, String> hashtable0 = new Hashtable<Object, String>();
      DefaultEdgeFunction<Object, String> defaultEdgeFunction0 = new DefaultEdgeFunction<Object, String>("?r<Pj!>#", hashtable0);
      Optional<String> optional1 = optional0.map((Function<? super String, ? extends String>) defaultEdgeFunction0);
      TreeSet<CatalogObjectMetadata> treeSet0 = new TreeSet<CatalogObjectMetadata>();
      // Undeclared exception!
      try { 
        headersBuilder0.createInfoHeader(baseTable0, (Set<CatalogObjectMetadata>) treeSet0, optional0, optional1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HeadersBuilder headersBuilder0 = new HeadersBuilder();
      PDDocument pDDocument0 = new PDDocument();
      PDRectangle pDRectangle0 = new PDRectangle();
      DefaultPageProvider defaultPageProvider0 = new DefaultPageProvider(pDDocument0, pDRectangle0);
      PDPage pDPage0 = defaultPageProvider0.createPage();
      BaseTable baseTable0 = new BaseTable((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), pDDocument0, pDPage0, false, false);
      HashSet<String> hashSet0 = new HashSet<String>();
      Optional<String> optional0 = Optional.of("pBqce/1LJS#");
      Optional<String> optional1 = Optional.empty();
      // Undeclared exception!
      try { 
        headersBuilder0.createInfoHeader(baseTable0, (Set<String>) hashSet0, (Set<String>) hashSet0, optional0, optional1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HeadersBuilder headersBuilder0 = new HeadersBuilder();
      PDDocument pDDocument0 = new PDDocument();
      PDRectangle pDRectangle0 = new PDRectangle();
      DefaultPageProvider defaultPageProvider0 = new DefaultPageProvider(pDDocument0, pDRectangle0);
      PDPage pDPage0 = defaultPageProvider0.createPage();
      BaseTable baseTable0 = new BaseTable((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), pDDocument0, pDPage0, false, false);
      HashSet<String> hashSet0 = new HashSet<String>();
      Optional<String> optional0 = Optional.of("pBqce/1LJS#");
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        headersBuilder0.createInfoHeader(baseTable0, (Set<String>) hashSet0, set0, optional0, optional0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
